//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\black\Documents\GitHub\Linear\scripts\\..\spec\Linear.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class LinearParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, COMMENT=19, COMENT_BLOCK=20, OPEN=21, CLOSE=22, OPENSQ=23, CLOSESQ=24, 
		ENDL=25, IDENTIFIER=26, WS=27, PLUS=28, MINUS=29, STAR=30, DIV=31, PERCENT=32, 
		AMP=33, BITWISE_OR=34, CARET=35, BANG=36, TILDE=37, ASSIGNMENT=38, LT=39, 
		GT=40, INTERR=41, OP_AND=42, OP_OR=43, OP_EQ=44, OP_NE=45, OP_LE=46, OP_GE=47, 
		INTEGER_LITERAL=48, HEX_INTEGER_LITERAL=49, REAL_LITERAL=50, CHARACTER_LITERAL=51, 
		REGULAR_STRING=52, VERBATIM_STRING=53;
	public const int
		RULE_compilation_unit = 0, RULE_body_element = 1, RULE_struct = 2, RULE_struct_statement = 3, 
		RULE_struct_statement_define = 4, RULE_struct_statement_call = 5, RULE_struct_statement_length = 6, 
		RULE_struct_statement_define_array = 7, RULE_struct_statement_define_array_indirect = 8, 
		RULE_struct_statement_output = 9, RULE_property_group = 10, RULE_property_statement = 11, 
		RULE_term_replacement_length = 12, RULE_term_replacement_a = 13, RULE_term_replacement_i = 14, 
		RULE_term_replacement_p = 15, RULE_term_replacement_u = 16, RULE_expr = 17, 
		RULE_op_mul_div = 18, RULE_op_add_sub = 19, RULE_un_op = 20, RULE_bool_op = 21, 
		RULE_struct_size = 22, RULE_term = 23;
	public static readonly string[] ruleNames = {
		"compilation_unit", "body_element", "struct", "struct_statement", "struct_statement_define", 
		"struct_statement_call", "struct_statement_length", "struct_statement_define_array", 
		"struct_statement_define_array_indirect", "struct_statement_output", "property_group", 
		"property_statement", "term_replacement_length", "term_replacement_a", 
		"term_replacement_i", "term_replacement_p", "term_replacement_u", "expr", 
		"op_mul_div", "op_add_sub", "un_op", "bool_op", "struct_size", "term"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$call'", "'$setlength'", "'->'", "','", "'$output'", "'$length'", 
		"'$a'", "'$i'", "'$p'", "'$parent'", "'$u'", "'$unique'", "'('", "')'", 
		"'`'", "'end:'", "'length:'", "'.'", null, null, "'{'", "'}'", "'['", 
		"']'", "';'", null, null, "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", 
		"'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'?'", "'&&'", "'||'", "'=='", 
		"'!='", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "COMMENT", "COMENT_BLOCK", "OPEN", 
		"CLOSE", "OPENSQ", "CLOSESQ", "ENDL", "IDENTIFIER", "WS", "PLUS", "MINUS", 
		"STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", 
		"ASSIGNMENT", "LT", "GT", "INTERR", "OP_AND", "OP_OR", "OP_EQ", "OP_NE", 
		"OP_LE", "OP_GE", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", "REAL_LITERAL", 
		"CHARACTER_LITERAL", "REGULAR_STRING", "VERBATIM_STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Linear.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LinearParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LinearParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LinearParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(LinearParser.Eof, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Body_elementContext[] body_element() {
			return GetRuleContexts<Body_elementContext>();
		}
		public Body_elementContext body_element(int i) {
			return GetRuleContext<Body_elementContext>(i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 48; Match(WS);
				}
			}

			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMENT) | (1L << COMENT_BLOCK) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 51; body_element();
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 52; Match(WS);
					}
				}

				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 60; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Body_elementContext : ParserRuleContext {
		public StructContext @struct() {
			return GetRuleContext<StructContext>(0);
		}
		public ITerminalNode COMMENT() { return GetToken(LinearParser.COMMENT, 0); }
		public ITerminalNode COMENT_BLOCK() { return GetToken(LinearParser.COMENT_BLOCK, 0); }
		public Body_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterBody_element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitBody_element(this);
		}
	}

	[RuleVersion(0)]
	public Body_elementContext body_element() {
		Body_elementContext _localctx = new Body_elementContext(Context, State);
		EnterRule(_localctx, 2, RULE_body_element);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62; @struct();
				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63; Match(COMMENT);
				}
				break;
			case COMENT_BLOCK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 64; Match(COMENT_BLOCK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ITerminalNode OPEN() { return GetToken(LinearParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(LinearParser.CLOSE, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Struct_sizeContext struct_size() {
			return GetRuleContext<Struct_sizeContext>(0);
		}
		public Struct_statementContext[] struct_statement() {
			return GetRuleContexts<Struct_statementContext>();
		}
		public Struct_statementContext struct_statement(int i) {
			return GetRuleContext<Struct_statementContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 4, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(IDENTIFIER);
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 68; Match(WS);
				}
				break;
			}
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTEGER_LITERAL || _la==HEX_INTEGER_LITERAL) {
				{
				State = 71; struct_size();
				}
			}

			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 74; Match(WS);
				}
			}

			State = 77; Match(OPEN);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 78; Match(WS);
				}
			}

			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__4) | (1L << COMMENT) | (1L << COMENT_BLOCK) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 81; struct_statement();
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 82; Match(WS);
					}
				}

				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 90; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statementContext : ParserRuleContext {
		public Struct_statement_defineContext struct_statement_define() {
			return GetRuleContext<Struct_statement_defineContext>(0);
		}
		public Struct_statement_callContext struct_statement_call() {
			return GetRuleContext<Struct_statement_callContext>(0);
		}
		public Struct_statement_lengthContext struct_statement_length() {
			return GetRuleContext<Struct_statement_lengthContext>(0);
		}
		public Struct_statement_define_arrayContext struct_statement_define_array() {
			return GetRuleContext<Struct_statement_define_arrayContext>(0);
		}
		public Struct_statement_define_array_indirectContext struct_statement_define_array_indirect() {
			return GetRuleContext<Struct_statement_define_array_indirectContext>(0);
		}
		public Struct_statement_outputContext struct_statement_output() {
			return GetRuleContext<Struct_statement_outputContext>(0);
		}
		public ITerminalNode COMMENT() { return GetToken(LinearParser.COMMENT, 0); }
		public ITerminalNode COMENT_BLOCK() { return GetToken(LinearParser.COMENT_BLOCK, 0); }
		public Struct_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statementContext struct_statement() {
		Struct_statementContext _localctx = new Struct_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_struct_statement);
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92; struct_statement_define();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 93; struct_statement_call();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 94; struct_statement_length();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 95; struct_statement_define_array();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 96; struct_statement_define_array_indirect();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 97; struct_statement_output();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 98; Match(COMMENT);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 99; Match(COMENT_BLOCK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_defineContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Struct_statement_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_defineContext struct_statement_define() {
		Struct_statement_defineContext _localctx = new Struct_statement_defineContext(Context, State);
		EnterRule(_localctx, 8, RULE_struct_statement_define);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(IDENTIFIER);
			State = 103; Match(WS);
			State = 104; Match(IDENTIFIER);
			State = 105; Match(WS);
			State = 106; expr(0);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 107; Match(WS);
				}
			}

			State = 110; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_callContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Struct_statement_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_call(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_callContext struct_statement_call() {
		Struct_statement_callContext _localctx = new Struct_statement_callContext(Context, State);
		EnterRule(_localctx, 10, RULE_struct_statement_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(T__0);
			State = 113; Match(WS);
			State = 114; expr(0);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 115; Match(WS);
				}
			}

			State = 118; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_lengthContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Struct_statement_lengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_length; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_length(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_length(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_lengthContext struct_statement_length() {
		Struct_statement_lengthContext _localctx = new Struct_statement_lengthContext(Context, State);
		EnterRule(_localctx, 12, RULE_struct_statement_length);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(T__1);
			State = 121; Match(WS);
			State = 122; expr(0);
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 123; Match(WS);
				}
			}

			State = 126; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_arrayContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_define_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_array(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_array(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_arrayContext struct_statement_define_array() {
		Struct_statement_define_arrayContext _localctx = new Struct_statement_define_arrayContext(Context, State);
		EnterRule(_localctx, 14, RULE_struct_statement_define_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(IDENTIFIER);
			State = 129; Match(OPENSQ);
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 130; Match(WS);
				}
			}

			State = 133; expr(0);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 134; Match(WS);
				}
			}

			State = 137; Match(CLOSESQ);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 138; Match(WS);
				}
			}

			State = 141; Match(IDENTIFIER);
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 142; Match(WS);
				}
			}

			State = 145; expr(0);
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 146; Match(WS);
				}
			}

			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 149; property_group();
				}
			}

			State = 152; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_array_indirectContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		public ITerminalNode[] OPENSQ() { return GetTokens(LinearParser.OPENSQ); }
		public ITerminalNode OPENSQ(int i) {
			return GetToken(LinearParser.OPENSQ, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] CLOSESQ() { return GetTokens(LinearParser.CLOSESQ); }
		public ITerminalNode CLOSESQ(int i) {
			return GetToken(LinearParser.CLOSESQ, i);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_define_array_indirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_array_indirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_array_indirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_array_indirect(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_array_indirectContext struct_statement_define_array_indirect() {
		Struct_statement_define_array_indirectContext _localctx = new Struct_statement_define_array_indirectContext(Context, State);
		EnterRule(_localctx, 16, RULE_struct_statement_define_array_indirect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(IDENTIFIER);
			State = 155; Match(OPENSQ);
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 156; Match(WS);
				}
			}

			State = 159; expr(0);
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 160; Match(WS);
				}
			}

			State = 163; Match(CLOSESQ);
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 164; Match(WS);
				}
			}

			State = 167; Match(T__2);
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS) {
				{
				State = 168; Match(PLUS);
				}
			}

			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 171; Match(WS);
				}
			}

			State = 174; Match(IDENTIFIER);
			State = 175; Match(OPENSQ);
			State = 176; Match(CLOSESQ);
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 177; Match(WS);
				}
			}

			State = 180; Match(IDENTIFIER);
			State = 181; Match(WS);
			State = 182; expr(0);
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 183; Match(WS);
				}
			}

			State = 186; Match(T__3);
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 187; Match(WS);
				}
			}

			State = 190; expr(0);
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 191; Match(WS);
				}
			}

			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 194; property_group();
				}
			}

			State = 197; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_outputContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_outputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_output; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_output(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_output(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_outputContext struct_statement_output() {
		Struct_statement_outputContext _localctx = new Struct_statement_outputContext(Context, State);
		EnterRule(_localctx, 18, RULE_struct_statement_output);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(T__4);
			State = 200; Match(WS);
			State = 201; Match(IDENTIFIER);
			State = 202; Match(WS);
			State = 203; expr(0);
			State = 204; Match(WS);
			State = 205; expr(0);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 206; Match(WS);
				}
			}

			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 209; property_group();
				}
			}

			State = 212; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_groupContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(LinearParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(LinearParser.CLOSE, 0); }
		public Property_statementContext[] property_statement() {
			return GetRuleContexts<Property_statementContext>();
		}
		public Property_statementContext property_statement(int i) {
			return GetRuleContext<Property_statementContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Property_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterProperty_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitProperty_group(this);
		}
	}

	[RuleVersion(0)]
	public Property_groupContext property_group() {
		Property_groupContext _localctx = new Property_groupContext(Context, State);
		EnterRule(_localctx, 20, RULE_property_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(OPEN);
			State = 221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 216;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 215; Match(WS);
						}
					}

					State = 218; property_statement();
					}
					} 
				}
				State = 223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 224; Match(WS);
				}
			}

			State = 227; Match(CLOSE);
			State = 229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 228; Match(WS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_statementContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(LinearParser.ASSIGNMENT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Property_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterProperty_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitProperty_statement(this);
		}
	}

	[RuleVersion(0)]
	public Property_statementContext property_statement() {
		Property_statementContext _localctx = new Property_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_property_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(IDENTIFIER);
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 232; Match(WS);
				}
			}

			State = 235; Match(ASSIGNMENT);
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 236; Match(WS);
				}
			}

			State = 239; expr(0);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 240; Match(WS);
				}
			}

			State = 243; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_lengthContext : ParserRuleContext {
		public Term_replacement_lengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_length; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_length(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_length(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_lengthContext term_replacement_length() {
		Term_replacement_lengthContext _localctx = new Term_replacement_lengthContext(Context, State);
		EnterRule(_localctx, 24, RULE_term_replacement_length);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_aContext : ParserRuleContext {
		public Term_replacement_aContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_a; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_a(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_a(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_aContext term_replacement_a() {
		Term_replacement_aContext _localctx = new Term_replacement_aContext(Context, State);
		EnterRule(_localctx, 26, RULE_term_replacement_a);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_iContext : ParserRuleContext {
		public Term_replacement_iContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_i; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_i(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_i(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_iContext term_replacement_i() {
		Term_replacement_iContext _localctx = new Term_replacement_iContext(Context, State);
		EnterRule(_localctx, 28, RULE_term_replacement_i);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_pContext : ParserRuleContext {
		public Term_replacement_pContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_p; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_p(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_p(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_pContext term_replacement_p() {
		Term_replacement_pContext _localctx = new Term_replacement_pContext(Context, State);
		EnterRule(_localctx, 30, RULE_term_replacement_p);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_uContext : ParserRuleContext {
		public Term_replacement_uContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_u; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_u(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_u(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_uContext term_replacement_u() {
		Term_replacement_uContext _localctx = new Term_replacement_uContext(Context, State);
		EnterRule(_localctx, 32, RULE_term_replacement_u);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__11) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprMethodCallContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprMethodCallContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprMethodCall(this);
		}
	}
	public partial class ExprOpAmpContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AMP() { return GetToken(LinearParser.AMP, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpAmpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpAmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpAmp(this);
		}
	}
	public partial class ExprOpBitwiseOrContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode BITWISE_OR() { return GetToken(LinearParser.BITWISE_OR, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpBitwiseOrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpBitwiseOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpBitwiseOr(this);
		}
	}
	public partial class ExprUnboundDeserializeContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode WS() { return GetToken(LinearParser.WS, 0); }
		public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public ExprUnboundDeserializeContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprUnboundDeserialize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprUnboundDeserialize(this);
		}
	}
	public partial class ExprUnOpContext : ExprContext {
		public Un_opContext un_op() {
			return GetRuleContext<Un_opContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode WS() { return GetToken(LinearParser.WS, 0); }
		public ExprUnOpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprUnOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprUnOp(this);
		}
	}
	public partial class ExprTermContext : ExprContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ExprTermContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprTerm(this);
		}
	}
	public partial class ExprRangeLengthContext : ExprContext {
		public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprRangeLengthContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprRangeLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprRangeLength(this);
		}
	}
	public partial class ExprWrappedContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprWrappedContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprWrapped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprWrapped(this);
		}
	}
	public partial class ExprOpMulDivContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Op_mul_divContext op_mul_div() {
			return GetRuleContext<Op_mul_divContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpMulDivContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpMulDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpMulDiv(this);
		}
	}
	public partial class ExprRangeEndContext : ExprContext {
		public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprRangeEndContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprRangeEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprRangeEnd(this);
		}
	}
	public partial class ExprArrayAccessContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprArrayAccessContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprArrayAccess(this);
		}
	}
	public partial class ExprOpAddSubContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Op_add_subContext op_add_sub() {
			return GetRuleContext<Op_add_subContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpAddSubContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpAddSub(this);
		}
	}
	public partial class ExprDeserializeContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode WS() { return GetToken(LinearParser.WS, 0); }
		public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public ExprDeserializeContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprDeserialize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprDeserialize(this);
		}
	}
	public partial class ExprOpCaretContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CARET() { return GetToken(LinearParser.CARET, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpCaretContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpCaret(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpCaret(this);
		}
	}
	public partial class ExprMemberContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ExprMemberContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprMember(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				_localctx = new ExprMethodCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 256; Match(IDENTIFIER);
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 257; Match(WS);
					}
				}

				State = 260; Match(T__12);
				State = 262;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
				case 1:
					{
					State = 261; Match(WS);
					}
					break;
				}
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__14) | (1L << OPENSQ) | (1L << IDENTIFIER) | (1L << PLUS) | (1L << MINUS) | (1L << BANG) | (1L << TILDE) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << VERBATIM_STRING))) != 0)) {
					{
					State = 264; expr(0);
					}
				}

				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 267; Match(WS);
					}
				}

				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 270; Match(T__3);
					State = 272;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 271; Match(WS);
						}
					}

					State = 274; expr(0);
					State = 276;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 275; Match(WS);
						}
					}

					}
					}
					State = 282;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 283; Match(T__13);
				}
				break;
			case 2:
				{
				_localctx = new ExprTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 284; term();
				}
				break;
			case 3:
				{
				_localctx = new ExprUnboundDeserializeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 285; Match(T__14);
				State = 286; expr(0);
				State = 288;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 287; Match(WS);
					}
					break;
				}
				State = 291;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 290; property_group();
					}
					break;
				}
				}
				break;
			case 4:
				{
				_localctx = new ExprDeserializeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 293; Match(IDENTIFIER);
				State = 294; Match(T__14);
				State = 295; expr(0);
				State = 297;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 296; Match(WS);
					}
					break;
				}
				State = 300;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 299; property_group();
					}
					break;
				}
				}
				break;
			case 5:
				{
				_localctx = new ExprRangeEndContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 302; Match(OPENSQ);
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 303; Match(WS);
					}
				}

				State = 306; expr(0);
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 307; Match(WS);
					}
				}

				State = 310; Match(T__3);
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 311; Match(WS);
					}
				}

				State = 314; Match(T__15);
				State = 316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 315; Match(WS);
					}
				}

				State = 318; expr(0);
				State = 320;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 319; Match(WS);
					}
				}

				State = 322; Match(CLOSESQ);
				}
				break;
			case 6:
				{
				_localctx = new ExprRangeLengthContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 324; Match(OPENSQ);
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 325; Match(WS);
					}
				}

				State = 328; expr(0);
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 329; Match(WS);
					}
				}

				State = 332; Match(T__3);
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 333; Match(WS);
					}
				}

				State = 336; Match(T__16);
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 337; Match(WS);
					}
				}

				State = 340; expr(0);
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 341; Match(WS);
					}
				}

				State = 344; Match(CLOSESQ);
				}
				break;
			case 7:
				{
				_localctx = new ExprWrappedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 346; Match(T__12);
				State = 348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 347; Match(WS);
					}
				}

				State = 350; expr(0);
				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 351; Match(WS);
					}
				}

				State = 354; Match(T__13);
				}
				break;
			case 8:
				{
				_localctx = new ExprUnOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 356; un_op();
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 357; Match(WS);
					}
				}

				State = 360; expr(6);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 427;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 425;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
					case 1:
						{
						_localctx = new ExprOpMulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 364;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 366;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 365; Match(WS);
							}
						}

						State = 368; op_mul_div();
						State = 370;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 369; Match(WS);
							}
						}

						State = 372; expr(6);
						}
						break;
					case 2:
						{
						_localctx = new ExprOpAddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 374;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 376;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 375; Match(WS);
							}
						}

						State = 378; op_add_sub();
						State = 380;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 379; Match(WS);
							}
						}

						State = 382; expr(5);
						}
						break;
					case 3:
						{
						_localctx = new ExprOpAmpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 384;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 386;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 385; Match(WS);
							}
						}

						State = 388; Match(AMP);
						State = 390;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 389; Match(WS);
							}
						}

						State = 392; expr(4);
						}
						break;
					case 4:
						{
						_localctx = new ExprOpCaretContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 393;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 395;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 394; Match(WS);
							}
						}

						State = 397; Match(CARET);
						State = 399;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 398; Match(WS);
							}
						}

						State = 401; expr(3);
						}
						break;
					case 5:
						{
						_localctx = new ExprOpBitwiseOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 402;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 404;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 403; Match(WS);
							}
						}

						State = 406; Match(BITWISE_OR);
						State = 408;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 407; Match(WS);
							}
						}

						State = 410; expr(2);
						}
						break;
					case 6:
						{
						_localctx = new ExprMemberContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 411;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 412; Match(T__17);
						State = 413; Match(IDENTIFIER);
						}
						break;
					case 7:
						{
						_localctx = new ExprArrayAccessContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 414;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 415; Match(OPENSQ);
						State = 417;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 416; Match(WS);
							}
						}

						State = 419; expr(0);
						State = 421;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 420; Match(WS);
							}
						}

						State = 423; Match(CLOSESQ);
						}
						break;
					}
					} 
				}
				State = 429;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Op_mul_divContext : ParserRuleContext {
		public ITerminalNode STAR() { return GetToken(LinearParser.STAR, 0); }
		public ITerminalNode DIV() { return GetToken(LinearParser.DIV, 0); }
		public ITerminalNode PERCENT() { return GetToken(LinearParser.PERCENT, 0); }
		public Op_mul_divContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_mul_div; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterOp_mul_div(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitOp_mul_div(this);
		}
	}

	[RuleVersion(0)]
	public Op_mul_divContext op_mul_div() {
		Op_mul_divContext _localctx = new Op_mul_divContext(Context, State);
		EnterRule(_localctx, 36, RULE_op_mul_div);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << DIV) | (1L << PERCENT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_add_subContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(LinearParser.MINUS, 0); }
		public Op_add_subContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_add_sub; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterOp_add_sub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitOp_add_sub(this);
		}
	}

	[RuleVersion(0)]
	public Op_add_subContext op_add_sub() {
		Op_add_subContext _localctx = new Op_add_subContext(Context, State);
		EnterRule(_localctx, 38, RULE_op_add_sub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Un_opContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(LinearParser.MINUS, 0); }
		public ITerminalNode BANG() { return GetToken(LinearParser.BANG, 0); }
		public ITerminalNode TILDE() { return GetToken(LinearParser.TILDE, 0); }
		public Un_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_un_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterUn_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitUn_op(this);
		}
	}

	[RuleVersion(0)]
	public Un_opContext un_op() {
		Un_opContext _localctx = new Un_opContext(Context, State);
		EnterRule(_localctx, 40, RULE_un_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << BANG) | (1L << TILDE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_opContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(LinearParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(LinearParser.GT, 0); }
		public ITerminalNode OP_AND() { return GetToken(LinearParser.OP_AND, 0); }
		public ITerminalNode OP_OR() { return GetToken(LinearParser.OP_OR, 0); }
		public ITerminalNode OP_EQ() { return GetToken(LinearParser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(LinearParser.OP_NE, 0); }
		public ITerminalNode OP_LE() { return GetToken(LinearParser.OP_LE, 0); }
		public ITerminalNode OP_GE() { return GetToken(LinearParser.OP_GE, 0); }
		public Bool_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterBool_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitBool_op(this);
		}
	}

	[RuleVersion(0)]
	public Bool_opContext bool_op() {
		Bool_opContext _localctx = new Bool_opContext(Context, State);
		EnterRule(_localctx, 42, RULE_bool_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << GT) | (1L << OP_AND) | (1L << OP_OR) | (1L << OP_EQ) | (1L << OP_NE) | (1L << OP_LE) | (1L << OP_GE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_sizeContext : ParserRuleContext {
		public Struct_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_size; } }
	 
		public Struct_sizeContext() { }
		public virtual void CopyFrom(Struct_sizeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructSizeIntContext : Struct_sizeContext {
		public ITerminalNode INTEGER_LITERAL() { return GetToken(LinearParser.INTEGER_LITERAL, 0); }
		public StructSizeIntContext(Struct_sizeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStructSizeInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStructSizeInt(this);
		}
	}
	public partial class StrictSizeHexContext : Struct_sizeContext {
		public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(LinearParser.HEX_INTEGER_LITERAL, 0); }
		public StrictSizeHexContext(Struct_sizeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStrictSizeHex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStrictSizeHex(this);
		}
	}

	[RuleVersion(0)]
	public Struct_sizeContext struct_size() {
		Struct_sizeContext _localctx = new Struct_sizeContext(Context, State);
		EnterRule(_localctx, 44, RULE_struct_size);
		try {
			State = 440;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				_localctx = new StructSizeIntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 438; Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				_localctx = new StrictSizeHexContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 439; Match(HEX_INTEGER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermHexContext : TermContext {
		public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(LinearParser.HEX_INTEGER_LITERAL, 0); }
		public TermHexContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermHex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermHex(this);
		}
	}
	public partial class TermCharContext : TermContext {
		public ITerminalNode CHARACTER_LITERAL() { return GetToken(LinearParser.CHARACTER_LITERAL, 0); }
		public TermCharContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermChar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermChar(this);
		}
	}
	public partial class TermRepUContext : TermContext {
		public Term_replacement_uContext term_replacement_u() {
			return GetRuleContext<Term_replacement_uContext>(0);
		}
		public TermRepUContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepU(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepU(this);
		}
	}
	public partial class TermRepLengthContext : TermContext {
		public Term_replacement_lengthContext term_replacement_length() {
			return GetRuleContext<Term_replacement_lengthContext>(0);
		}
		public TermRepLengthContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepLength(this);
		}
	}
	public partial class TermRepAContext : TermContext {
		public Term_replacement_aContext term_replacement_a() {
			return GetRuleContext<Term_replacement_aContext>(0);
		}
		public TermRepAContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepA(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepA(this);
		}
	}
	public partial class TermRepPContext : TermContext {
		public Term_replacement_pContext term_replacement_p() {
			return GetRuleContext<Term_replacement_pContext>(0);
		}
		public TermRepPContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepP(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepP(this);
		}
	}
	public partial class TermIdentifierContext : TermContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public TermIdentifierContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermIdentifier(this);
		}
	}
	public partial class TermIntContext : TermContext {
		public ITerminalNode INTEGER_LITERAL() { return GetToken(LinearParser.INTEGER_LITERAL, 0); }
		public TermIntContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermInt(this);
		}
	}
	public partial class TermRealContext : TermContext {
		public ITerminalNode REAL_LITERAL() { return GetToken(LinearParser.REAL_LITERAL, 0); }
		public TermRealContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermReal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermReal(this);
		}
	}
	public partial class TermStringContext : TermContext {
		public ITerminalNode REGULAR_STRING() { return GetToken(LinearParser.REGULAR_STRING, 0); }
		public TermStringContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermString(this);
		}
	}
	public partial class TermStringVerbContext : TermContext {
		public ITerminalNode VERBATIM_STRING() { return GetToken(LinearParser.VERBATIM_STRING, 0); }
		public TermStringVerbContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermStringVerb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermStringVerb(this);
		}
	}
	public partial class TermRepIContext : TermContext {
		public Term_replacement_iContext term_replacement_i() {
			return GetRuleContext<Term_replacement_iContext>(0);
		}
		public TermRepIContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepI(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepI(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 46, RULE_term);
		try {
			State = 454;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				_localctx = new TermRepLengthContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 442; term_replacement_length();
				}
				break;
			case T__6:
				_localctx = new TermRepAContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 443; term_replacement_a();
				}
				break;
			case T__7:
				_localctx = new TermRepIContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 444; term_replacement_i();
				}
				break;
			case T__8:
			case T__9:
				_localctx = new TermRepPContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 445; term_replacement_p();
				}
				break;
			case T__10:
			case T__11:
				_localctx = new TermRepUContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 446; term_replacement_u();
				}
				break;
			case IDENTIFIER:
				_localctx = new TermIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 447; Match(IDENTIFIER);
				}
				break;
			case INTEGER_LITERAL:
				_localctx = new TermIntContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 448; Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				_localctx = new TermHexContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 449; Match(HEX_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				_localctx = new TermRealContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 450; Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				_localctx = new TermCharContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 451; Match(CHARACTER_LITERAL);
				}
				break;
			case REGULAR_STRING:
				_localctx = new TermStringContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 452; Match(REGULAR_STRING);
				}
				break;
			case VERBATIM_STRING:
				_localctx = new TermStringVerbContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 453; Match(VERBATIM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x37', '\x1CB', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x3', '\x2', '\x5', '\x2', '\x34', 
		'\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x38', '\n', '\x2', 
		'\a', '\x2', ':', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '=', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x44', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', 'H', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', 'K', '\n', '\x4', 
		'\x3', '\x4', '\x5', '\x4', 'N', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', 'R', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'V', '\n', '\x4', '\a', '\x4', 'X', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'[', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', 'g', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'o', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', 'w', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x7F', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\x86', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\x8A', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\x8E', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x92', '\n', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x96', '\n', '\t', '\x3', 
		'\t', '\x5', '\t', '\x99', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xA0', '\n', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\xA4', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '\xA8', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '\xAC', '\n', '\n', '\x3', '\n', '\x5', '\n', '\xAF', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xB5', 
		'\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '\xBB', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xBF', 
		'\n', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xC3', '\n', '\n', 
		'\x3', '\n', '\x5', '\n', '\xC6', '\n', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xD2', '\n', '\v', '\x3', 
		'\v', '\x5', '\v', '\xD5', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\xDB', '\n', '\f', '\x3', '\f', '\a', 
		'\f', '\xDE', '\n', '\f', '\f', '\f', '\xE', '\f', '\xE1', '\v', '\f', 
		'\x3', '\f', '\x5', '\f', '\xE4', '\n', '\f', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', '\xE8', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\xEC', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xF0', '\n', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xF4', '\n', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x105', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x109', 
		'\n', '\x13', '\x3', '\x13', '\x5', '\x13', '\x10C', '\n', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x10F', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x113', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x117', '\n', '\x13', '\a', '\x13', '\x119', '\n', '\x13', '\f', 
		'\x13', '\xE', '\x13', '\x11C', '\v', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x123', '\n', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x126', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x12C', '\n', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x12F', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x133', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x137', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x13B', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x13F', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x143', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x149', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x14D', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x151', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x155', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x159', 
		'\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x15F', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x163', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x169', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x16D', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x171', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x175', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x17B', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x17F', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x185', '\n', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x189', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x18E', '\n', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x192', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x197', '\n', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x19B', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x1A4', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x1A8', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\a', '\x13', '\x1AC', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x1AF', 
		'\v', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x1BB', '\n', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\x1C9', '\n', '\x19', '\x3', '\x19', '\x2', '\x3', 
		'$', '\x1A', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x2', '\b', '\x3', '\x2', '\v', '\f', '\x3', '\x2', 
		'\r', '\xE', '\x3', '\x2', ' ', '\"', '\x3', '\x2', '\x1E', '\x1F', '\x4', 
		'\x2', '\x1E', '\x1F', '&', '\'', '\x4', '\x2', ')', '*', ',', '\x31', 
		'\x2', '\x21E', '\x2', '\x33', '\x3', '\x2', '\x2', '\x2', '\x4', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x66', '\x3', '\x2', '\x2', '\x2', '\n', 'h', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'r', '\x3', '\x2', '\x2', '\x2', '\xE', 'z', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x82', '\x3', '\x2', '\x2', '\x2', '\x12', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xD8', '\x3', '\x2', '\x2', '\x2', '\x18', '\xE9', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xFD', '\x3', '\x2', '\x2', '\x2', '\"', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x16C', '\x3', '\x2', '\x2', '\x2', '&', '\x1B0', '\x3', 
		'\x2', '\x2', '\x2', '(', '\x1B2', '\x3', '\x2', '\x2', '\x2', '*', '\x1B4', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x1B6', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x30', '\x1C8', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x34', '\a', '\x1D', '\x2', '\x2', '\x33', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x34', ';', '\x3', '\x2', '\x2', '\x2', '\x35', '\x37', '\x5', '\x4', 
		'\x3', '\x2', '\x36', '\x38', '\a', '\x1D', '\x2', '\x2', '\x37', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x38', ':', '\x3', '\x2', '\x2', '\x2', '\x39', '\x35', '\x3', '\x2', 
		'\x2', '\x2', ':', '=', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', 
		'\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '>', '\x3', 
		'\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', 
		'\x2', '\x2', '\x3', '?', '\x3', '\x3', '\x2', '\x2', '\x2', '@', '\x44', 
		'\x5', '\x6', '\x4', '\x2', '\x41', '\x44', '\a', '\x15', '\x2', '\x2', 
		'\x42', '\x44', '\a', '\x16', '\x2', '\x2', '\x43', '@', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x45', 'G', '\a', '\x1C', '\x2', '\x2', '\x46', 'H', '\a', '\x1D', '\x2', 
		'\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'J', '\x3', '\x2', '\x2', '\x2', 'I', 'K', '\x5', '.', 
		'\x18', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'M', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\a', 
		'\x1D', '\x2', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 'M', 'N', 
		'\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 
		'Q', '\a', '\x17', '\x2', '\x2', 'P', 'R', '\a', '\x1D', '\x2', '\x2', 
		'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', 'Y', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\x5', '\b', '\x5', '\x2', 
		'T', 'V', '\a', '\x1D', '\x2', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 
		'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'X', '\x3', '\x2', '\x2', '\x2', 
		'W', 'S', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\\', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\a', '\x18', '\x2', '\x2', ']', '\a', '\x3', '\x2', 
		'\x2', '\x2', '^', 'g', '\x5', '\n', '\x6', '\x2', '_', 'g', '\x5', '\f', 
		'\a', '\x2', '`', 'g', '\x5', '\xE', '\b', '\x2', '\x61', 'g', '\x5', 
		'\x10', '\t', '\x2', '\x62', 'g', '\x5', '\x12', '\n', '\x2', '\x63', 
		'g', '\x5', '\x14', '\v', '\x2', '\x64', 'g', '\a', '\x15', '\x2', '\x2', 
		'\x65', 'g', '\a', '\x16', '\x2', '\x2', '\x66', '^', '\x3', '\x2', '\x2', 
		'\x2', '\x66', '_', '\x3', '\x2', '\x2', '\x2', '\x66', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x61', '\x3', '\x2', '\x2', '\x2', '\x66', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', '\x65', '\x3', '\x2', 
		'\x2', '\x2', 'g', '\t', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '\x1C', 
		'\x2', '\x2', 'i', 'j', '\a', '\x1D', '\x2', '\x2', 'j', 'k', '\a', '\x1C', 
		'\x2', '\x2', 'k', 'l', '\a', '\x1D', '\x2', '\x2', 'l', 'n', '\x5', '$', 
		'\x13', '\x2', 'm', 'o', '\a', '\x1D', '\x2', '\x2', 'n', 'm', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'q', '\a', '\x1B', '\x2', '\x2', 'q', '\v', 
		'\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '\x3', '\x2', '\x2', 's', 
		't', '\a', '\x1D', '\x2', '\x2', 't', 'v', '\x5', '$', '\x13', '\x2', 
		'u', 'w', '\a', '\x1D', '\x2', '\x2', 'v', 'u', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\a', '\x1B', '\x2', '\x2', 'y', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\a', '\x4', '\x2', '\x2', '{', '|', '\a', '\x1D', '\x2', 
		'\x2', '|', '~', '\x5', '$', '\x13', '\x2', '}', '\x7F', '\a', '\x1D', 
		'\x2', '\x2', '~', '}', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x81', '\a', '\x1B', '\x2', '\x2', '\x81', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\a', '\x1C', '\x2', '\x2', '\x83', '\x85', '\a', 
		'\x19', '\x2', '\x2', '\x84', '\x86', '\a', '\x1D', '\x2', '\x2', '\x85', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x89', '\x5', 
		'$', '\x13', '\x2', '\x88', '\x8A', '\a', '\x1D', '\x2', '\x2', '\x89', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8D', '\a', 
		'\x1A', '\x2', '\x2', '\x8C', '\x8E', '\a', '\x1D', '\x2', '\x2', '\x8D', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x91', '\a', 
		'\x1C', '\x2', '\x2', '\x90', '\x92', '\a', '\x1D', '\x2', '\x2', '\x91', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\x3', '\x2', '\x2', '\x2', '\x93', '\x95', '\x5', 
		'$', '\x13', '\x2', '\x94', '\x96', '\a', '\x1D', '\x2', '\x2', '\x95', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x98', '\x3', '\x2', '\x2', '\x2', '\x97', '\x99', '\x5', 
		'\x16', '\f', '\x2', '\x98', '\x97', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9B', '\a', '\x1B', '\x2', '\x2', '\x9B', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9D', '\a', '\x1C', '\x2', '\x2', '\x9D', 
		'\x9F', '\a', '\x19', '\x2', '\x2', '\x9E', '\xA0', '\a', '\x1D', '\x2', 
		'\x2', '\x9F', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\xA3', '\x5', '$', '\x13', '\x2', '\xA2', '\xA4', '\a', '\x1D', '\x2', 
		'\x2', '\xA3', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA7', '\a', '\x1A', '\x2', '\x2', '\xA6', '\xA8', '\a', '\x1D', '\x2', 
		'\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAB', '\a', '\x5', '\x2', '\x2', '\xAA', '\xAC', '\a', '\x1E', '\x2', 
		'\x2', '\xAB', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAF', '\a', '\x1D', '\x2', '\x2', '\xAE', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x1C', '\x2', '\x2', '\xB1', 
		'\xB2', '\a', '\x19', '\x2', '\x2', '\xB2', '\xB4', '\a', '\x1A', '\x2', 
		'\x2', '\xB3', '\xB5', '\a', '\x1D', '\x2', '\x2', '\xB4', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', '\x1C', '\x2', 
		'\x2', '\xB7', '\xB8', '\a', '\x1D', '\x2', '\x2', '\xB8', '\xBA', '\x5', 
		'$', '\x13', '\x2', '\xB9', '\xBB', '\a', '\x1D', '\x2', '\x2', '\xBA', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBE', '\a', 
		'\x6', '\x2', '\x2', '\xBD', '\xBF', '\a', '\x1D', '\x2', '\x2', '\xBE', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC2', '\x5', 
		'$', '\x13', '\x2', '\xC1', '\xC3', '\a', '\x1D', '\x2', '\x2', '\xC2', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC6', '\x5', 
		'\x16', '\f', '\x2', '\xC5', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC8', '\a', '\x1B', '\x2', '\x2', '\xC8', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', '\a', '\x2', '\x2', '\xCA', 
		'\xCB', '\a', '\x1D', '\x2', '\x2', '\xCB', '\xCC', '\a', '\x1C', '\x2', 
		'\x2', '\xCC', '\xCD', '\a', '\x1D', '\x2', '\x2', '\xCD', '\xCE', '\x5', 
		'$', '\x13', '\x2', '\xCE', '\xCF', '\a', '\x1D', '\x2', '\x2', '\xCF', 
		'\xD1', '\x5', '$', '\x13', '\x2', '\xD0', '\xD2', '\a', '\x1D', '\x2', 
		'\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD5', '\x5', '\x16', '\f', '\x2', '\xD4', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD7', '\a', '\x1B', '\x2', '\x2', '\xD7', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDF', '\a', '\x17', '\x2', 
		'\x2', '\xD9', '\xDB', '\a', '\x1D', '\x2', '\x2', '\xDA', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDE', '\x5', '\x18', '\r', 
		'\x2', '\xDD', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE4', '\a', 
		'\x1D', '\x2', '\x2', '\xE3', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE7', '\a', '\x18', '\x2', '\x2', '\xE6', '\xE8', '\a', 
		'\x1D', '\x2', '\x2', '\xE7', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xEB', '\a', '\x1C', '\x2', '\x2', '\xEA', '\xEC', '\a', 
		'\x1D', '\x2', '\x2', '\xEB', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xEF', '\a', '(', '\x2', '\x2', '\xEE', '\xF0', '\a', 
		'\x1D', '\x2', '\x2', '\xEF', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xF3', '\x5', '$', '\x13', '\x2', '\xF2', '\xF4', '\a', 
		'\x1D', '\x2', '\x2', '\xF3', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\xF6', '\a', '\x1B', '\x2', '\x2', '\xF6', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF8', '\a', '\b', '\x2', '\x2', '\xF8', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\a', '\t', '\x2', 
		'\x2', '\xFA', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\a', 
		'\n', '\x2', '\x2', '\xFC', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFE', '\t', '\x2', '\x2', '\x2', '\xFE', '!', '\x3', '\x2', '\x2', '\x2', 
		'\xFF', '\x100', '\t', '\x3', '\x2', '\x2', '\x100', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x101', '\x102', '\b', '\x13', '\x1', '\x2', '\x102', '\x104', 
		'\a', '\x1C', '\x2', '\x2', '\x103', '\x105', '\a', '\x1D', '\x2', '\x2', 
		'\x104', '\x103', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x106', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x108', '\a', '\xF', '\x2', '\x2', '\x107', '\x109', '\a', '\x1D', '\x2', 
		'\x2', '\x108', '\x107', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x10C', '\x5', '$', '\x13', '\x2', '\x10B', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10E', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10F', '\a', '\x1D', '\x2', 
		'\x2', '\x10E', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x112', '\a', '\x6', '\x2', '\x2', '\x111', '\x113', '\a', '\x1D', 
		'\x2', '\x2', '\x112', '\x111', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x116', '\x5', '$', '\x13', '\x2', '\x115', '\x117', '\a', '\x1D', 
		'\x2', '\x2', '\x116', '\x115', '\x3', '\x2', '\x2', '\x2', '\x116', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x117', '\x119', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\x110', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x11A', '\x118', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x16D', 
		'\a', '\x10', '\x2', '\x2', '\x11E', '\x16D', '\x5', '\x30', '\x19', '\x2', 
		'\x11F', '\x120', '\a', '\x11', '\x2', '\x2', '\x120', '\x122', '\x5', 
		'$', '\x13', '\x2', '\x121', '\x123', '\a', '\x1D', '\x2', '\x2', '\x122', 
		'\x121', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x125', '\x3', '\x2', '\x2', '\x2', '\x124', '\x126', 
		'\x5', '\x16', '\f', '\x2', '\x125', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x126', '\x3', '\x2', '\x2', '\x2', '\x126', '\x16D', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x128', '\a', '\x1C', '\x2', '\x2', '\x128', 
		'\x129', '\a', '\x11', '\x2', '\x2', '\x129', '\x12B', '\x5', '$', '\x13', 
		'\x2', '\x12A', '\x12C', '\a', '\x1D', '\x2', '\x2', '\x12B', '\x12A', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12F', '\x5', 
		'\x16', '\f', '\x2', '\x12E', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12E', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x16D', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x132', '\a', '\x19', '\x2', '\x2', '\x131', '\x133', 
		'\a', '\x1D', '\x2', '\x2', '\x132', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x133', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x136', '\x5', '$', '\x13', '\x2', '\x135', 
		'\x137', '\a', '\x1D', '\x2', '\x2', '\x136', '\x135', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '\x137', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x13A', '\a', '\x6', '\x2', '\x2', 
		'\x139', '\x13B', '\a', '\x1D', '\x2', '\x2', '\x13A', '\x139', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13B', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13E', '\a', '\x12', '\x2', 
		'\x2', '\x13D', '\x13F', '\a', '\x1D', '\x2', '\x2', '\x13E', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x13F', '\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '\x142', '\x5', 
		'$', '\x13', '\x2', '\x141', '\x143', '\a', '\x1D', '\x2', '\x2', '\x142', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x142', '\x143', '\x3', '\x2', '\x2', 
		'\x2', '\x143', '\x144', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', 
		'\a', '\x1A', '\x2', '\x2', '\x145', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x148', '\a', '\x19', '\x2', '\x2', '\x147', '\x149', '\a', 
		'\x1D', '\x2', '\x2', '\x148', '\x147', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x14C', '\x5', '$', '\x13', '\x2', '\x14B', '\x14D', 
		'\a', '\x1D', '\x2', '\x2', '\x14C', '\x14B', '\x3', '\x2', '\x2', '\x2', 
		'\x14C', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\x3', 
		'\x2', '\x2', '\x2', '\x14E', '\x150', '\a', '\x6', '\x2', '\x2', '\x14F', 
		'\x151', '\a', '\x1D', '\x2', '\x2', '\x150', '\x14F', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x151', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\x154', '\a', '\x13', '\x2', '\x2', 
		'\x153', '\x155', '\a', '\x1D', '\x2', '\x2', '\x154', '\x153', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\x155', '\x3', '\x2', '\x2', '\x2', '\x155', 
		'\x156', '\x3', '\x2', '\x2', '\x2', '\x156', '\x158', '\x5', '$', '\x13', 
		'\x2', '\x157', '\x159', '\a', '\x1D', '\x2', '\x2', '\x158', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\x159', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\a', 
		'\x1A', '\x2', '\x2', '\x15B', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x15C', 
		'\x15E', '\a', '\xF', '\x2', '\x2', '\x15D', '\x15F', '\a', '\x1D', '\x2', 
		'\x2', '\x15E', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', 
		'\x3', '\x2', '\x2', '\x2', '\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', 
		'\x160', '\x162', '\x5', '$', '\x13', '\x2', '\x161', '\x163', '\a', '\x1D', 
		'\x2', '\x2', '\x162', '\x161', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x165', '\a', '\x10', '\x2', '\x2', '\x165', '\x16D', '\x3', 
		'\x2', '\x2', '\x2', '\x166', '\x168', '\x5', '*', '\x16', '\x2', '\x167', 
		'\x169', '\a', '\x1D', '\x2', '\x2', '\x168', '\x167', '\x3', '\x2', '\x2', 
		'\x2', '\x168', '\x169', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', '\x16A', '\x16B', '\x5', '$', '\x13', '\b', 
		'\x16B', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x16C', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x16C', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x127', '\x3', '\x2', '\x2', 
		'\x2', '\x16C', '\x130', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x146', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x15C', '\x3', '\x2', '\x2', '\x2', 
		'\x16C', '\x166', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x1AD', '\x3', 
		'\x2', '\x2', '\x2', '\x16E', '\x170', '\f', '\a', '\x2', '\x2', '\x16F', 
		'\x171', '\a', '\x1D', '\x2', '\x2', '\x170', '\x16F', '\x3', '\x2', '\x2', 
		'\x2', '\x170', '\x171', '\x3', '\x2', '\x2', '\x2', '\x171', '\x172', 
		'\x3', '\x2', '\x2', '\x2', '\x172', '\x174', '\x5', '&', '\x14', '\x2', 
		'\x173', '\x175', '\a', '\x1D', '\x2', '\x2', '\x174', '\x173', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x175', '\x3', '\x2', '\x2', '\x2', '\x175', 
		'\x176', '\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\x5', '$', '\x13', 
		'\b', '\x177', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x178', '\x17A', 
		'\f', '\x6', '\x2', '\x2', '\x179', '\x17B', '\a', '\x1D', '\x2', '\x2', 
		'\x17A', '\x179', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17B', '\x3', 
		'\x2', '\x2', '\x2', '\x17B', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x17E', '\x5', '(', '\x15', '\x2', '\x17D', '\x17F', '\a', '\x1D', '\x2', 
		'\x2', '\x17E', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\x3', '\x2', '\x2', '\x2', 
		'\x180', '\x181', '\x5', '$', '\x13', '\a', '\x181', '\x1AC', '\x3', '\x2', 
		'\x2', '\x2', '\x182', '\x184', '\f', '\x5', '\x2', '\x2', '\x183', '\x185', 
		'\a', '\x1D', '\x2', '\x2', '\x184', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x185', '\x3', '\x2', '\x2', '\x2', '\x185', '\x186', '\x3', 
		'\x2', '\x2', '\x2', '\x186', '\x188', '\a', '#', '\x2', '\x2', '\x187', 
		'\x189', '\a', '\x1D', '\x2', '\x2', '\x188', '\x187', '\x3', '\x2', '\x2', 
		'\x2', '\x188', '\x189', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', 
		'\x3', '\x2', '\x2', '\x2', '\x18A', '\x1AC', '\x5', '$', '\x13', '\x6', 
		'\x18B', '\x18D', '\f', '\x4', '\x2', '\x2', '\x18C', '\x18E', '\a', '\x1D', 
		'\x2', '\x2', '\x18D', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', 
		'\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', '\x191', '\a', '%', '\x2', '\x2', '\x190', '\x192', '\a', '\x1D', 
		'\x2', '\x2', '\x191', '\x190', '\x3', '\x2', '\x2', '\x2', '\x191', '\x192', 
		'\x3', '\x2', '\x2', '\x2', '\x192', '\x193', '\x3', '\x2', '\x2', '\x2', 
		'\x193', '\x1AC', '\x5', '$', '\x13', '\x5', '\x194', '\x196', '\f', '\x3', 
		'\x2', '\x2', '\x195', '\x197', '\a', '\x1D', '\x2', '\x2', '\x196', '\x195', 
		'\x3', '\x2', '\x2', '\x2', '\x196', '\x197', '\x3', '\x2', '\x2', '\x2', 
		'\x197', '\x198', '\x3', '\x2', '\x2', '\x2', '\x198', '\x19A', '\a', 
		'$', '\x2', '\x2', '\x199', '\x19B', '\a', '\x1D', '\x2', '\x2', '\x19A', 
		'\x199', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', '\x3', '\x2', '\x2', 
		'\x2', '\x19B', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x1AC', 
		'\x5', '$', '\x13', '\x4', '\x19D', '\x19E', '\f', '\v', '\x2', '\x2', 
		'\x19E', '\x19F', '\a', '\x14', '\x2', '\x2', '\x19F', '\x1AC', '\a', 
		'\x1C', '\x2', '\x2', '\x1A0', '\x1A1', '\f', '\n', '\x2', '\x2', '\x1A1', 
		'\x1A3', '\a', '\x19', '\x2', '\x2', '\x1A2', '\x1A4', '\a', '\x1D', '\x2', 
		'\x2', '\x1A3', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', 
		'\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A5', '\x3', '\x2', '\x2', '\x2', 
		'\x1A5', '\x1A7', '\x5', '$', '\x13', '\x2', '\x1A6', '\x1A8', '\a', '\x1D', 
		'\x2', '\x2', '\x1A7', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x1AA', '\a', '\x1A', '\x2', '\x2', '\x1AA', '\x1AC', '\x3', 
		'\x2', '\x2', '\x2', '\x1AB', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x1AB', 
		'\x178', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x182', '\x3', '\x2', '\x2', 
		'\x2', '\x1AB', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x194', 
		'\x3', '\x2', '\x2', '\x2', '\x1AB', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x1AB', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AF', '\x3', 
		'\x2', '\x2', '\x2', '\x1AD', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AD', 
		'\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1AE', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x1AF', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', 
		'\t', '\x4', '\x2', '\x2', '\x1B1', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x1B2', '\x1B3', '\t', '\x5', '\x2', '\x2', '\x1B3', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x1B4', '\x1B5', '\t', '\x6', '\x2', '\x2', '\x1B5', '+', 
		'\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', '\t', '\a', '\x2', '\x2', 
		'\x1B7', '-', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1BB', '\a', '\x32', 
		'\x2', '\x2', '\x1B9', '\x1BB', '\a', '\x33', '\x2', '\x2', '\x1BA', '\x1B8', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'\x1BB', '/', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1C9', '\x5', '\x1A', 
		'\xE', '\x2', '\x1BD', '\x1C9', '\x5', '\x1C', '\xF', '\x2', '\x1BE', 
		'\x1C9', '\x5', '\x1E', '\x10', '\x2', '\x1BF', '\x1C9', '\x5', ' ', '\x11', 
		'\x2', '\x1C0', '\x1C9', '\x5', '\"', '\x12', '\x2', '\x1C1', '\x1C9', 
		'\a', '\x1C', '\x2', '\x2', '\x1C2', '\x1C9', '\a', '\x32', '\x2', '\x2', 
		'\x1C3', '\x1C9', '\a', '\x33', '\x2', '\x2', '\x1C4', '\x1C9', '\a', 
		'\x34', '\x2', '\x2', '\x1C5', '\x1C9', '\a', '\x35', '\x2', '\x2', '\x1C6', 
		'\x1C9', '\a', '\x36', '\x2', '\x2', '\x1C7', '\x1C9', '\a', '\x37', '\x2', 
		'\x2', '\x1C8', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1BD', 
		'\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1BE', '\x3', '\x2', '\x2', '\x2', 
		'\x1C8', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C0', '\x3', 
		'\x2', '\x2', '\x2', '\x1C8', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C8', 
		'\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C3', '\x3', '\x2', '\x2', 
		'\x2', '\x1C8', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C5', 
		'\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C6', '\x3', '\x2', '\x2', '\x2', 
		'\x1C8', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x31', '\x3', 
		'\x2', '\x2', '\x2', 'R', '\x33', '\x37', ';', '\x43', 'G', 'J', 'M', 
		'Q', 'U', 'Y', '\x66', 'n', 'v', '~', '\x85', '\x89', '\x8D', '\x91', 
		'\x95', '\x98', '\x9F', '\xA3', '\xA7', '\xAB', '\xAE', '\xB4', '\xBA', 
		'\xBE', '\xC2', '\xC5', '\xD1', '\xD4', '\xDA', '\xDF', '\xE3', '\xE7', 
		'\xEB', '\xEF', '\xF3', '\x104', '\x108', '\x10B', '\x10E', '\x112', '\x116', 
		'\x11A', '\x122', '\x125', '\x12B', '\x12E', '\x132', '\x136', '\x13A', 
		'\x13E', '\x142', '\x148', '\x14C', '\x150', '\x154', '\x158', '\x15E', 
		'\x162', '\x168', '\x16C', '\x170', '\x174', '\x17A', '\x17E', '\x184', 
		'\x188', '\x18D', '\x191', '\x196', '\x19A', '\x1A3', '\x1A7', '\x1AB', 
		'\x1AD', '\x1BA', '\x1C8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
