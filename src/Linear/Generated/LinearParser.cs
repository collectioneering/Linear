//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/Shared/gabura/git/Linear/scripts/../spec/Linear.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class LinearParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, COMMENT=23, COMENT_BLOCK=24, 
		OPEN=25, CLOSE=26, OPENSQ=27, CLOSESQ=28, ENDL=29, IDENTIFIER=30, WS=31, 
		RSHIFT=32, URSHIFT=33, LSHIFT=34, PLUS=35, MINUS=36, STAR=37, DIV=38, 
		PERCENT=39, AMP=40, BITWISE_OR=41, CARET=42, BANG=43, TILDE=44, ASSIGNMENT=45, 
		LT=46, GT=47, INTERR=48, OP_AND=49, OP_OR=50, OP_EQ=51, OP_NE=52, OP_LE=53, 
		OP_GE=54, INTEGER_LITERAL=55, HEX_INTEGER_LITERAL=56, REAL_LITERAL=57, 
		CHARACTER_LITERAL=58, REGULAR_STRING=59, VERBATIM_STRING=60;
	public const int
		RULE_compilation_unit = 0, RULE_body_element = 1, RULE_struct = 2, RULE_struct_statement = 3, 
		RULE_struct_statement_define = 4, RULE_struct_statement_define_lambda = 5, 
		RULE_struct_statement_discard = 6, RULE_struct_statement_call = 7, RULE_struct_statement_length = 8, 
		RULE_struct_statement_define_array = 9, RULE_struct_statement_define_array_indirect = 10, 
		RULE_struct_statement_output = 11, RULE_property_group = 12, RULE_property_statement = 13, 
		RULE_term_replacement_length = 14, RULE_term_replacement_a = 15, RULE_term_replacement_i = 16, 
		RULE_term_replacement_p = 17, RULE_term_replacement_u = 18, RULE_term_literal_true = 19, 
		RULE_term_literal_false = 20, RULE_expr = 21, RULE_un_op = 22, RULE_op_mul_div = 23, 
		RULE_op_add_sub = 24, RULE_op_shift = 25, RULE_op_rel = 26, RULE_op_eq = 27, 
		RULE_op_cond_and = 28, RULE_op_cond_or = 29, RULE_bool_op = 30, RULE_struct_size = 31, 
		RULE_term = 32;
	public static readonly string[] ruleNames = {
		"compilation_unit", "body_element", "struct", "struct_statement", "struct_statement_define", 
		"struct_statement_define_lambda", "struct_statement_discard", "struct_statement_call", 
		"struct_statement_length", "struct_statement_define_array", "struct_statement_define_array_indirect", 
		"struct_statement_output", "property_group", "property_statement", "term_replacement_length", 
		"term_replacement_a", "term_replacement_i", "term_replacement_p", "term_replacement_u", 
		"term_literal_true", "term_literal_false", "expr", "un_op", "op_mul_div", 
		"op_add_sub", "op_shift", "op_rel", "op_eq", "op_cond_and", "op_cond_or", 
		"bool_op", "struct_size", "term"
	};

	private static readonly string[] _LiteralNames = {
		null, "'lambda'", "'$discard'", "'$call'", "'$setlength'", "'->'", "','", 
		"'$output'", "'$length'", "'$a'", "'$i'", "'$p'", "'$parent'", "'$u'", 
		"'$unique'", "'true'", "'false'", "'('", "')'", "'$$'", "'`'", "'..'", 
		"'.'", null, null, "'{'", "'}'", "'['", "']'", "';'", null, null, "'>>'", 
		"'>>>'", "'<<'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", 
		"'!'", "'~'", "'='", "'<'", "'>'", "'?'", "'&&'", "'||'", "'=='", "'!='", 
		"'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "COMMENT", 
		"COMENT_BLOCK", "OPEN", "CLOSE", "OPENSQ", "CLOSESQ", "ENDL", "IDENTIFIER", 
		"WS", "RSHIFT", "URSHIFT", "LSHIFT", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", 
		"AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", "ASSIGNMENT", "LT", "GT", 
		"INTERR", "OP_AND", "OP_OR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "INTEGER_LITERAL", 
		"HEX_INTEGER_LITERAL", "REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", 
		"VERBATIM_STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Linear.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LinearParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LinearParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LinearParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LinearParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Body_elementContext[] body_element() {
			return GetRuleContexts<Body_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Body_elementContext body_element(int i) {
			return GetRuleContext<Body_elementContext>(i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 66;
				Match(WS);
				}
			}

			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1098907648L) != 0) {
				{
				{
				State = 69;
				body_element();
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 70;
					Match(WS);
					}
				}

				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Body_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct() {
			return GetRuleContext<StructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(LinearParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMENT_BLOCK() { return GetToken(LinearParser.COMENT_BLOCK, 0); }
		public Body_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterBody_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitBody_element(this);
		}
	}

	[RuleVersion(0)]
	public Body_elementContext body_element() {
		Body_elementContext _localctx = new Body_elementContext(Context, State);
		EnterRule(_localctx, 2, RULE_body_element);
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				@struct();
				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81;
				Match(COMMENT);
				}
				break;
			case COMENT_BLOCK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 82;
				Match(COMENT_BLOCK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(LinearParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(LinearParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_sizeContext struct_size() {
			return GetRuleContext<Struct_sizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statementContext[] struct_statement() {
			return GetRuleContexts<Struct_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statementContext struct_statement(int i) {
			return GetRuleContext<Struct_statementContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 4, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(IDENTIFIER);
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 86;
				Match(WS);
				}
				break;
			}
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTEGER_LITERAL || _la==HEX_INTEGER_LITERAL) {
				{
				State = 89;
				struct_size();
				}
			}

			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 92;
				Match(WS);
				}
			}

			State = 95;
			Match(OPEN);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 96;
				Match(WS);
				}
			}

			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1098907806L) != 0) {
				{
				{
				State = 99;
				struct_statement();
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 100;
					Match(WS);
					}
				}

				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 108;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_defineContext struct_statement_define() {
			return GetRuleContext<Struct_statement_defineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_define_lambdaContext struct_statement_define_lambda() {
			return GetRuleContext<Struct_statement_define_lambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_discardContext struct_statement_discard() {
			return GetRuleContext<Struct_statement_discardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_callContext struct_statement_call() {
			return GetRuleContext<Struct_statement_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_lengthContext struct_statement_length() {
			return GetRuleContext<Struct_statement_lengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_define_arrayContext struct_statement_define_array() {
			return GetRuleContext<Struct_statement_define_arrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_define_array_indirectContext struct_statement_define_array_indirect() {
			return GetRuleContext<Struct_statement_define_array_indirectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_outputContext struct_statement_output() {
			return GetRuleContext<Struct_statement_outputContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(LinearParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMENT_BLOCK() { return GetToken(LinearParser.COMENT_BLOCK, 0); }
		public Struct_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statementContext struct_statement() {
		Struct_statementContext _localctx = new Struct_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_struct_statement);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110;
				struct_statement_define();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111;
				struct_statement_define_lambda();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 112;
				struct_statement_discard();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 113;
				struct_statement_call();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 114;
				struct_statement_length();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 115;
				struct_statement_define_array();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 116;
				struct_statement_define_array_indirect();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 117;
				struct_statement_output();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 118;
				Match(COMMENT);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 119;
				Match(COMENT_BLOCK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_defineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Struct_statement_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_defineContext struct_statement_define() {
		Struct_statement_defineContext _localctx = new Struct_statement_defineContext(Context, State);
		EnterRule(_localctx, 8, RULE_struct_statement_define);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(IDENTIFIER);
			State = 123;
			Match(WS);
			State = 124;
			Match(IDENTIFIER);
			State = 125;
			Match(WS);
			State = 126;
			expr(0);
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 127;
				Match(WS);
				}
			}

			State = 130;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_lambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Struct_statement_define_lambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_lambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_lambda(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_lambdaContext struct_statement_define_lambda() {
		Struct_statement_define_lambdaContext _localctx = new Struct_statement_define_lambdaContext(Context, State);
		EnterRule(_localctx, 10, RULE_struct_statement_define_lambda);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(T__0);
			State = 133;
			Match(WS);
			State = 134;
			Match(IDENTIFIER);
			State = 135;
			Match(WS);
			State = 136;
			expr(0);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 137;
				Match(WS);
				}
			}

			State = 140;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_discardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Struct_statement_discardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_discard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_discard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_discard(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_discardContext struct_statement_discard() {
		Struct_statement_discardContext _localctx = new Struct_statement_discardContext(Context, State);
		EnterRule(_localctx, 12, RULE_struct_statement_discard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(T__1);
			State = 143;
			Match(WS);
			State = 144;
			expr(0);
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 145;
				Match(WS);
				}
			}

			State = 148;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Struct_statement_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_call(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_callContext struct_statement_call() {
		Struct_statement_callContext _localctx = new Struct_statement_callContext(Context, State);
		EnterRule(_localctx, 14, RULE_struct_statement_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(T__2);
			State = 151;
			Match(WS);
			State = 152;
			expr(0);
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 153;
				Match(WS);
				}
			}

			State = 156;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_lengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Struct_statement_lengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_length; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_length(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_length(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_lengthContext struct_statement_length() {
		Struct_statement_lengthContext _localctx = new Struct_statement_lengthContext(Context, State);
		EnterRule(_localctx, 16, RULE_struct_statement_length);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(T__3);
			State = 159;
			Match(WS);
			State = 160;
			expr(0);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 161;
				Match(WS);
				}
			}

			State = 164;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_arrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_define_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_array(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_arrayContext struct_statement_define_array() {
		Struct_statement_define_arrayContext _localctx = new Struct_statement_define_arrayContext(Context, State);
		EnterRule(_localctx, 18, RULE_struct_statement_define_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(IDENTIFIER);
			State = 167;
			Match(OPENSQ);
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 168;
				Match(WS);
				}
			}

			State = 171;
			expr(0);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 172;
				Match(WS);
				}
			}

			State = 175;
			Match(CLOSESQ);
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 176;
				Match(WS);
				}
			}

			State = 179;
			Match(IDENTIFIER);
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 180;
				Match(WS);
				}
			}

			State = 183;
			expr(0);
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 184;
				Match(WS);
				}
			}

			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 187;
				property_group();
				}
			}

			State = 190;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_array_indirectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPENSQ() { return GetTokens(LinearParser.OPENSQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENSQ(int i) {
			return GetToken(LinearParser.OPENSQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSESQ() { return GetTokens(LinearParser.CLOSESQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSESQ(int i) {
			return GetToken(LinearParser.CLOSESQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_define_array_indirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_array_indirect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_array_indirect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_array_indirect(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_array_indirectContext struct_statement_define_array_indirect() {
		Struct_statement_define_array_indirectContext _localctx = new Struct_statement_define_array_indirectContext(Context, State);
		EnterRule(_localctx, 20, RULE_struct_statement_define_array_indirect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(IDENTIFIER);
			State = 193;
			Match(OPENSQ);
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 194;
				Match(WS);
				}
			}

			State = 197;
			expr(0);
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 198;
				Match(WS);
				}
			}

			State = 201;
			Match(CLOSESQ);
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 202;
				Match(WS);
				}
			}

			State = 205;
			Match(T__4);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS) {
				{
				State = 206;
				Match(PLUS);
				}
			}

			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 209;
				Match(WS);
				}
			}

			State = 212;
			Match(IDENTIFIER);
			State = 213;
			Match(OPENSQ);
			State = 214;
			Match(CLOSESQ);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 215;
				Match(WS);
				}
			}

			State = 218;
			Match(IDENTIFIER);
			State = 219;
			Match(WS);
			State = 220;
			expr(0);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 221;
				Match(WS);
				}
			}

			State = 224;
			Match(T__5);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 225;
				Match(WS);
				}
			}

			State = 228;
			expr(0);
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 229;
				Match(WS);
				}
			}

			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 232;
				property_group();
				}
			}

			State = 235;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_outputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_outputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_output; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_output(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_output(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_outputContext struct_statement_output() {
		Struct_statement_outputContext _localctx = new Struct_statement_outputContext(Context, State);
		EnterRule(_localctx, 22, RULE_struct_statement_output);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(T__6);
			State = 238;
			Match(WS);
			State = 239;
			Match(IDENTIFIER);
			State = 240;
			Match(WS);
			State = 241;
			expr(0);
			State = 242;
			Match(WS);
			State = 243;
			expr(0);
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 244;
				Match(WS);
				}
			}

			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 247;
				property_group();
				}
			}

			State = 250;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_groupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(LinearParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(LinearParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Property_statementContext[] property_statement() {
			return GetRuleContexts<Property_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_statementContext property_statement(int i) {
			return GetRuleContext<Property_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Property_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterProperty_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitProperty_group(this);
		}
	}

	[RuleVersion(0)]
	public Property_groupContext property_group() {
		Property_groupContext _localctx = new Property_groupContext(Context, State);
		EnterRule(_localctx, 24, RULE_property_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(OPEN);
			State = 259;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 254;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 253;
						Match(WS);
						}
					}

					State = 256;
					property_statement();
					}
					} 
				}
				State = 261;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 262;
				Match(WS);
				}
			}

			State = 265;
			Match(CLOSE);
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 266;
				Match(WS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(LinearParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Property_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterProperty_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitProperty_statement(this);
		}
	}

	[RuleVersion(0)]
	public Property_statementContext property_statement() {
		Property_statementContext _localctx = new Property_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_property_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			Match(IDENTIFIER);
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 270;
				Match(WS);
				}
			}

			State = 273;
			Match(ASSIGNMENT);
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 274;
				Match(WS);
				}
			}

			State = 277;
			expr(0);
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 278;
				Match(WS);
				}
			}

			State = 281;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_lengthContext : ParserRuleContext {
		public Term_replacement_lengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_length; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_length(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_length(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_lengthContext term_replacement_length() {
		Term_replacement_lengthContext _localctx = new Term_replacement_lengthContext(Context, State);
		EnterRule(_localctx, 28, RULE_term_replacement_length);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_aContext : ParserRuleContext {
		public Term_replacement_aContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_a; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_a(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_a(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_aContext term_replacement_a() {
		Term_replacement_aContext _localctx = new Term_replacement_aContext(Context, State);
		EnterRule(_localctx, 30, RULE_term_replacement_a);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_iContext : ParserRuleContext {
		public Term_replacement_iContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_i; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_i(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_i(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_iContext term_replacement_i() {
		Term_replacement_iContext _localctx = new Term_replacement_iContext(Context, State);
		EnterRule(_localctx, 32, RULE_term_replacement_i);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_pContext : ParserRuleContext {
		public Term_replacement_pContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_p; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_p(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_p(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_pContext term_replacement_p() {
		Term_replacement_pContext _localctx = new Term_replacement_pContext(Context, State);
		EnterRule(_localctx, 34, RULE_term_replacement_p);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__11) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_uContext : ParserRuleContext {
		public Term_replacement_uContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_u; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_u(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_u(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_uContext term_replacement_u() {
		Term_replacement_uContext _localctx = new Term_replacement_uContext(Context, State);
		EnterRule(_localctx, 36, RULE_term_replacement_u);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			_la = TokenStream.LA(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_literal_trueContext : ParserRuleContext {
		public Term_literal_trueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_literal_true; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_literal_true(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_literal_true(this);
		}
	}

	[RuleVersion(0)]
	public Term_literal_trueContext term_literal_true() {
		Term_literal_trueContext _localctx = new Term_literal_trueContext(Context, State);
		EnterRule(_localctx, 38, RULE_term_literal_true);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_literal_falseContext : ParserRuleContext {
		public Term_literal_falseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_literal_false; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_literal_false(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_literal_false(this);
		}
	}

	[RuleVersion(0)]
	public Term_literal_falseContext term_literal_false() {
		Term_literal_falseContext _localctx = new Term_literal_falseContext(Context, State);
		EnterRule(_localctx, 40, RULE_term_literal_false);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprMethodCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprMethodCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprMethodCall(this);
		}
	}
	public partial class ExprOpAmpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(LinearParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpAmpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpAmp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpAmp(this);
		}
	}
	public partial class ExprOpBitwiseOrContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(LinearParser.BITWISE_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpBitwiseOrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpBitwiseOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpBitwiseOr(this);
		}
	}
	public partial class ExprLambdaReplacementContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ExprLambdaReplacementContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprLambdaReplacement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprLambdaReplacement(this);
		}
	}
	public partial class ExprUnboundDeserializeContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(LinearParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public ExprUnboundDeserializeContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprUnboundDeserialize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprUnboundDeserialize(this);
		}
	}
	public partial class ExprUnOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Un_opContext un_op() {
			return GetRuleContext<Un_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(LinearParser.WS, 0); }
		public ExprUnOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprUnOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprUnOp(this);
		}
	}
	public partial class ExprOpEqContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_eqContext op_eq() {
			return GetRuleContext<Op_eqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpEqContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpEq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpEq(this);
		}
	}
	public partial class ExprTermContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ExprTermContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprTerm(this);
		}
	}
	public partial class ExprRangeLengthContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprRangeLengthContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprRangeLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprRangeLength(this);
		}
	}
	public partial class ExprWrappedContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprWrappedContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprWrapped(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprWrapped(this);
		}
	}
	public partial class ExprOpMulDivContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_mul_divContext op_mul_div() {
			return GetRuleContext<Op_mul_divContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpMulDivContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpMulDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpMulDiv(this);
		}
	}
	public partial class ExprOpRelContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_relContext op_rel() {
			return GetRuleContext<Op_relContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpRelContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpRel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpRel(this);
		}
	}
	public partial class ExprRangeEndContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprRangeEndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprRangeEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprRangeEnd(this);
		}
	}
	public partial class ExprSourceWithOffsetContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(LinearParser.BANG, 0); }
		public ExprSourceWithOffsetContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprSourceWithOffset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprSourceWithOffset(this);
		}
	}
	public partial class ExprOpCondOrContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_cond_orContext op_cond_or() {
			return GetRuleContext<Op_cond_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpCondOrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpCondOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpCondOr(this);
		}
	}
	public partial class ExprArrayAccessContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprArrayAccessContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprArrayAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprArrayAccess(this);
		}
	}
	public partial class ExprOpAddSubContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_add_subContext op_add_sub() {
			return GetRuleContext<Op_add_subContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpAddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpAddSub(this);
		}
	}
	public partial class ExprDeserializeContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(LinearParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public ExprDeserializeContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprDeserialize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprDeserialize(this);
		}
	}
	public partial class ExprOpShiftContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_shiftContext op_shift() {
			return GetRuleContext<Op_shiftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpShiftContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpShift(this);
		}
	}
	public partial class ExprOpCondAndContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_cond_andContext op_cond_and() {
			return GetRuleContext<Op_cond_andContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpCondAndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpCondAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpCondAnd(this);
		}
	}
	public partial class ExprOpCaretContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(LinearParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpCaretContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpCaret(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpCaret(this);
		}
	}
	public partial class ExprMemberContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ExprMemberContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprMember(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				_localctx = new ExprMethodCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 298;
				Match(IDENTIFIER);
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 299;
					Match(WS);
					}
				}

				State = 302;
				Match(T__16);
				State = 304;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 303;
					Match(WS);
					}
					break;
				}
				State = 307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2269840704762806016L) != 0) {
					{
					State = 306;
					expr(0);
					}
				}

				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 309;
					Match(WS);
					}
				}

				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 312;
					Match(T__5);
					State = 314;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 313;
						Match(WS);
						}
					}

					State = 316;
					expr(0);
					State = 318;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 317;
						Match(WS);
						}
					}

					}
					}
					State = 324;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 325;
				Match(T__17);
				}
				break;
			case 2:
				{
				_localctx = new ExprLambdaReplacementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 326;
				Match(T__18);
				State = 327;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				_localctx = new ExprTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 328;
				term();
				}
				break;
			case 4:
				{
				_localctx = new ExprUnboundDeserializeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 329;
				Match(T__19);
				State = 330;
				expr(0);
				State = 332;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 331;
					Match(WS);
					}
					break;
				}
				State = 335;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 334;
					property_group();
					}
					break;
				}
				}
				break;
			case 5:
				{
				_localctx = new ExprDeserializeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 337;
				Match(IDENTIFIER);
				State = 338;
				Match(T__19);
				State = 339;
				expr(0);
				State = 341;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 340;
					Match(WS);
					}
					break;
				}
				State = 344;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 343;
					property_group();
					}
					break;
				}
				}
				break;
			case 6:
				{
				_localctx = new ExprRangeEndContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 346;
				Match(OPENSQ);
				State = 348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 347;
					Match(WS);
					}
				}

				State = 350;
				expr(0);
				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 351;
					Match(WS);
					}
				}

				State = 354;
				Match(T__20);
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 355;
					Match(WS);
					}
				}

				State = 358;
				expr(0);
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 359;
					Match(WS);
					}
				}

				State = 362;
				Match(CLOSESQ);
				}
				break;
			case 7:
				{
				_localctx = new ExprRangeLengthContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 364;
				Match(OPENSQ);
				State = 366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 365;
					Match(WS);
					}
				}

				State = 368;
				expr(0);
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 369;
					Match(WS);
					}
				}

				State = 372;
				Match(T__5);
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 373;
					Match(WS);
					}
				}

				State = 376;
				expr(0);
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 377;
					Match(WS);
					}
				}

				State = 380;
				Match(CLOSESQ);
				}
				break;
			case 8:
				{
				_localctx = new ExprWrappedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 382;
				Match(T__16);
				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 383;
					Match(WS);
					}
				}

				State = 386;
				expr(0);
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 387;
					Match(WS);
					}
				}

				State = 390;
				Match(T__17);
				}
				break;
			case 9:
				{
				_localctx = new ExprUnOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 392;
				un_op();
				State = 394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 393;
					Match(WS);
					}
				}

				State = 396;
				expr(11);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 516;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 514;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
					case 1:
						{
						_localctx = new ExprSourceWithOffsetContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 400;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 401;
						Match(BANG);
						State = 402;
						expr(15);
						}
						break;
					case 2:
						{
						_localctx = new ExprOpMulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 403;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 405;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 404;
							Match(WS);
							}
						}

						State = 407;
						op_mul_div();
						State = 409;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 408;
							Match(WS);
							}
						}

						State = 411;
						expr(11);
						}
						break;
					case 3:
						{
						_localctx = new ExprOpAddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 413;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 415;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 414;
							Match(WS);
							}
						}

						State = 417;
						op_add_sub();
						State = 419;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 418;
							Match(WS);
							}
						}

						State = 421;
						expr(10);
						}
						break;
					case 4:
						{
						_localctx = new ExprOpShiftContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 423;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 425;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 424;
							Match(WS);
							}
						}

						State = 427;
						op_shift();
						State = 429;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 428;
							Match(WS);
							}
						}

						State = 431;
						expr(9);
						}
						break;
					case 5:
						{
						_localctx = new ExprOpRelContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 433;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 435;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 434;
							Match(WS);
							}
						}

						State = 437;
						op_rel();
						State = 439;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 438;
							Match(WS);
							}
						}

						State = 441;
						expr(8);
						}
						break;
					case 6:
						{
						_localctx = new ExprOpEqContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 443;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 445;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 444;
							Match(WS);
							}
						}

						State = 447;
						op_eq();
						State = 449;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 448;
							Match(WS);
							}
						}

						State = 451;
						expr(7);
						}
						break;
					case 7:
						{
						_localctx = new ExprOpAmpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 453;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 455;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 454;
							Match(WS);
							}
						}

						State = 457;
						Match(AMP);
						State = 459;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 458;
							Match(WS);
							}
						}

						State = 461;
						expr(6);
						}
						break;
					case 8:
						{
						_localctx = new ExprOpCondAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 462;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 464;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 463;
							Match(WS);
							}
						}

						State = 466;
						op_cond_and();
						State = 468;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 467;
							Match(WS);
							}
						}

						State = 470;
						expr(5);
						}
						break;
					case 9:
						{
						_localctx = new ExprOpCondOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 472;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 474;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 473;
							Match(WS);
							}
						}

						State = 476;
						op_cond_or();
						State = 478;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 477;
							Match(WS);
							}
						}

						State = 480;
						expr(4);
						}
						break;
					case 10:
						{
						_localctx = new ExprOpCaretContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 482;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 484;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 483;
							Match(WS);
							}
						}

						State = 486;
						Match(CARET);
						State = 488;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 487;
							Match(WS);
							}
						}

						State = 490;
						expr(3);
						}
						break;
					case 11:
						{
						_localctx = new ExprOpBitwiseOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 491;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 493;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 492;
							Match(WS);
							}
						}

						State = 495;
						Match(BITWISE_OR);
						State = 497;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 496;
							Match(WS);
							}
						}

						State = 499;
						expr(2);
						}
						break;
					case 12:
						{
						_localctx = new ExprMemberContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 500;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 501;
						Match(T__21);
						State = 502;
						Match(IDENTIFIER);
						}
						break;
					case 13:
						{
						_localctx = new ExprArrayAccessContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 503;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 504;
						Match(OPENSQ);
						State = 506;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 505;
							Match(WS);
							}
						}

						State = 508;
						expr(0);
						State = 510;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 509;
							Match(WS);
							}
						}

						State = 512;
						Match(CLOSESQ);
						}
						break;
					}
					} 
				}
				State = 518;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Un_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LinearParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(LinearParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(LinearParser.TILDE, 0); }
		public Un_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_un_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterUn_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitUn_op(this);
		}
	}

	[RuleVersion(0)]
	public Un_opContext un_op() {
		Un_opContext _localctx = new Un_opContext(Context, State);
		EnterRule(_localctx, 44, RULE_un_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 26491358281728L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_mul_divContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(LinearParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(LinearParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(LinearParser.PERCENT, 0); }
		public Op_mul_divContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_mul_div; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterOp_mul_div(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitOp_mul_div(this);
		}
	}

	[RuleVersion(0)]
	public Op_mul_divContext op_mul_div() {
		Op_mul_divContext _localctx = new Op_mul_divContext(Context, State);
		EnterRule(_localctx, 46, RULE_op_mul_div);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 962072674304L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_add_subContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LinearParser.MINUS, 0); }
		public Op_add_subContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_add_sub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterOp_add_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitOp_add_sub(this);
		}
	}

	[RuleVersion(0)]
	public Op_add_subContext op_add_sub() {
		Op_add_subContext _localctx = new Op_add_subContext(Context, State);
		EnterRule(_localctx, 48, RULE_op_add_sub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_shiftContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT() { return GetToken(LinearParser.RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode URSHIFT() { return GetToken(LinearParser.URSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT() { return GetToken(LinearParser.LSHIFT, 0); }
		public Op_shiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_shift; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterOp_shift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitOp_shift(this);
		}
	}

	[RuleVersion(0)]
	public Op_shiftContext op_shift() {
		Op_shiftContext _localctx = new Op_shiftContext(Context, State);
		EnterRule(_localctx, 50, RULE_op_shift);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 30064771072L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_relContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(LinearParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(LinearParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(LinearParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(LinearParser.OP_GE, 0); }
		public Op_relContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_rel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterOp_rel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitOp_rel(this);
		}
	}

	[RuleVersion(0)]
	public Op_relContext op_rel() {
		Op_relContext _localctx = new Op_relContext(Context, State);
		EnterRule(_localctx, 52, RULE_op_rel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 27232703996755968L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_eqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(LinearParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(LinearParser.OP_NE, 0); }
		public Op_eqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_eq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterOp_eq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitOp_eq(this);
		}
	}

	[RuleVersion(0)]
	public Op_eqContext op_eq() {
		Op_eqContext _localctx = new Op_eqContext(Context, State);
		EnterRule(_localctx, 54, RULE_op_eq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			_la = TokenStream.LA(1);
			if ( !(_la==OP_EQ || _la==OP_NE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_cond_andContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(LinearParser.OP_AND, 0); }
		public Op_cond_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_cond_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterOp_cond_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitOp_cond_and(this);
		}
	}

	[RuleVersion(0)]
	public Op_cond_andContext op_cond_and() {
		Op_cond_andContext _localctx = new Op_cond_andContext(Context, State);
		EnterRule(_localctx, 56, RULE_op_cond_and);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			Match(OP_AND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_cond_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(LinearParser.OP_OR, 0); }
		public Op_cond_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_cond_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterOp_cond_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitOp_cond_or(this);
		}
	}

	[RuleVersion(0)]
	public Op_cond_orContext op_cond_or() {
		Op_cond_orContext _localctx = new Op_cond_orContext(Context, State);
		EnterRule(_localctx, 58, RULE_op_cond_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			Match(OP_OR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(LinearParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(LinearParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(LinearParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(LinearParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(LinearParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(LinearParser.OP_NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(LinearParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(LinearParser.OP_GE, 0); }
		public Bool_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterBool_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitBool_op(this);
		}
	}

	[RuleVersion(0)]
	public Bool_opContext bool_op() {
		Bool_opContext _localctx = new Bool_opContext(Context, State);
		EnterRule(_localctx, 60, RULE_bool_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 35676953298075648L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_sizeContext : ParserRuleContext {
		public Struct_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_size; } }
	 
		public Struct_sizeContext() { }
		public virtual void CopyFrom(Struct_sizeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructSizeIntContext : Struct_sizeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(LinearParser.INTEGER_LITERAL, 0); }
		public StructSizeIntContext(Struct_sizeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStructSizeInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStructSizeInt(this);
		}
	}
	public partial class StrictSizeHexContext : Struct_sizeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(LinearParser.HEX_INTEGER_LITERAL, 0); }
		public StrictSizeHexContext(Struct_sizeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStrictSizeHex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStrictSizeHex(this);
		}
	}

	[RuleVersion(0)]
	public Struct_sizeContext struct_size() {
		Struct_sizeContext _localctx = new Struct_sizeContext(Context, State);
		EnterRule(_localctx, 62, RULE_struct_size);
		try {
			State = 539;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				_localctx = new StructSizeIntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 537;
				Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				_localctx = new StrictSizeHexContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 538;
				Match(HEX_INTEGER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermLiteralFalseContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_literal_falseContext term_literal_false() {
			return GetRuleContext<Term_literal_falseContext>(0);
		}
		public TermLiteralFalseContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermLiteralFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermLiteralFalse(this);
		}
	}
	public partial class TermCharContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(LinearParser.CHARACTER_LITERAL, 0); }
		public TermCharContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermChar(this);
		}
	}
	public partial class TermRepUContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_replacement_uContext term_replacement_u() {
			return GetRuleContext<Term_replacement_uContext>(0);
		}
		public TermRepUContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepU(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepU(this);
		}
	}
	public partial class TermRealContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(LinearParser.REAL_LITERAL, 0); }
		public TermRealContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermReal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermReal(this);
		}
	}
	public partial class TermLiteralTrueContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_literal_trueContext term_literal_true() {
			return GetRuleContext<Term_literal_trueContext>(0);
		}
		public TermLiteralTrueContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermLiteralTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermLiteralTrue(this);
		}
	}
	public partial class TermHexContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(LinearParser.HEX_INTEGER_LITERAL, 0); }
		public TermHexContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermHex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermHex(this);
		}
	}
	public partial class TermRepLengthContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_replacement_lengthContext term_replacement_length() {
			return GetRuleContext<Term_replacement_lengthContext>(0);
		}
		public TermRepLengthContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepLength(this);
		}
	}
	public partial class TermRepAContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_replacement_aContext term_replacement_a() {
			return GetRuleContext<Term_replacement_aContext>(0);
		}
		public TermRepAContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepA(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepA(this);
		}
	}
	public partial class TermRepPContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_replacement_pContext term_replacement_p() {
			return GetRuleContext<Term_replacement_pContext>(0);
		}
		public TermRepPContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepP(this);
		}
	}
	public partial class TermIdentifierContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public TermIdentifierContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermIdentifier(this);
		}
	}
	public partial class TermIntContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(LinearParser.INTEGER_LITERAL, 0); }
		public TermIntContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermInt(this);
		}
	}
	public partial class TermStringContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_STRING() { return GetToken(LinearParser.REGULAR_STRING, 0); }
		public TermStringContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermString(this);
		}
	}
	public partial class TermStringVerbContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBATIM_STRING() { return GetToken(LinearParser.VERBATIM_STRING, 0); }
		public TermStringVerbContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermStringVerb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermStringVerb(this);
		}
	}
	public partial class TermRepIContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_replacement_iContext term_replacement_i() {
			return GetRuleContext<Term_replacement_iContext>(0);
		}
		public TermRepIContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepI(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepI(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 64, RULE_term);
		try {
			State = 555;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				_localctx = new TermRepLengthContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 541;
				term_replacement_length();
				}
				break;
			case T__8:
				_localctx = new TermRepAContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 542;
				term_replacement_a();
				}
				break;
			case T__9:
				_localctx = new TermRepIContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 543;
				term_replacement_i();
				}
				break;
			case T__10:
			case T__11:
				_localctx = new TermRepPContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 544;
				term_replacement_p();
				}
				break;
			case T__12:
			case T__13:
				_localctx = new TermRepUContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 545;
				term_replacement_u();
				}
				break;
			case T__14:
				_localctx = new TermLiteralTrueContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 546;
				term_literal_true();
				}
				break;
			case T__15:
				_localctx = new TermLiteralFalseContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 547;
				term_literal_false();
				}
				break;
			case IDENTIFIER:
				_localctx = new TermIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 548;
				Match(IDENTIFIER);
				}
				break;
			case INTEGER_LITERAL:
				_localctx = new TermIntContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 549;
				Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				_localctx = new TermHexContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 550;
				Match(HEX_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				_localctx = new TermRealContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 551;
				Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				_localctx = new TermCharContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 552;
				Match(CHARACTER_LITERAL);
				}
				break;
			case REGULAR_STRING:
				_localctx = new TermStringContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 553;
				Match(REGULAR_STRING);
				}
				break;
			case VERBATIM_STRING:
				_localctx = new TermStringVerbContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 554;
				Match(VERBATIM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 21: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		case 11: return Precpred(Context, 15);
		case 12: return Precpred(Context, 13);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,60,558,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,3,0,68,8,0,1,0,1,0,3,0,72,
		8,0,5,0,74,8,0,10,0,12,0,77,9,0,1,0,1,0,1,1,1,1,1,1,3,1,84,8,1,1,2,1,2,
		3,2,88,8,2,1,2,3,2,91,8,2,1,2,3,2,94,8,2,1,2,1,2,3,2,98,8,2,1,2,1,2,3,
		2,102,8,2,5,2,104,8,2,10,2,12,2,107,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,3,3,121,8,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,129,8,4,1,4,
		1,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,139,8,5,1,5,1,5,1,6,1,6,1,6,1,6,3,6,147,
		8,6,1,6,1,6,1,7,1,7,1,7,1,7,3,7,155,8,7,1,7,1,7,1,8,1,8,1,8,1,8,3,8,163,
		8,8,1,8,1,8,1,9,1,9,1,9,3,9,170,8,9,1,9,1,9,3,9,174,8,9,1,9,1,9,3,9,178,
		8,9,1,9,1,9,3,9,182,8,9,1,9,1,9,3,9,186,8,9,1,9,3,9,189,8,9,1,9,1,9,1,
		10,1,10,1,10,3,10,196,8,10,1,10,1,10,3,10,200,8,10,1,10,1,10,3,10,204,
		8,10,1,10,1,10,3,10,208,8,10,1,10,3,10,211,8,10,1,10,1,10,1,10,1,10,3,
		10,217,8,10,1,10,1,10,1,10,1,10,3,10,223,8,10,1,10,1,10,3,10,227,8,10,
		1,10,1,10,3,10,231,8,10,1,10,3,10,234,8,10,1,10,1,10,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,3,11,246,8,11,1,11,3,11,249,8,11,1,11,1,11,1,12,
		1,12,3,12,255,8,12,1,12,5,12,258,8,12,10,12,12,12,261,9,12,1,12,3,12,264,
		8,12,1,12,1,12,3,12,268,8,12,1,13,1,13,3,13,272,8,13,1,13,1,13,3,13,276,
		8,13,1,13,1,13,3,13,280,8,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,
		17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,3,21,301,8,21,1,21,
		1,21,3,21,305,8,21,1,21,3,21,308,8,21,1,21,3,21,311,8,21,1,21,1,21,3,21,
		315,8,21,1,21,1,21,3,21,319,8,21,5,21,321,8,21,10,21,12,21,324,9,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,333,8,21,1,21,3,21,336,8,21,1,21,
		1,21,1,21,1,21,3,21,342,8,21,1,21,3,21,345,8,21,1,21,1,21,3,21,349,8,21,
		1,21,1,21,3,21,353,8,21,1,21,1,21,3,21,357,8,21,1,21,1,21,3,21,361,8,21,
		1,21,1,21,1,21,1,21,3,21,367,8,21,1,21,1,21,3,21,371,8,21,1,21,1,21,3,
		21,375,8,21,1,21,1,21,3,21,379,8,21,1,21,1,21,1,21,1,21,3,21,385,8,21,
		1,21,1,21,3,21,389,8,21,1,21,1,21,1,21,1,21,3,21,395,8,21,1,21,1,21,3,
		21,399,8,21,1,21,1,21,1,21,1,21,1,21,3,21,406,8,21,1,21,1,21,3,21,410,
		8,21,1,21,1,21,1,21,1,21,3,21,416,8,21,1,21,1,21,3,21,420,8,21,1,21,1,
		21,1,21,1,21,3,21,426,8,21,1,21,1,21,3,21,430,8,21,1,21,1,21,1,21,1,21,
		3,21,436,8,21,1,21,1,21,3,21,440,8,21,1,21,1,21,1,21,1,21,3,21,446,8,21,
		1,21,1,21,3,21,450,8,21,1,21,1,21,1,21,1,21,3,21,456,8,21,1,21,1,21,3,
		21,460,8,21,1,21,1,21,1,21,3,21,465,8,21,1,21,1,21,3,21,469,8,21,1,21,
		1,21,1,21,1,21,3,21,475,8,21,1,21,1,21,3,21,479,8,21,1,21,1,21,1,21,1,
		21,3,21,485,8,21,1,21,1,21,3,21,489,8,21,1,21,1,21,1,21,3,21,494,8,21,
		1,21,1,21,3,21,498,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,507,8,
		21,1,21,1,21,3,21,511,8,21,1,21,1,21,5,21,515,8,21,10,21,12,21,518,9,21,
		1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
		1,29,1,29,1,30,1,30,1,31,1,31,3,31,540,8,31,1,32,1,32,1,32,1,32,1,32,1,
		32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,556,8,32,1,32,0,1,42,33,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,0,9,1,0,11,12,1,0,13,14,2,0,35,36,43,44,1,0,37,
		39,1,0,35,36,1,0,32,34,2,0,46,47,53,54,1,0,51,52,2,0,46,47,49,54,653,0,
		67,1,0,0,0,2,83,1,0,0,0,4,85,1,0,0,0,6,120,1,0,0,0,8,122,1,0,0,0,10,132,
		1,0,0,0,12,142,1,0,0,0,14,150,1,0,0,0,16,158,1,0,0,0,18,166,1,0,0,0,20,
		192,1,0,0,0,22,237,1,0,0,0,24,252,1,0,0,0,26,269,1,0,0,0,28,283,1,0,0,
		0,30,285,1,0,0,0,32,287,1,0,0,0,34,289,1,0,0,0,36,291,1,0,0,0,38,293,1,
		0,0,0,40,295,1,0,0,0,42,398,1,0,0,0,44,519,1,0,0,0,46,521,1,0,0,0,48,523,
		1,0,0,0,50,525,1,0,0,0,52,527,1,0,0,0,54,529,1,0,0,0,56,531,1,0,0,0,58,
		533,1,0,0,0,60,535,1,0,0,0,62,539,1,0,0,0,64,555,1,0,0,0,66,68,5,31,0,
		0,67,66,1,0,0,0,67,68,1,0,0,0,68,75,1,0,0,0,69,71,3,2,1,0,70,72,5,31,0,
		0,71,70,1,0,0,0,71,72,1,0,0,0,72,74,1,0,0,0,73,69,1,0,0,0,74,77,1,0,0,
		0,75,73,1,0,0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,75,1,0,0,0,78,79,5,0,0,
		1,79,1,1,0,0,0,80,84,3,4,2,0,81,84,5,23,0,0,82,84,5,24,0,0,83,80,1,0,0,
		0,83,81,1,0,0,0,83,82,1,0,0,0,84,3,1,0,0,0,85,87,5,30,0,0,86,88,5,31,0,
		0,87,86,1,0,0,0,87,88,1,0,0,0,88,90,1,0,0,0,89,91,3,62,31,0,90,89,1,0,
		0,0,90,91,1,0,0,0,91,93,1,0,0,0,92,94,5,31,0,0,93,92,1,0,0,0,93,94,1,0,
		0,0,94,95,1,0,0,0,95,97,5,25,0,0,96,98,5,31,0,0,97,96,1,0,0,0,97,98,1,
		0,0,0,98,105,1,0,0,0,99,101,3,6,3,0,100,102,5,31,0,0,101,100,1,0,0,0,101,
		102,1,0,0,0,102,104,1,0,0,0,103,99,1,0,0,0,104,107,1,0,0,0,105,103,1,0,
		0,0,105,106,1,0,0,0,106,108,1,0,0,0,107,105,1,0,0,0,108,109,5,26,0,0,109,
		5,1,0,0,0,110,121,3,8,4,0,111,121,3,10,5,0,112,121,3,12,6,0,113,121,3,
		14,7,0,114,121,3,16,8,0,115,121,3,18,9,0,116,121,3,20,10,0,117,121,3,22,
		11,0,118,121,5,23,0,0,119,121,5,24,0,0,120,110,1,0,0,0,120,111,1,0,0,0,
		120,112,1,0,0,0,120,113,1,0,0,0,120,114,1,0,0,0,120,115,1,0,0,0,120,116,
		1,0,0,0,120,117,1,0,0,0,120,118,1,0,0,0,120,119,1,0,0,0,121,7,1,0,0,0,
		122,123,5,30,0,0,123,124,5,31,0,0,124,125,5,30,0,0,125,126,5,31,0,0,126,
		128,3,42,21,0,127,129,5,31,0,0,128,127,1,0,0,0,128,129,1,0,0,0,129,130,
		1,0,0,0,130,131,5,29,0,0,131,9,1,0,0,0,132,133,5,1,0,0,133,134,5,31,0,
		0,134,135,5,30,0,0,135,136,5,31,0,0,136,138,3,42,21,0,137,139,5,31,0,0,
		138,137,1,0,0,0,138,139,1,0,0,0,139,140,1,0,0,0,140,141,5,29,0,0,141,11,
		1,0,0,0,142,143,5,2,0,0,143,144,5,31,0,0,144,146,3,42,21,0,145,147,5,31,
		0,0,146,145,1,0,0,0,146,147,1,0,0,0,147,148,1,0,0,0,148,149,5,29,0,0,149,
		13,1,0,0,0,150,151,5,3,0,0,151,152,5,31,0,0,152,154,3,42,21,0,153,155,
		5,31,0,0,154,153,1,0,0,0,154,155,1,0,0,0,155,156,1,0,0,0,156,157,5,29,
		0,0,157,15,1,0,0,0,158,159,5,4,0,0,159,160,5,31,0,0,160,162,3,42,21,0,
		161,163,5,31,0,0,162,161,1,0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,165,
		5,29,0,0,165,17,1,0,0,0,166,167,5,30,0,0,167,169,5,27,0,0,168,170,5,31,
		0,0,169,168,1,0,0,0,169,170,1,0,0,0,170,171,1,0,0,0,171,173,3,42,21,0,
		172,174,5,31,0,0,173,172,1,0,0,0,173,174,1,0,0,0,174,175,1,0,0,0,175,177,
		5,28,0,0,176,178,5,31,0,0,177,176,1,0,0,0,177,178,1,0,0,0,178,179,1,0,
		0,0,179,181,5,30,0,0,180,182,5,31,0,0,181,180,1,0,0,0,181,182,1,0,0,0,
		182,183,1,0,0,0,183,185,3,42,21,0,184,186,5,31,0,0,185,184,1,0,0,0,185,
		186,1,0,0,0,186,188,1,0,0,0,187,189,3,24,12,0,188,187,1,0,0,0,188,189,
		1,0,0,0,189,190,1,0,0,0,190,191,5,29,0,0,191,19,1,0,0,0,192,193,5,30,0,
		0,193,195,5,27,0,0,194,196,5,31,0,0,195,194,1,0,0,0,195,196,1,0,0,0,196,
		197,1,0,0,0,197,199,3,42,21,0,198,200,5,31,0,0,199,198,1,0,0,0,199,200,
		1,0,0,0,200,201,1,0,0,0,201,203,5,28,0,0,202,204,5,31,0,0,203,202,1,0,
		0,0,203,204,1,0,0,0,204,205,1,0,0,0,205,207,5,5,0,0,206,208,5,35,0,0,207,
		206,1,0,0,0,207,208,1,0,0,0,208,210,1,0,0,0,209,211,5,31,0,0,210,209,1,
		0,0,0,210,211,1,0,0,0,211,212,1,0,0,0,212,213,5,30,0,0,213,214,5,27,0,
		0,214,216,5,28,0,0,215,217,5,31,0,0,216,215,1,0,0,0,216,217,1,0,0,0,217,
		218,1,0,0,0,218,219,5,30,0,0,219,220,5,31,0,0,220,222,3,42,21,0,221,223,
		5,31,0,0,222,221,1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,226,5,6,0,
		0,225,227,5,31,0,0,226,225,1,0,0,0,226,227,1,0,0,0,227,228,1,0,0,0,228,
		230,3,42,21,0,229,231,5,31,0,0,230,229,1,0,0,0,230,231,1,0,0,0,231,233,
		1,0,0,0,232,234,3,24,12,0,233,232,1,0,0,0,233,234,1,0,0,0,234,235,1,0,
		0,0,235,236,5,29,0,0,236,21,1,0,0,0,237,238,5,7,0,0,238,239,5,31,0,0,239,
		240,5,30,0,0,240,241,5,31,0,0,241,242,3,42,21,0,242,243,5,31,0,0,243,245,
		3,42,21,0,244,246,5,31,0,0,245,244,1,0,0,0,245,246,1,0,0,0,246,248,1,0,
		0,0,247,249,3,24,12,0,248,247,1,0,0,0,248,249,1,0,0,0,249,250,1,0,0,0,
		250,251,5,29,0,0,251,23,1,0,0,0,252,259,5,25,0,0,253,255,5,31,0,0,254,
		253,1,0,0,0,254,255,1,0,0,0,255,256,1,0,0,0,256,258,3,26,13,0,257,254,
		1,0,0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,263,1,0,0,
		0,261,259,1,0,0,0,262,264,5,31,0,0,263,262,1,0,0,0,263,264,1,0,0,0,264,
		265,1,0,0,0,265,267,5,26,0,0,266,268,5,31,0,0,267,266,1,0,0,0,267,268,
		1,0,0,0,268,25,1,0,0,0,269,271,5,30,0,0,270,272,5,31,0,0,271,270,1,0,0,
		0,271,272,1,0,0,0,272,273,1,0,0,0,273,275,5,45,0,0,274,276,5,31,0,0,275,
		274,1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,277,279,3,42,21,0,278,280,
		5,31,0,0,279,278,1,0,0,0,279,280,1,0,0,0,280,281,1,0,0,0,281,282,5,29,
		0,0,282,27,1,0,0,0,283,284,5,8,0,0,284,29,1,0,0,0,285,286,5,9,0,0,286,
		31,1,0,0,0,287,288,5,10,0,0,288,33,1,0,0,0,289,290,7,0,0,0,290,35,1,0,
		0,0,291,292,7,1,0,0,292,37,1,0,0,0,293,294,5,15,0,0,294,39,1,0,0,0,295,
		296,5,16,0,0,296,41,1,0,0,0,297,298,6,21,-1,0,298,300,5,30,0,0,299,301,
		5,31,0,0,300,299,1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,304,5,17,
		0,0,303,305,5,31,0,0,304,303,1,0,0,0,304,305,1,0,0,0,305,307,1,0,0,0,306,
		308,3,42,21,0,307,306,1,0,0,0,307,308,1,0,0,0,308,310,1,0,0,0,309,311,
		5,31,0,0,310,309,1,0,0,0,310,311,1,0,0,0,311,322,1,0,0,0,312,314,5,6,0,
		0,313,315,5,31,0,0,314,313,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,
		318,3,42,21,0,317,319,5,31,0,0,318,317,1,0,0,0,318,319,1,0,0,0,319,321,
		1,0,0,0,320,312,1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,
		0,323,325,1,0,0,0,324,322,1,0,0,0,325,399,5,18,0,0,326,327,5,19,0,0,327,
		399,5,30,0,0,328,399,3,64,32,0,329,330,5,20,0,0,330,332,3,42,21,0,331,
		333,5,31,0,0,332,331,1,0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,336,3,
		24,12,0,335,334,1,0,0,0,335,336,1,0,0,0,336,399,1,0,0,0,337,338,5,30,0,
		0,338,339,5,20,0,0,339,341,3,42,21,0,340,342,5,31,0,0,341,340,1,0,0,0,
		341,342,1,0,0,0,342,344,1,0,0,0,343,345,3,24,12,0,344,343,1,0,0,0,344,
		345,1,0,0,0,345,399,1,0,0,0,346,348,5,27,0,0,347,349,5,31,0,0,348,347,
		1,0,0,0,348,349,1,0,0,0,349,350,1,0,0,0,350,352,3,42,21,0,351,353,5,31,
		0,0,352,351,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,356,5,21,0,0,355,
		357,5,31,0,0,356,355,1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,360,3,
		42,21,0,359,361,5,31,0,0,360,359,1,0,0,0,360,361,1,0,0,0,361,362,1,0,0,
		0,362,363,5,28,0,0,363,399,1,0,0,0,364,366,5,27,0,0,365,367,5,31,0,0,366,
		365,1,0,0,0,366,367,1,0,0,0,367,368,1,0,0,0,368,370,3,42,21,0,369,371,
		5,31,0,0,370,369,1,0,0,0,370,371,1,0,0,0,371,372,1,0,0,0,372,374,5,6,0,
		0,373,375,5,31,0,0,374,373,1,0,0,0,374,375,1,0,0,0,375,376,1,0,0,0,376,
		378,3,42,21,0,377,379,5,31,0,0,378,377,1,0,0,0,378,379,1,0,0,0,379,380,
		1,0,0,0,380,381,5,28,0,0,381,399,1,0,0,0,382,384,5,17,0,0,383,385,5,31,
		0,0,384,383,1,0,0,0,384,385,1,0,0,0,385,386,1,0,0,0,386,388,3,42,21,0,
		387,389,5,31,0,0,388,387,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,391,
		5,18,0,0,391,399,1,0,0,0,392,394,3,44,22,0,393,395,5,31,0,0,394,393,1,
		0,0,0,394,395,1,0,0,0,395,396,1,0,0,0,396,397,3,42,21,11,397,399,1,0,0,
		0,398,297,1,0,0,0,398,326,1,0,0,0,398,328,1,0,0,0,398,329,1,0,0,0,398,
		337,1,0,0,0,398,346,1,0,0,0,398,364,1,0,0,0,398,382,1,0,0,0,398,392,1,
		0,0,0,399,516,1,0,0,0,400,401,10,14,0,0,401,402,5,43,0,0,402,515,3,42,
		21,15,403,405,10,10,0,0,404,406,5,31,0,0,405,404,1,0,0,0,405,406,1,0,0,
		0,406,407,1,0,0,0,407,409,3,46,23,0,408,410,5,31,0,0,409,408,1,0,0,0,409,
		410,1,0,0,0,410,411,1,0,0,0,411,412,3,42,21,11,412,515,1,0,0,0,413,415,
		10,9,0,0,414,416,5,31,0,0,415,414,1,0,0,0,415,416,1,0,0,0,416,417,1,0,
		0,0,417,419,3,48,24,0,418,420,5,31,0,0,419,418,1,0,0,0,419,420,1,0,0,0,
		420,421,1,0,0,0,421,422,3,42,21,10,422,515,1,0,0,0,423,425,10,8,0,0,424,
		426,5,31,0,0,425,424,1,0,0,0,425,426,1,0,0,0,426,427,1,0,0,0,427,429,3,
		50,25,0,428,430,5,31,0,0,429,428,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,
		0,431,432,3,42,21,9,432,515,1,0,0,0,433,435,10,7,0,0,434,436,5,31,0,0,
		435,434,1,0,0,0,435,436,1,0,0,0,436,437,1,0,0,0,437,439,3,52,26,0,438,
		440,5,31,0,0,439,438,1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,441,442,3,
		42,21,8,442,515,1,0,0,0,443,445,10,6,0,0,444,446,5,31,0,0,445,444,1,0,
		0,0,445,446,1,0,0,0,446,447,1,0,0,0,447,449,3,54,27,0,448,450,5,31,0,0,
		449,448,1,0,0,0,449,450,1,0,0,0,450,451,1,0,0,0,451,452,3,42,21,7,452,
		515,1,0,0,0,453,455,10,5,0,0,454,456,5,31,0,0,455,454,1,0,0,0,455,456,
		1,0,0,0,456,457,1,0,0,0,457,459,5,40,0,0,458,460,5,31,0,0,459,458,1,0,
		0,0,459,460,1,0,0,0,460,461,1,0,0,0,461,515,3,42,21,6,462,464,10,4,0,0,
		463,465,5,31,0,0,464,463,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,468,
		3,56,28,0,467,469,5,31,0,0,468,467,1,0,0,0,468,469,1,0,0,0,469,470,1,0,
		0,0,470,471,3,42,21,5,471,515,1,0,0,0,472,474,10,3,0,0,473,475,5,31,0,
		0,474,473,1,0,0,0,474,475,1,0,0,0,475,476,1,0,0,0,476,478,3,58,29,0,477,
		479,5,31,0,0,478,477,1,0,0,0,478,479,1,0,0,0,479,480,1,0,0,0,480,481,3,
		42,21,4,481,515,1,0,0,0,482,484,10,2,0,0,483,485,5,31,0,0,484,483,1,0,
		0,0,484,485,1,0,0,0,485,486,1,0,0,0,486,488,5,42,0,0,487,489,5,31,0,0,
		488,487,1,0,0,0,488,489,1,0,0,0,489,490,1,0,0,0,490,515,3,42,21,3,491,
		493,10,1,0,0,492,494,5,31,0,0,493,492,1,0,0,0,493,494,1,0,0,0,494,495,
		1,0,0,0,495,497,5,41,0,0,496,498,5,31,0,0,497,496,1,0,0,0,497,498,1,0,
		0,0,498,499,1,0,0,0,499,515,3,42,21,2,500,501,10,15,0,0,501,502,5,22,0,
		0,502,515,5,30,0,0,503,504,10,13,0,0,504,506,5,27,0,0,505,507,5,31,0,0,
		506,505,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,510,3,42,21,0,509,
		511,5,31,0,0,510,509,1,0,0,0,510,511,1,0,0,0,511,512,1,0,0,0,512,513,5,
		28,0,0,513,515,1,0,0,0,514,400,1,0,0,0,514,403,1,0,0,0,514,413,1,0,0,0,
		514,423,1,0,0,0,514,433,1,0,0,0,514,443,1,0,0,0,514,453,1,0,0,0,514,462,
		1,0,0,0,514,472,1,0,0,0,514,482,1,0,0,0,514,491,1,0,0,0,514,500,1,0,0,
		0,514,503,1,0,0,0,515,518,1,0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,
		43,1,0,0,0,518,516,1,0,0,0,519,520,7,2,0,0,520,45,1,0,0,0,521,522,7,3,
		0,0,522,47,1,0,0,0,523,524,7,4,0,0,524,49,1,0,0,0,525,526,7,5,0,0,526,
		51,1,0,0,0,527,528,7,6,0,0,528,53,1,0,0,0,529,530,7,7,0,0,530,55,1,0,0,
		0,531,532,5,49,0,0,532,57,1,0,0,0,533,534,5,50,0,0,534,59,1,0,0,0,535,
		536,7,8,0,0,536,61,1,0,0,0,537,540,5,55,0,0,538,540,5,56,0,0,539,537,1,
		0,0,0,539,538,1,0,0,0,540,63,1,0,0,0,541,556,3,28,14,0,542,556,3,30,15,
		0,543,556,3,32,16,0,544,556,3,34,17,0,545,556,3,36,18,0,546,556,3,38,19,
		0,547,556,3,40,20,0,548,556,5,30,0,0,549,556,5,55,0,0,550,556,5,56,0,0,
		551,556,5,57,0,0,552,556,5,58,0,0,553,556,5,59,0,0,554,556,5,60,0,0,555,
		541,1,0,0,0,555,542,1,0,0,0,555,543,1,0,0,0,555,544,1,0,0,0,555,545,1,
		0,0,0,555,546,1,0,0,0,555,547,1,0,0,0,555,548,1,0,0,0,555,549,1,0,0,0,
		555,550,1,0,0,0,555,551,1,0,0,0,555,552,1,0,0,0,555,553,1,0,0,0,555,554,
		1,0,0,0,556,65,1,0,0,0,90,67,71,75,83,87,90,93,97,101,105,120,128,138,
		146,154,162,169,173,177,181,185,188,195,199,203,207,210,216,222,226,230,
		233,245,248,254,259,263,267,271,275,279,300,304,307,310,314,318,322,332,
		335,341,344,348,352,356,360,366,370,374,378,384,388,394,398,405,409,415,
		419,425,429,435,439,445,449,455,459,464,468,474,478,484,488,493,497,506,
		510,514,516,539,555
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
