//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/Shared/gabura/git/Linear/scripts/../spec/Linear.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class LinearParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, COMMENT=23, COMENT_BLOCK=24, 
		OPEN=25, CLOSE=26, OPENSQ=27, CLOSESQ=28, ENDL=29, IDENTIFIER=30, WS=31, 
		PLUS=32, MINUS=33, STAR=34, DIV=35, PERCENT=36, AMP=37, BITWISE_OR=38, 
		CARET=39, BANG=40, TILDE=41, ASSIGNMENT=42, LT=43, GT=44, INTERR=45, OP_AND=46, 
		OP_OR=47, OP_EQ=48, OP_NE=49, OP_LE=50, OP_GE=51, INTEGER_LITERAL=52, 
		HEX_INTEGER_LITERAL=53, REAL_LITERAL=54, CHARACTER_LITERAL=55, REGULAR_STRING=56, 
		VERBATIM_STRING=57;
	public const int
		RULE_compilation_unit = 0, RULE_body_element = 1, RULE_struct = 2, RULE_struct_statement = 3, 
		RULE_struct_statement_define = 4, RULE_struct_statement_define_lambda = 5, 
		RULE_struct_statement_discard = 6, RULE_struct_statement_call = 7, RULE_struct_statement_length = 8, 
		RULE_struct_statement_define_array = 9, RULE_struct_statement_define_array_indirect = 10, 
		RULE_struct_statement_output = 11, RULE_property_group = 12, RULE_property_statement = 13, 
		RULE_term_replacement_length = 14, RULE_term_replacement_a = 15, RULE_term_replacement_i = 16, 
		RULE_term_replacement_p = 17, RULE_term_replacement_u = 18, RULE_term_literal_true = 19, 
		RULE_term_literal_false = 20, RULE_expr = 21, RULE_op_mul_div = 22, RULE_op_add_sub = 23, 
		RULE_un_op = 24, RULE_bool_op = 25, RULE_struct_size = 26, RULE_term = 27;
	public static readonly string[] ruleNames = {
		"compilation_unit", "body_element", "struct", "struct_statement", "struct_statement_define", 
		"struct_statement_define_lambda", "struct_statement_discard", "struct_statement_call", 
		"struct_statement_length", "struct_statement_define_array", "struct_statement_define_array_indirect", 
		"struct_statement_output", "property_group", "property_statement", "term_replacement_length", 
		"term_replacement_a", "term_replacement_i", "term_replacement_p", "term_replacement_u", 
		"term_literal_true", "term_literal_false", "expr", "op_mul_div", "op_add_sub", 
		"un_op", "bool_op", "struct_size", "term"
	};

	private static readonly string[] _LiteralNames = {
		null, "'lambda'", "'$discard'", "'$call'", "'$setlength'", "'->'", "','", 
		"'$output'", "'$length'", "'$a'", "'$i'", "'$p'", "'$parent'", "'$u'", 
		"'$unique'", "'true'", "'false'", "'('", "')'", "'$$'", "'`'", "'..'", 
		"'.'", null, null, "'{'", "'}'", "'['", "']'", "';'", null, null, "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", 
		"'<'", "'>'", "'?'", "'&&'", "'||'", "'=='", "'!='", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "COMMENT", 
		"COMENT_BLOCK", "OPEN", "CLOSE", "OPENSQ", "CLOSESQ", "ENDL", "IDENTIFIER", 
		"WS", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", 
		"CARET", "BANG", "TILDE", "ASSIGNMENT", "LT", "GT", "INTERR", "OP_AND", 
		"OP_OR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", 
		"REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", "VERBATIM_STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Linear.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LinearParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LinearParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LinearParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LinearParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Body_elementContext[] body_element() {
			return GetRuleContexts<Body_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Body_elementContext body_element(int i) {
			return GetRuleContext<Body_elementContext>(i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 56;
				Match(WS);
				}
			}

			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1098907648L) != 0) {
				{
				{
				State = 59;
				body_element();
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 60;
					Match(WS);
					}
				}

				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 68;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Body_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct() {
			return GetRuleContext<StructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(LinearParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMENT_BLOCK() { return GetToken(LinearParser.COMENT_BLOCK, 0); }
		public Body_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterBody_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitBody_element(this);
		}
	}

	[RuleVersion(0)]
	public Body_elementContext body_element() {
		Body_elementContext _localctx = new Body_elementContext(Context, State);
		EnterRule(_localctx, 2, RULE_body_element);
		try {
			State = 73;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70;
				@struct();
				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71;
				Match(COMMENT);
				}
				break;
			case COMENT_BLOCK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 72;
				Match(COMENT_BLOCK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(LinearParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(LinearParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_sizeContext struct_size() {
			return GetRuleContext<Struct_sizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statementContext[] struct_statement() {
			return GetRuleContexts<Struct_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statementContext struct_statement(int i) {
			return GetRuleContext<Struct_statementContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 4, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(IDENTIFIER);
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 76;
				Match(WS);
				}
				break;
			}
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTEGER_LITERAL || _la==HEX_INTEGER_LITERAL) {
				{
				State = 79;
				struct_size();
				}
			}

			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 82;
				Match(WS);
				}
			}

			State = 85;
			Match(OPEN);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 86;
				Match(WS);
				}
			}

			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1098907806L) != 0) {
				{
				{
				State = 89;
				struct_statement();
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 90;
					Match(WS);
					}
				}

				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 98;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_defineContext struct_statement_define() {
			return GetRuleContext<Struct_statement_defineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_define_lambdaContext struct_statement_define_lambda() {
			return GetRuleContext<Struct_statement_define_lambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_discardContext struct_statement_discard() {
			return GetRuleContext<Struct_statement_discardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_callContext struct_statement_call() {
			return GetRuleContext<Struct_statement_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_lengthContext struct_statement_length() {
			return GetRuleContext<Struct_statement_lengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_define_arrayContext struct_statement_define_array() {
			return GetRuleContext<Struct_statement_define_arrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_define_array_indirectContext struct_statement_define_array_indirect() {
			return GetRuleContext<Struct_statement_define_array_indirectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_outputContext struct_statement_output() {
			return GetRuleContext<Struct_statement_outputContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(LinearParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMENT_BLOCK() { return GetToken(LinearParser.COMENT_BLOCK, 0); }
		public Struct_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statementContext struct_statement() {
		Struct_statementContext _localctx = new Struct_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_struct_statement);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				struct_statement_define();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				struct_statement_define_lambda();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				struct_statement_discard();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 103;
				struct_statement_call();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 104;
				struct_statement_length();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 105;
				struct_statement_define_array();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 106;
				struct_statement_define_array_indirect();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 107;
				struct_statement_output();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 108;
				Match(COMMENT);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 109;
				Match(COMENT_BLOCK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_defineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Struct_statement_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_defineContext struct_statement_define() {
		Struct_statement_defineContext _localctx = new Struct_statement_defineContext(Context, State);
		EnterRule(_localctx, 8, RULE_struct_statement_define);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(IDENTIFIER);
			State = 113;
			Match(WS);
			State = 114;
			Match(IDENTIFIER);
			State = 115;
			Match(WS);
			State = 116;
			expr(0);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 117;
				Match(WS);
				}
			}

			State = 120;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_lambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Struct_statement_define_lambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_lambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_lambda(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_lambdaContext struct_statement_define_lambda() {
		Struct_statement_define_lambdaContext _localctx = new Struct_statement_define_lambdaContext(Context, State);
		EnterRule(_localctx, 10, RULE_struct_statement_define_lambda);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(T__0);
			State = 123;
			Match(WS);
			State = 124;
			Match(IDENTIFIER);
			State = 125;
			Match(WS);
			State = 126;
			expr(0);
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 127;
				Match(WS);
				}
			}

			State = 130;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_discardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Struct_statement_discardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_discard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_discard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_discard(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_discardContext struct_statement_discard() {
		Struct_statement_discardContext _localctx = new Struct_statement_discardContext(Context, State);
		EnterRule(_localctx, 12, RULE_struct_statement_discard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(T__1);
			State = 133;
			Match(WS);
			State = 134;
			expr(0);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 135;
				Match(WS);
				}
			}

			State = 138;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Struct_statement_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_call(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_callContext struct_statement_call() {
		Struct_statement_callContext _localctx = new Struct_statement_callContext(Context, State);
		EnterRule(_localctx, 14, RULE_struct_statement_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(T__2);
			State = 141;
			Match(WS);
			State = 142;
			expr(0);
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 143;
				Match(WS);
				}
			}

			State = 146;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_lengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Struct_statement_lengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_length; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_length(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_length(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_lengthContext struct_statement_length() {
		Struct_statement_lengthContext _localctx = new Struct_statement_lengthContext(Context, State);
		EnterRule(_localctx, 16, RULE_struct_statement_length);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(T__3);
			State = 149;
			Match(WS);
			State = 150;
			expr(0);
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 151;
				Match(WS);
				}
			}

			State = 154;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_arrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_define_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_array(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_arrayContext struct_statement_define_array() {
		Struct_statement_define_arrayContext _localctx = new Struct_statement_define_arrayContext(Context, State);
		EnterRule(_localctx, 18, RULE_struct_statement_define_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(IDENTIFIER);
			State = 157;
			Match(OPENSQ);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 158;
				Match(WS);
				}
			}

			State = 161;
			expr(0);
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 162;
				Match(WS);
				}
			}

			State = 165;
			Match(CLOSESQ);
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 166;
				Match(WS);
				}
			}

			State = 169;
			Match(IDENTIFIER);
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 170;
				Match(WS);
				}
			}

			State = 173;
			expr(0);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 174;
				Match(WS);
				}
			}

			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 177;
				property_group();
				}
			}

			State = 180;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_array_indirectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPENSQ() { return GetTokens(LinearParser.OPENSQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENSQ(int i) {
			return GetToken(LinearParser.OPENSQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSESQ() { return GetTokens(LinearParser.CLOSESQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSESQ(int i) {
			return GetToken(LinearParser.CLOSESQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_define_array_indirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_array_indirect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_array_indirect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_array_indirect(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_array_indirectContext struct_statement_define_array_indirect() {
		Struct_statement_define_array_indirectContext _localctx = new Struct_statement_define_array_indirectContext(Context, State);
		EnterRule(_localctx, 20, RULE_struct_statement_define_array_indirect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(IDENTIFIER);
			State = 183;
			Match(OPENSQ);
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 184;
				Match(WS);
				}
			}

			State = 187;
			expr(0);
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 188;
				Match(WS);
				}
			}

			State = 191;
			Match(CLOSESQ);
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 192;
				Match(WS);
				}
			}

			State = 195;
			Match(T__4);
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS) {
				{
				State = 196;
				Match(PLUS);
				}
			}

			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 199;
				Match(WS);
				}
			}

			State = 202;
			Match(IDENTIFIER);
			State = 203;
			Match(OPENSQ);
			State = 204;
			Match(CLOSESQ);
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 205;
				Match(WS);
				}
			}

			State = 208;
			Match(IDENTIFIER);
			State = 209;
			Match(WS);
			State = 210;
			expr(0);
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 211;
				Match(WS);
				}
			}

			State = 214;
			Match(T__5);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 215;
				Match(WS);
				}
			}

			State = 218;
			expr(0);
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 219;
				Match(WS);
				}
			}

			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 222;
				property_group();
				}
			}

			State = 225;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_outputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_outputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_output; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_output(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_output(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_outputContext struct_statement_output() {
		Struct_statement_outputContext _localctx = new Struct_statement_outputContext(Context, State);
		EnterRule(_localctx, 22, RULE_struct_statement_output);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			Match(T__6);
			State = 228;
			Match(WS);
			State = 229;
			Match(IDENTIFIER);
			State = 230;
			Match(WS);
			State = 231;
			expr(0);
			State = 232;
			Match(WS);
			State = 233;
			expr(0);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 234;
				Match(WS);
				}
			}

			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 237;
				property_group();
				}
			}

			State = 240;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_groupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(LinearParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(LinearParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Property_statementContext[] property_statement() {
			return GetRuleContexts<Property_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_statementContext property_statement(int i) {
			return GetRuleContext<Property_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Property_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterProperty_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitProperty_group(this);
		}
	}

	[RuleVersion(0)]
	public Property_groupContext property_group() {
		Property_groupContext _localctx = new Property_groupContext(Context, State);
		EnterRule(_localctx, 24, RULE_property_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(OPEN);
			State = 249;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 244;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 243;
						Match(WS);
						}
					}

					State = 246;
					property_statement();
					}
					} 
				}
				State = 251;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 252;
				Match(WS);
				}
			}

			State = 255;
			Match(CLOSE);
			State = 257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 256;
				Match(WS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(LinearParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Property_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterProperty_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitProperty_statement(this);
		}
	}

	[RuleVersion(0)]
	public Property_statementContext property_statement() {
		Property_statementContext _localctx = new Property_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_property_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(IDENTIFIER);
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 260;
				Match(WS);
				}
			}

			State = 263;
			Match(ASSIGNMENT);
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 264;
				Match(WS);
				}
			}

			State = 267;
			expr(0);
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 268;
				Match(WS);
				}
			}

			State = 271;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_lengthContext : ParserRuleContext {
		public Term_replacement_lengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_length; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_length(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_length(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_lengthContext term_replacement_length() {
		Term_replacement_lengthContext _localctx = new Term_replacement_lengthContext(Context, State);
		EnterRule(_localctx, 28, RULE_term_replacement_length);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_aContext : ParserRuleContext {
		public Term_replacement_aContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_a; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_a(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_a(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_aContext term_replacement_a() {
		Term_replacement_aContext _localctx = new Term_replacement_aContext(Context, State);
		EnterRule(_localctx, 30, RULE_term_replacement_a);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_iContext : ParserRuleContext {
		public Term_replacement_iContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_i; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_i(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_i(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_iContext term_replacement_i() {
		Term_replacement_iContext _localctx = new Term_replacement_iContext(Context, State);
		EnterRule(_localctx, 32, RULE_term_replacement_i);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_pContext : ParserRuleContext {
		public Term_replacement_pContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_p; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_p(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_p(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_pContext term_replacement_p() {
		Term_replacement_pContext _localctx = new Term_replacement_pContext(Context, State);
		EnterRule(_localctx, 34, RULE_term_replacement_p);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__11) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_uContext : ParserRuleContext {
		public Term_replacement_uContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_u; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_u(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_u(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_uContext term_replacement_u() {
		Term_replacement_uContext _localctx = new Term_replacement_uContext(Context, State);
		EnterRule(_localctx, 36, RULE_term_replacement_u);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			_la = TokenStream.LA(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_literal_trueContext : ParserRuleContext {
		public Term_literal_trueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_literal_true; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_literal_true(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_literal_true(this);
		}
	}

	[RuleVersion(0)]
	public Term_literal_trueContext term_literal_true() {
		Term_literal_trueContext _localctx = new Term_literal_trueContext(Context, State);
		EnterRule(_localctx, 38, RULE_term_literal_true);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_literal_falseContext : ParserRuleContext {
		public Term_literal_falseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_literal_false; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_literal_false(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_literal_false(this);
		}
	}

	[RuleVersion(0)]
	public Term_literal_falseContext term_literal_false() {
		Term_literal_falseContext _localctx = new Term_literal_falseContext(Context, State);
		EnterRule(_localctx, 40, RULE_term_literal_false);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprMethodCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprMethodCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprMethodCall(this);
		}
	}
	public partial class ExprOpAmpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(LinearParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpAmpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpAmp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpAmp(this);
		}
	}
	public partial class ExprOpBitwiseOrContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(LinearParser.BITWISE_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpBitwiseOrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpBitwiseOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpBitwiseOr(this);
		}
	}
	public partial class ExprLambdaReplacementContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ExprLambdaReplacementContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprLambdaReplacement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprLambdaReplacement(this);
		}
	}
	public partial class ExprUnboundDeserializeContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(LinearParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public ExprUnboundDeserializeContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprUnboundDeserialize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprUnboundDeserialize(this);
		}
	}
	public partial class ExprUnOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Un_opContext un_op() {
			return GetRuleContext<Un_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(LinearParser.WS, 0); }
		public ExprUnOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprUnOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprUnOp(this);
		}
	}
	public partial class ExprTermContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ExprTermContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprTerm(this);
		}
	}
	public partial class ExprRangeLengthContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprRangeLengthContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprRangeLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprRangeLength(this);
		}
	}
	public partial class ExprWrappedContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprWrappedContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprWrapped(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprWrapped(this);
		}
	}
	public partial class ExprOpMulDivContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_mul_divContext op_mul_div() {
			return GetRuleContext<Op_mul_divContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpMulDivContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpMulDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpMulDiv(this);
		}
	}
	public partial class ExprRangeEndContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprRangeEndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprRangeEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprRangeEnd(this);
		}
	}
	public partial class ExprSourceWithOffsetContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(LinearParser.BANG, 0); }
		public ExprSourceWithOffsetContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprSourceWithOffset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprSourceWithOffset(this);
		}
	}
	public partial class ExprArrayAccessContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprArrayAccessContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprArrayAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprArrayAccess(this);
		}
	}
	public partial class ExprOpAddSubContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_add_subContext op_add_sub() {
			return GetRuleContext<Op_add_subContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpAddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpAddSub(this);
		}
	}
	public partial class ExprDeserializeContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(LinearParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public ExprDeserializeContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprDeserialize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprDeserialize(this);
		}
	}
	public partial class ExprOpCaretContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(LinearParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpCaretContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpCaret(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpCaret(this);
		}
	}
	public partial class ExprMemberContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ExprMemberContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprMember(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				_localctx = new ExprMethodCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 288;
				Match(IDENTIFIER);
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 289;
					Match(WS);
					}
				}

				State = 292;
				Match(T__16);
				State = 294;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 293;
					Match(WS);
					}
					break;
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 283730089153920768L) != 0) {
					{
					State = 296;
					expr(0);
					}
				}

				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 299;
					Match(WS);
					}
				}

				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 302;
					Match(T__5);
					State = 304;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 303;
						Match(WS);
						}
					}

					State = 306;
					expr(0);
					State = 308;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 307;
						Match(WS);
						}
					}

					}
					}
					State = 314;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 315;
				Match(T__17);
				}
				break;
			case 2:
				{
				_localctx = new ExprLambdaReplacementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 316;
				Match(T__18);
				State = 317;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				_localctx = new ExprTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 318;
				term();
				}
				break;
			case 4:
				{
				_localctx = new ExprUnboundDeserializeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 319;
				Match(T__19);
				State = 320;
				expr(0);
				State = 322;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 321;
					Match(WS);
					}
					break;
				}
				State = 325;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 324;
					property_group();
					}
					break;
				}
				}
				break;
			case 5:
				{
				_localctx = new ExprDeserializeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 327;
				Match(IDENTIFIER);
				State = 328;
				Match(T__19);
				State = 329;
				expr(0);
				State = 331;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 330;
					Match(WS);
					}
					break;
				}
				State = 334;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 333;
					property_group();
					}
					break;
				}
				}
				break;
			case 6:
				{
				_localctx = new ExprRangeEndContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 336;
				Match(OPENSQ);
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 337;
					Match(WS);
					}
				}

				State = 340;
				expr(0);
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 341;
					Match(WS);
					}
				}

				State = 344;
				Match(T__20);
				State = 346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 345;
					Match(WS);
					}
				}

				State = 348;
				expr(0);
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 349;
					Match(WS);
					}
				}

				State = 352;
				Match(CLOSESQ);
				}
				break;
			case 7:
				{
				_localctx = new ExprRangeLengthContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 354;
				Match(OPENSQ);
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 355;
					Match(WS);
					}
				}

				State = 358;
				expr(0);
				State = 360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 359;
					Match(WS);
					}
				}

				State = 362;
				Match(T__5);
				State = 364;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 363;
					Match(WS);
					}
				}

				State = 366;
				expr(0);
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 367;
					Match(WS);
					}
				}

				State = 370;
				Match(CLOSESQ);
				}
				break;
			case 8:
				{
				_localctx = new ExprWrappedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 372;
				Match(T__16);
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 373;
					Match(WS);
					}
				}

				State = 376;
				expr(0);
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 377;
					Match(WS);
					}
				}

				State = 380;
				Match(T__17);
				}
				break;
			case 9:
				{
				_localctx = new ExprUnOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 382;
				un_op();
				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 383;
					Match(WS);
					}
				}

				State = 386;
				expr(6);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 456;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 454;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
					case 1:
						{
						_localctx = new ExprSourceWithOffsetContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 390;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 391;
						Match(BANG);
						State = 392;
						expr(10);
						}
						break;
					case 2:
						{
						_localctx = new ExprOpMulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 393;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 395;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 394;
							Match(WS);
							}
						}

						State = 397;
						op_mul_div();
						State = 399;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 398;
							Match(WS);
							}
						}

						State = 401;
						expr(6);
						}
						break;
					case 3:
						{
						_localctx = new ExprOpAddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 403;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 405;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 404;
							Match(WS);
							}
						}

						State = 407;
						op_add_sub();
						State = 409;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 408;
							Match(WS);
							}
						}

						State = 411;
						expr(5);
						}
						break;
					case 4:
						{
						_localctx = new ExprOpAmpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 413;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 415;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 414;
							Match(WS);
							}
						}

						State = 417;
						Match(AMP);
						State = 419;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 418;
							Match(WS);
							}
						}

						State = 421;
						expr(4);
						}
						break;
					case 5:
						{
						_localctx = new ExprOpCaretContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 422;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 424;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 423;
							Match(WS);
							}
						}

						State = 426;
						Match(CARET);
						State = 428;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 427;
							Match(WS);
							}
						}

						State = 430;
						expr(3);
						}
						break;
					case 6:
						{
						_localctx = new ExprOpBitwiseOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 431;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 433;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 432;
							Match(WS);
							}
						}

						State = 435;
						Match(BITWISE_OR);
						State = 437;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 436;
							Match(WS);
							}
						}

						State = 439;
						expr(2);
						}
						break;
					case 7:
						{
						_localctx = new ExprMemberContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 440;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 441;
						Match(T__21);
						State = 442;
						Match(IDENTIFIER);
						}
						break;
					case 8:
						{
						_localctx = new ExprArrayAccessContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 443;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 444;
						Match(OPENSQ);
						State = 446;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 445;
							Match(WS);
							}
						}

						State = 448;
						expr(0);
						State = 450;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 449;
							Match(WS);
							}
						}

						State = 452;
						Match(CLOSESQ);
						}
						break;
					}
					} 
				}
				State = 458;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Op_mul_divContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(LinearParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(LinearParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(LinearParser.PERCENT, 0); }
		public Op_mul_divContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_mul_div; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterOp_mul_div(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitOp_mul_div(this);
		}
	}

	[RuleVersion(0)]
	public Op_mul_divContext op_mul_div() {
		Op_mul_divContext _localctx = new Op_mul_divContext(Context, State);
		EnterRule(_localctx, 44, RULE_op_mul_div);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 120259084288L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_add_subContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LinearParser.MINUS, 0); }
		public Op_add_subContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_add_sub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterOp_add_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitOp_add_sub(this);
		}
	}

	[RuleVersion(0)]
	public Op_add_subContext op_add_sub() {
		Op_add_subContext _localctx = new Op_add_subContext(Context, State);
		EnterRule(_localctx, 46, RULE_op_add_sub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Un_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LinearParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(LinearParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(LinearParser.TILDE, 0); }
		public Un_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_un_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterUn_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitUn_op(this);
		}
	}

	[RuleVersion(0)]
	public Un_opContext un_op() {
		Un_opContext _localctx = new Un_opContext(Context, State);
		EnterRule(_localctx, 48, RULE_un_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 3311419785216L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(LinearParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(LinearParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(LinearParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(LinearParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(LinearParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(LinearParser.OP_NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(LinearParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(LinearParser.OP_GE, 0); }
		public Bool_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterBool_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitBool_op(this);
		}
	}

	[RuleVersion(0)]
	public Bool_opContext bool_op() {
		Bool_opContext _localctx = new Bool_opContext(Context, State);
		EnterRule(_localctx, 50, RULE_bool_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 4459619162259456L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_sizeContext : ParserRuleContext {
		public Struct_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_size; } }
	 
		public Struct_sizeContext() { }
		public virtual void CopyFrom(Struct_sizeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructSizeIntContext : Struct_sizeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(LinearParser.INTEGER_LITERAL, 0); }
		public StructSizeIntContext(Struct_sizeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStructSizeInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStructSizeInt(this);
		}
	}
	public partial class StrictSizeHexContext : Struct_sizeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(LinearParser.HEX_INTEGER_LITERAL, 0); }
		public StrictSizeHexContext(Struct_sizeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStrictSizeHex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStrictSizeHex(this);
		}
	}

	[RuleVersion(0)]
	public Struct_sizeContext struct_size() {
		Struct_sizeContext _localctx = new Struct_sizeContext(Context, State);
		EnterRule(_localctx, 52, RULE_struct_size);
		try {
			State = 469;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				_localctx = new StructSizeIntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 467;
				Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				_localctx = new StrictSizeHexContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 468;
				Match(HEX_INTEGER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermLiteralFalseContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_literal_falseContext term_literal_false() {
			return GetRuleContext<Term_literal_falseContext>(0);
		}
		public TermLiteralFalseContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermLiteralFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermLiteralFalse(this);
		}
	}
	public partial class TermCharContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(LinearParser.CHARACTER_LITERAL, 0); }
		public TermCharContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermChar(this);
		}
	}
	public partial class TermRepUContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_replacement_uContext term_replacement_u() {
			return GetRuleContext<Term_replacement_uContext>(0);
		}
		public TermRepUContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepU(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepU(this);
		}
	}
	public partial class TermRealContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(LinearParser.REAL_LITERAL, 0); }
		public TermRealContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermReal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermReal(this);
		}
	}
	public partial class TermLiteralTrueContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_literal_trueContext term_literal_true() {
			return GetRuleContext<Term_literal_trueContext>(0);
		}
		public TermLiteralTrueContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermLiteralTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermLiteralTrue(this);
		}
	}
	public partial class TermHexContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(LinearParser.HEX_INTEGER_LITERAL, 0); }
		public TermHexContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermHex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermHex(this);
		}
	}
	public partial class TermRepLengthContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_replacement_lengthContext term_replacement_length() {
			return GetRuleContext<Term_replacement_lengthContext>(0);
		}
		public TermRepLengthContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepLength(this);
		}
	}
	public partial class TermRepAContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_replacement_aContext term_replacement_a() {
			return GetRuleContext<Term_replacement_aContext>(0);
		}
		public TermRepAContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepA(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepA(this);
		}
	}
	public partial class TermRepPContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_replacement_pContext term_replacement_p() {
			return GetRuleContext<Term_replacement_pContext>(0);
		}
		public TermRepPContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepP(this);
		}
	}
	public partial class TermIdentifierContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public TermIdentifierContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermIdentifier(this);
		}
	}
	public partial class TermIntContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(LinearParser.INTEGER_LITERAL, 0); }
		public TermIntContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermInt(this);
		}
	}
	public partial class TermStringContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_STRING() { return GetToken(LinearParser.REGULAR_STRING, 0); }
		public TermStringContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermString(this);
		}
	}
	public partial class TermStringVerbContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBATIM_STRING() { return GetToken(LinearParser.VERBATIM_STRING, 0); }
		public TermStringVerbContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermStringVerb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermStringVerb(this);
		}
	}
	public partial class TermRepIContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_replacement_iContext term_replacement_i() {
			return GetRuleContext<Term_replacement_iContext>(0);
		}
		public TermRepIContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepI(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepI(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 54, RULE_term);
		try {
			State = 485;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				_localctx = new TermRepLengthContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 471;
				term_replacement_length();
				}
				break;
			case T__8:
				_localctx = new TermRepAContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 472;
				term_replacement_a();
				}
				break;
			case T__9:
				_localctx = new TermRepIContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 473;
				term_replacement_i();
				}
				break;
			case T__10:
			case T__11:
				_localctx = new TermRepPContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 474;
				term_replacement_p();
				}
				break;
			case T__12:
			case T__13:
				_localctx = new TermRepUContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 475;
				term_replacement_u();
				}
				break;
			case T__14:
				_localctx = new TermLiteralTrueContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 476;
				term_literal_true();
				}
				break;
			case T__15:
				_localctx = new TermLiteralFalseContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 477;
				term_literal_false();
				}
				break;
			case IDENTIFIER:
				_localctx = new TermIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 478;
				Match(IDENTIFIER);
				}
				break;
			case INTEGER_LITERAL:
				_localctx = new TermIntContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 479;
				Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				_localctx = new TermHexContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 480;
				Match(HEX_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				_localctx = new TermRealContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 481;
				Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				_localctx = new TermCharContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 482;
				Match(CHARACTER_LITERAL);
				}
				break;
			case REGULAR_STRING:
				_localctx = new TermStringContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 483;
				Match(REGULAR_STRING);
				}
				break;
			case VERBATIM_STRING:
				_localctx = new TermStringVerbContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 484;
				Match(VERBATIM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 21: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		case 6: return Precpred(Context, 10);
		case 7: return Precpred(Context, 8);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,57,488,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,3,0,58,
		8,0,1,0,1,0,3,0,62,8,0,5,0,64,8,0,10,0,12,0,67,9,0,1,0,1,0,1,1,1,1,1,1,
		3,1,74,8,1,1,2,1,2,3,2,78,8,2,1,2,3,2,81,8,2,1,2,3,2,84,8,2,1,2,1,2,3,
		2,88,8,2,1,2,1,2,3,2,92,8,2,5,2,94,8,2,10,2,12,2,97,9,2,1,2,1,2,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,111,8,3,1,4,1,4,1,4,1,4,1,4,1,4,
		3,4,119,8,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,129,8,5,1,5,1,5,1,6,1,
		6,1,6,1,6,3,6,137,8,6,1,6,1,6,1,7,1,7,1,7,1,7,3,7,145,8,7,1,7,1,7,1,8,
		1,8,1,8,1,8,3,8,153,8,8,1,8,1,8,1,9,1,9,1,9,3,9,160,8,9,1,9,1,9,3,9,164,
		8,9,1,9,1,9,3,9,168,8,9,1,9,1,9,3,9,172,8,9,1,9,1,9,3,9,176,8,9,1,9,3,
		9,179,8,9,1,9,1,9,1,10,1,10,1,10,3,10,186,8,10,1,10,1,10,3,10,190,8,10,
		1,10,1,10,3,10,194,8,10,1,10,1,10,3,10,198,8,10,1,10,3,10,201,8,10,1,10,
		1,10,1,10,1,10,3,10,207,8,10,1,10,1,10,1,10,1,10,3,10,213,8,10,1,10,1,
		10,3,10,217,8,10,1,10,1,10,3,10,221,8,10,1,10,3,10,224,8,10,1,10,1,10,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,236,8,11,1,11,3,11,239,8,
		11,1,11,1,11,1,12,1,12,3,12,245,8,12,1,12,5,12,248,8,12,10,12,12,12,251,
		9,12,1,12,3,12,254,8,12,1,12,1,12,3,12,258,8,12,1,13,1,13,3,13,262,8,13,
		1,13,1,13,3,13,266,8,13,1,13,1,13,3,13,270,8,13,1,13,1,13,1,14,1,14,1,
		15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,
		21,3,21,291,8,21,1,21,1,21,3,21,295,8,21,1,21,3,21,298,8,21,1,21,3,21,
		301,8,21,1,21,1,21,3,21,305,8,21,1,21,1,21,3,21,309,8,21,5,21,311,8,21,
		10,21,12,21,314,9,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,323,8,21,
		1,21,3,21,326,8,21,1,21,1,21,1,21,1,21,3,21,332,8,21,1,21,3,21,335,8,21,
		1,21,1,21,3,21,339,8,21,1,21,1,21,3,21,343,8,21,1,21,1,21,3,21,347,8,21,
		1,21,1,21,3,21,351,8,21,1,21,1,21,1,21,1,21,3,21,357,8,21,1,21,1,21,3,
		21,361,8,21,1,21,1,21,3,21,365,8,21,1,21,1,21,3,21,369,8,21,1,21,1,21,
		1,21,1,21,3,21,375,8,21,1,21,1,21,3,21,379,8,21,1,21,1,21,1,21,1,21,3,
		21,385,8,21,1,21,1,21,3,21,389,8,21,1,21,1,21,1,21,1,21,1,21,3,21,396,
		8,21,1,21,1,21,3,21,400,8,21,1,21,1,21,1,21,1,21,3,21,406,8,21,1,21,1,
		21,3,21,410,8,21,1,21,1,21,1,21,1,21,3,21,416,8,21,1,21,1,21,3,21,420,
		8,21,1,21,1,21,1,21,3,21,425,8,21,1,21,1,21,3,21,429,8,21,1,21,1,21,1,
		21,3,21,434,8,21,1,21,1,21,3,21,438,8,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,3,21,447,8,21,1,21,1,21,3,21,451,8,21,1,21,1,21,5,21,455,8,21,10,
		21,12,21,458,9,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,3,
		26,470,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
		1,27,1,27,3,27,486,8,27,1,27,0,1,42,28,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,0,6,1,0,11,12,1,0,13,14,
		1,0,34,36,1,0,32,33,2,0,32,33,40,41,2,0,43,44,46,51,573,0,57,1,0,0,0,2,
		73,1,0,0,0,4,75,1,0,0,0,6,110,1,0,0,0,8,112,1,0,0,0,10,122,1,0,0,0,12,
		132,1,0,0,0,14,140,1,0,0,0,16,148,1,0,0,0,18,156,1,0,0,0,20,182,1,0,0,
		0,22,227,1,0,0,0,24,242,1,0,0,0,26,259,1,0,0,0,28,273,1,0,0,0,30,275,1,
		0,0,0,32,277,1,0,0,0,34,279,1,0,0,0,36,281,1,0,0,0,38,283,1,0,0,0,40,285,
		1,0,0,0,42,388,1,0,0,0,44,459,1,0,0,0,46,461,1,0,0,0,48,463,1,0,0,0,50,
		465,1,0,0,0,52,469,1,0,0,0,54,485,1,0,0,0,56,58,5,31,0,0,57,56,1,0,0,0,
		57,58,1,0,0,0,58,65,1,0,0,0,59,61,3,2,1,0,60,62,5,31,0,0,61,60,1,0,0,0,
		61,62,1,0,0,0,62,64,1,0,0,0,63,59,1,0,0,0,64,67,1,0,0,0,65,63,1,0,0,0,
		65,66,1,0,0,0,66,68,1,0,0,0,67,65,1,0,0,0,68,69,5,0,0,1,69,1,1,0,0,0,70,
		74,3,4,2,0,71,74,5,23,0,0,72,74,5,24,0,0,73,70,1,0,0,0,73,71,1,0,0,0,73,
		72,1,0,0,0,74,3,1,0,0,0,75,77,5,30,0,0,76,78,5,31,0,0,77,76,1,0,0,0,77,
		78,1,0,0,0,78,80,1,0,0,0,79,81,3,52,26,0,80,79,1,0,0,0,80,81,1,0,0,0,81,
		83,1,0,0,0,82,84,5,31,0,0,83,82,1,0,0,0,83,84,1,0,0,0,84,85,1,0,0,0,85,
		87,5,25,0,0,86,88,5,31,0,0,87,86,1,0,0,0,87,88,1,0,0,0,88,95,1,0,0,0,89,
		91,3,6,3,0,90,92,5,31,0,0,91,90,1,0,0,0,91,92,1,0,0,0,92,94,1,0,0,0,93,
		89,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,98,1,0,0,0,97,
		95,1,0,0,0,98,99,5,26,0,0,99,5,1,0,0,0,100,111,3,8,4,0,101,111,3,10,5,
		0,102,111,3,12,6,0,103,111,3,14,7,0,104,111,3,16,8,0,105,111,3,18,9,0,
		106,111,3,20,10,0,107,111,3,22,11,0,108,111,5,23,0,0,109,111,5,24,0,0,
		110,100,1,0,0,0,110,101,1,0,0,0,110,102,1,0,0,0,110,103,1,0,0,0,110,104,
		1,0,0,0,110,105,1,0,0,0,110,106,1,0,0,0,110,107,1,0,0,0,110,108,1,0,0,
		0,110,109,1,0,0,0,111,7,1,0,0,0,112,113,5,30,0,0,113,114,5,31,0,0,114,
		115,5,30,0,0,115,116,5,31,0,0,116,118,3,42,21,0,117,119,5,31,0,0,118,117,
		1,0,0,0,118,119,1,0,0,0,119,120,1,0,0,0,120,121,5,29,0,0,121,9,1,0,0,0,
		122,123,5,1,0,0,123,124,5,31,0,0,124,125,5,30,0,0,125,126,5,31,0,0,126,
		128,3,42,21,0,127,129,5,31,0,0,128,127,1,0,0,0,128,129,1,0,0,0,129,130,
		1,0,0,0,130,131,5,29,0,0,131,11,1,0,0,0,132,133,5,2,0,0,133,134,5,31,0,
		0,134,136,3,42,21,0,135,137,5,31,0,0,136,135,1,0,0,0,136,137,1,0,0,0,137,
		138,1,0,0,0,138,139,5,29,0,0,139,13,1,0,0,0,140,141,5,3,0,0,141,142,5,
		31,0,0,142,144,3,42,21,0,143,145,5,31,0,0,144,143,1,0,0,0,144,145,1,0,
		0,0,145,146,1,0,0,0,146,147,5,29,0,0,147,15,1,0,0,0,148,149,5,4,0,0,149,
		150,5,31,0,0,150,152,3,42,21,0,151,153,5,31,0,0,152,151,1,0,0,0,152,153,
		1,0,0,0,153,154,1,0,0,0,154,155,5,29,0,0,155,17,1,0,0,0,156,157,5,30,0,
		0,157,159,5,27,0,0,158,160,5,31,0,0,159,158,1,0,0,0,159,160,1,0,0,0,160,
		161,1,0,0,0,161,163,3,42,21,0,162,164,5,31,0,0,163,162,1,0,0,0,163,164,
		1,0,0,0,164,165,1,0,0,0,165,167,5,28,0,0,166,168,5,31,0,0,167,166,1,0,
		0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,171,5,30,0,0,170,172,5,31,0,0,
		171,170,1,0,0,0,171,172,1,0,0,0,172,173,1,0,0,0,173,175,3,42,21,0,174,
		176,5,31,0,0,175,174,1,0,0,0,175,176,1,0,0,0,176,178,1,0,0,0,177,179,3,
		24,12,0,178,177,1,0,0,0,178,179,1,0,0,0,179,180,1,0,0,0,180,181,5,29,0,
		0,181,19,1,0,0,0,182,183,5,30,0,0,183,185,5,27,0,0,184,186,5,31,0,0,185,
		184,1,0,0,0,185,186,1,0,0,0,186,187,1,0,0,0,187,189,3,42,21,0,188,190,
		5,31,0,0,189,188,1,0,0,0,189,190,1,0,0,0,190,191,1,0,0,0,191,193,5,28,
		0,0,192,194,5,31,0,0,193,192,1,0,0,0,193,194,1,0,0,0,194,195,1,0,0,0,195,
		197,5,5,0,0,196,198,5,32,0,0,197,196,1,0,0,0,197,198,1,0,0,0,198,200,1,
		0,0,0,199,201,5,31,0,0,200,199,1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,
		202,203,5,30,0,0,203,204,5,27,0,0,204,206,5,28,0,0,205,207,5,31,0,0,206,
		205,1,0,0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,209,5,30,0,0,209,210,5,
		31,0,0,210,212,3,42,21,0,211,213,5,31,0,0,212,211,1,0,0,0,212,213,1,0,
		0,0,213,214,1,0,0,0,214,216,5,6,0,0,215,217,5,31,0,0,216,215,1,0,0,0,216,
		217,1,0,0,0,217,218,1,0,0,0,218,220,3,42,21,0,219,221,5,31,0,0,220,219,
		1,0,0,0,220,221,1,0,0,0,221,223,1,0,0,0,222,224,3,24,12,0,223,222,1,0,
		0,0,223,224,1,0,0,0,224,225,1,0,0,0,225,226,5,29,0,0,226,21,1,0,0,0,227,
		228,5,7,0,0,228,229,5,31,0,0,229,230,5,30,0,0,230,231,5,31,0,0,231,232,
		3,42,21,0,232,233,5,31,0,0,233,235,3,42,21,0,234,236,5,31,0,0,235,234,
		1,0,0,0,235,236,1,0,0,0,236,238,1,0,0,0,237,239,3,24,12,0,238,237,1,0,
		0,0,238,239,1,0,0,0,239,240,1,0,0,0,240,241,5,29,0,0,241,23,1,0,0,0,242,
		249,5,25,0,0,243,245,5,31,0,0,244,243,1,0,0,0,244,245,1,0,0,0,245,246,
		1,0,0,0,246,248,3,26,13,0,247,244,1,0,0,0,248,251,1,0,0,0,249,247,1,0,
		0,0,249,250,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,252,254,5,31,0,0,253,
		252,1,0,0,0,253,254,1,0,0,0,254,255,1,0,0,0,255,257,5,26,0,0,256,258,5,
		31,0,0,257,256,1,0,0,0,257,258,1,0,0,0,258,25,1,0,0,0,259,261,5,30,0,0,
		260,262,5,31,0,0,261,260,1,0,0,0,261,262,1,0,0,0,262,263,1,0,0,0,263,265,
		5,42,0,0,264,266,5,31,0,0,265,264,1,0,0,0,265,266,1,0,0,0,266,267,1,0,
		0,0,267,269,3,42,21,0,268,270,5,31,0,0,269,268,1,0,0,0,269,270,1,0,0,0,
		270,271,1,0,0,0,271,272,5,29,0,0,272,27,1,0,0,0,273,274,5,8,0,0,274,29,
		1,0,0,0,275,276,5,9,0,0,276,31,1,0,0,0,277,278,5,10,0,0,278,33,1,0,0,0,
		279,280,7,0,0,0,280,35,1,0,0,0,281,282,7,1,0,0,282,37,1,0,0,0,283,284,
		5,15,0,0,284,39,1,0,0,0,285,286,5,16,0,0,286,41,1,0,0,0,287,288,6,21,-1,
		0,288,290,5,30,0,0,289,291,5,31,0,0,290,289,1,0,0,0,290,291,1,0,0,0,291,
		292,1,0,0,0,292,294,5,17,0,0,293,295,5,31,0,0,294,293,1,0,0,0,294,295,
		1,0,0,0,295,297,1,0,0,0,296,298,3,42,21,0,297,296,1,0,0,0,297,298,1,0,
		0,0,298,300,1,0,0,0,299,301,5,31,0,0,300,299,1,0,0,0,300,301,1,0,0,0,301,
		312,1,0,0,0,302,304,5,6,0,0,303,305,5,31,0,0,304,303,1,0,0,0,304,305,1,
		0,0,0,305,306,1,0,0,0,306,308,3,42,21,0,307,309,5,31,0,0,308,307,1,0,0,
		0,308,309,1,0,0,0,309,311,1,0,0,0,310,302,1,0,0,0,311,314,1,0,0,0,312,
		310,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,314,312,1,0,0,0,315,389,5,
		18,0,0,316,317,5,19,0,0,317,389,5,30,0,0,318,389,3,54,27,0,319,320,5,20,
		0,0,320,322,3,42,21,0,321,323,5,31,0,0,322,321,1,0,0,0,322,323,1,0,0,0,
		323,325,1,0,0,0,324,326,3,24,12,0,325,324,1,0,0,0,325,326,1,0,0,0,326,
		389,1,0,0,0,327,328,5,30,0,0,328,329,5,20,0,0,329,331,3,42,21,0,330,332,
		5,31,0,0,331,330,1,0,0,0,331,332,1,0,0,0,332,334,1,0,0,0,333,335,3,24,
		12,0,334,333,1,0,0,0,334,335,1,0,0,0,335,389,1,0,0,0,336,338,5,27,0,0,
		337,339,5,31,0,0,338,337,1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,342,
		3,42,21,0,341,343,5,31,0,0,342,341,1,0,0,0,342,343,1,0,0,0,343,344,1,0,
		0,0,344,346,5,21,0,0,345,347,5,31,0,0,346,345,1,0,0,0,346,347,1,0,0,0,
		347,348,1,0,0,0,348,350,3,42,21,0,349,351,5,31,0,0,350,349,1,0,0,0,350,
		351,1,0,0,0,351,352,1,0,0,0,352,353,5,28,0,0,353,389,1,0,0,0,354,356,5,
		27,0,0,355,357,5,31,0,0,356,355,1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,
		0,358,360,3,42,21,0,359,361,5,31,0,0,360,359,1,0,0,0,360,361,1,0,0,0,361,
		362,1,0,0,0,362,364,5,6,0,0,363,365,5,31,0,0,364,363,1,0,0,0,364,365,1,
		0,0,0,365,366,1,0,0,0,366,368,3,42,21,0,367,369,5,31,0,0,368,367,1,0,0,
		0,368,369,1,0,0,0,369,370,1,0,0,0,370,371,5,28,0,0,371,389,1,0,0,0,372,
		374,5,17,0,0,373,375,5,31,0,0,374,373,1,0,0,0,374,375,1,0,0,0,375,376,
		1,0,0,0,376,378,3,42,21,0,377,379,5,31,0,0,378,377,1,0,0,0,378,379,1,0,
		0,0,379,380,1,0,0,0,380,381,5,18,0,0,381,389,1,0,0,0,382,384,3,48,24,0,
		383,385,5,31,0,0,384,383,1,0,0,0,384,385,1,0,0,0,385,386,1,0,0,0,386,387,
		3,42,21,6,387,389,1,0,0,0,388,287,1,0,0,0,388,316,1,0,0,0,388,318,1,0,
		0,0,388,319,1,0,0,0,388,327,1,0,0,0,388,336,1,0,0,0,388,354,1,0,0,0,388,
		372,1,0,0,0,388,382,1,0,0,0,389,456,1,0,0,0,390,391,10,9,0,0,391,392,5,
		40,0,0,392,455,3,42,21,10,393,395,10,5,0,0,394,396,5,31,0,0,395,394,1,
		0,0,0,395,396,1,0,0,0,396,397,1,0,0,0,397,399,3,44,22,0,398,400,5,31,0,
		0,399,398,1,0,0,0,399,400,1,0,0,0,400,401,1,0,0,0,401,402,3,42,21,6,402,
		455,1,0,0,0,403,405,10,4,0,0,404,406,5,31,0,0,405,404,1,0,0,0,405,406,
		1,0,0,0,406,407,1,0,0,0,407,409,3,46,23,0,408,410,5,31,0,0,409,408,1,0,
		0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,412,3,42,21,5,412,455,1,0,0,0,
		413,415,10,3,0,0,414,416,5,31,0,0,415,414,1,0,0,0,415,416,1,0,0,0,416,
		417,1,0,0,0,417,419,5,37,0,0,418,420,5,31,0,0,419,418,1,0,0,0,419,420,
		1,0,0,0,420,421,1,0,0,0,421,455,3,42,21,4,422,424,10,2,0,0,423,425,5,31,
		0,0,424,423,1,0,0,0,424,425,1,0,0,0,425,426,1,0,0,0,426,428,5,39,0,0,427,
		429,5,31,0,0,428,427,1,0,0,0,428,429,1,0,0,0,429,430,1,0,0,0,430,455,3,
		42,21,3,431,433,10,1,0,0,432,434,5,31,0,0,433,432,1,0,0,0,433,434,1,0,
		0,0,434,435,1,0,0,0,435,437,5,38,0,0,436,438,5,31,0,0,437,436,1,0,0,0,
		437,438,1,0,0,0,438,439,1,0,0,0,439,455,3,42,21,2,440,441,10,10,0,0,441,
		442,5,22,0,0,442,455,5,30,0,0,443,444,10,8,0,0,444,446,5,27,0,0,445,447,
		5,31,0,0,446,445,1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,0,448,450,3,42,
		21,0,449,451,5,31,0,0,450,449,1,0,0,0,450,451,1,0,0,0,451,452,1,0,0,0,
		452,453,5,28,0,0,453,455,1,0,0,0,454,390,1,0,0,0,454,393,1,0,0,0,454,403,
		1,0,0,0,454,413,1,0,0,0,454,422,1,0,0,0,454,431,1,0,0,0,454,440,1,0,0,
		0,454,443,1,0,0,0,455,458,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,
		43,1,0,0,0,458,456,1,0,0,0,459,460,7,2,0,0,460,45,1,0,0,0,461,462,7,3,
		0,0,462,47,1,0,0,0,463,464,7,4,0,0,464,49,1,0,0,0,465,466,7,5,0,0,466,
		51,1,0,0,0,467,470,5,52,0,0,468,470,5,53,0,0,469,467,1,0,0,0,469,468,1,
		0,0,0,470,53,1,0,0,0,471,486,3,28,14,0,472,486,3,30,15,0,473,486,3,32,
		16,0,474,486,3,34,17,0,475,486,3,36,18,0,476,486,3,38,19,0,477,486,3,40,
		20,0,478,486,5,30,0,0,479,486,5,52,0,0,480,486,5,53,0,0,481,486,5,54,0,
		0,482,486,5,55,0,0,483,486,5,56,0,0,484,486,5,57,0,0,485,471,1,0,0,0,485,
		472,1,0,0,0,485,473,1,0,0,0,485,474,1,0,0,0,485,475,1,0,0,0,485,476,1,
		0,0,0,485,477,1,0,0,0,485,478,1,0,0,0,485,479,1,0,0,0,485,480,1,0,0,0,
		485,481,1,0,0,0,485,482,1,0,0,0,485,483,1,0,0,0,485,484,1,0,0,0,486,55,
		1,0,0,0,80,57,61,65,73,77,80,83,87,91,95,110,118,128,136,144,152,159,163,
		167,171,175,178,185,189,193,197,200,206,212,216,220,223,235,238,244,249,
		253,257,261,265,269,290,294,297,300,304,308,312,322,325,331,334,338,342,
		346,350,356,360,364,368,374,378,384,388,395,399,405,409,415,419,424,428,
		433,437,446,450,454,456,469,485
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
