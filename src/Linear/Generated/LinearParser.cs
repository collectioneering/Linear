//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\black\Documents\GitHub\Linear\scripts\\..\Linear.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class LinearParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, OPEN=16, CLOSE=17, 
		OPENSQ=18, CLOSESQ=19, ENDL=20, IDENTIFIER=21, WS=22, PLUS=23, MINUS=24, 
		STAR=25, DIV=26, PERCENT=27, AMP=28, BITWISE_OR=29, CARET=30, BANG=31, 
		TILDE=32, ASSIGNMENT=33, LT=34, GT=35, INTERR=36, OP_AND=37, OP_OR=38, 
		OP_EQ=39, OP_NE=40, OP_LE=41, OP_GE=42, INTEGER_LITERAL=43, HEX_INTEGER_LITERAL=44, 
		REAL_LITERAL=45, CHARACTER_LITERAL=46, REGULAR_STRING=47, VERBATIM_STRING=48;
	public const int
		RULE_compilation_unit = 0, RULE_struct = 1, RULE_struct_statement = 2, 
		RULE_struct_statement_define = 3, RULE_struct_statement_define_ranged = 4, 
		RULE_struct_statement_define_array = 5, RULE_struct_statement_define_array_indirect = 6, 
		RULE_struct_statement_output = 7, RULE_struct_statement_comment = 8, RULE_range_end = 9, 
		RULE_range_length = 10, RULE_property_group = 11, RULE_property_statement = 12, 
		RULE_term_replacement_length = 13, RULE_term_replacement_i = 14, RULE_term_replacement_p = 15, 
		RULE_term_replacement_u = 16, RULE_expr_member = 17, RULE_expr_array_access = 18, 
		RULE_expr_un_op = 19, RULE_expr = 20, RULE_op = 21, RULE_un_op = 22, RULE_bool_op = 23, 
		RULE_term = 24;
	public static readonly string[] ruleNames = {
		"compilation_unit", "struct", "struct_statement", "struct_statement_define", 
		"struct_statement_define_ranged", "struct_statement_define_array", "struct_statement_define_array_indirect", 
		"struct_statement_output", "struct_statement_comment", "range_end", "range_length", 
		"property_group", "property_statement", "term_replacement_length", "term_replacement_i", 
		"term_replacement_p", "term_replacement_u", "expr_member", "expr_array_access", 
		"expr_un_op", "expr", "op", "un_op", "bool_op", "term"
	};

	private static readonly string[] _LiteralNames = {
		null, "'->'", "'output'", "'//'", "','", "'end:'", "'length:'", "'$length'", 
		"'$i'", "'$p'", "'$parent'", "'$u'", "'$unique'", "'.'", "'('", "')'", 
		"'{'", "'}'", "'['", "']'", "';'", null, null, "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'?'", 
		"'&&'", "'||'", "'=='", "'!='", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "OPEN", "CLOSE", "OPENSQ", "CLOSESQ", "ENDL", 
		"IDENTIFIER", "WS", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", "AMP", 
		"BITWISE_OR", "CARET", "BANG", "TILDE", "ASSIGNMENT", "LT", "GT", "INTERR", 
		"OP_AND", "OP_OR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "INTEGER_LITERAL", 
		"HEX_INTEGER_LITERAL", "REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", 
		"VERBATIM_STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Linear.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LinearParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LinearParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LinearParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(LinearParser.Eof, 0); }
		public StructContext[] @struct() {
			return GetRuleContexts<StructContext>();
		}
		public StructContext @struct(int i) {
			return GetRuleContext<StructContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER || _la==WS) {
				{
				{
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 50; Match(WS);
					}
				}

				State = 53; @struct();
				State = 55;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 54; Match(WS);
					}
					break;
				}
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 62; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ITerminalNode OPEN() { return GetToken(LinearParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(LinearParser.CLOSE, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Struct_statementContext[] struct_statement() {
			return GetRuleContexts<Struct_statementContext>();
		}
		public Struct_statementContext struct_statement(int i) {
			return GetRuleContext<Struct_statementContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 2, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; Match(IDENTIFIER);
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 65; Match(WS);
				}
			}

			State = 68; Match(OPEN);
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 69; Match(WS);
				}
			}

			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 72; struct_statement();
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 73; Match(WS);
					}
				}

				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 81; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statementContext : ParserRuleContext {
		public Struct_statement_defineContext struct_statement_define() {
			return GetRuleContext<Struct_statement_defineContext>(0);
		}
		public Struct_statement_define_rangedContext struct_statement_define_ranged() {
			return GetRuleContext<Struct_statement_define_rangedContext>(0);
		}
		public Struct_statement_define_arrayContext struct_statement_define_array() {
			return GetRuleContext<Struct_statement_define_arrayContext>(0);
		}
		public Struct_statement_define_array_indirectContext struct_statement_define_array_indirect() {
			return GetRuleContext<Struct_statement_define_array_indirectContext>(0);
		}
		public Struct_statement_outputContext struct_statement_output() {
			return GetRuleContext<Struct_statement_outputContext>(0);
		}
		public Struct_statement_commentContext struct_statement_comment() {
			return GetRuleContext<Struct_statement_commentContext>(0);
		}
		public Struct_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statementContext struct_statement() {
		Struct_statementContext _localctx = new Struct_statementContext(Context, State);
		EnterRule(_localctx, 4, RULE_struct_statement);
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83; struct_statement_define();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; struct_statement_define_ranged();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 85; struct_statement_define_array();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 86; struct_statement_define_array_indirect();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 87; struct_statement_output();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 88; struct_statement_comment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_defineContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_defineContext struct_statement_define() {
		Struct_statement_defineContext _localctx = new Struct_statement_defineContext(Context, State);
		EnterRule(_localctx, 6, RULE_struct_statement_define);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(IDENTIFIER);
			State = 92; Match(WS);
			State = 93; Match(IDENTIFIER);
			State = 94; Match(WS);
			State = 95; expr(0);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 96; Match(WS);
				}
			}

			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 99; property_group();
				}
			}

			State = 102; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_rangedContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Range_endContext range_end() {
			return GetRuleContext<Range_endContext>(0);
		}
		public Range_lengthContext range_length() {
			return GetRuleContext<Range_lengthContext>(0);
		}
		public Struct_statement_define_rangedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_ranged; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_ranged(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_ranged(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_rangedContext struct_statement_define_ranged() {
		Struct_statement_define_rangedContext _localctx = new Struct_statement_define_rangedContext(Context, State);
		EnterRule(_localctx, 8, RULE_struct_statement_define_ranged);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(IDENTIFIER);
			State = 105; Match(WS);
			State = 106; Match(IDENTIFIER);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 107; Match(WS);
				}
			}

			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 110; range_end();
				}
				break;
			case 2:
				{
				State = 111; range_length();
				}
				break;
			}
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 114; Match(WS);
				}
			}

			State = 117; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_arrayContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_define_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_array(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_array(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_arrayContext struct_statement_define_array() {
		Struct_statement_define_arrayContext _localctx = new Struct_statement_define_arrayContext(Context, State);
		EnterRule(_localctx, 10, RULE_struct_statement_define_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(IDENTIFIER);
			State = 120; Match(OPENSQ);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 121; Match(WS);
				}
			}

			State = 124; expr(0);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 125; Match(WS);
				}
			}

			State = 128; Match(CLOSESQ);
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 129; Match(WS);
				}
			}

			State = 132; Match(IDENTIFIER);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 133; Match(WS);
				}
			}

			State = 136; expr(0);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 137; Match(WS);
				}
			}

			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 140; property_group();
				}
			}

			State = 143; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_array_indirectContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		public ITerminalNode[] OPENSQ() { return GetTokens(LinearParser.OPENSQ); }
		public ITerminalNode OPENSQ(int i) {
			return GetToken(LinearParser.OPENSQ, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] CLOSESQ() { return GetTokens(LinearParser.CLOSESQ); }
		public ITerminalNode CLOSESQ(int i) {
			return GetToken(LinearParser.CLOSESQ, i);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_define_array_indirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_array_indirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_array_indirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_array_indirect(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_array_indirectContext struct_statement_define_array_indirect() {
		Struct_statement_define_array_indirectContext _localctx = new Struct_statement_define_array_indirectContext(Context, State);
		EnterRule(_localctx, 12, RULE_struct_statement_define_array_indirect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(IDENTIFIER);
			State = 146; Match(OPENSQ);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 147; Match(WS);
				}
			}

			State = 150; expr(0);
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 151; Match(WS);
				}
			}

			State = 154; Match(CLOSESQ);
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 155; Match(WS);
				}
			}

			State = 158; Match(T__0);
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS) {
				{
				State = 159; Match(PLUS);
				}
			}

			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 162; Match(WS);
				}
			}

			State = 165; Match(IDENTIFIER);
			State = 166; Match(OPENSQ);
			State = 167; Match(CLOSESQ);
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 168; Match(WS);
				}
			}

			State = 171; Match(IDENTIFIER);
			State = 172; Match(WS);
			State = 173; expr(0);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 174; Match(WS);
				}
			}

			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 177; property_group();
				}
			}

			State = 180; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_outputContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_outputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_output; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_output(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_output(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_outputContext struct_statement_output() {
		Struct_statement_outputContext _localctx = new Struct_statement_outputContext(Context, State);
		EnterRule(_localctx, 14, RULE_struct_statement_output);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(T__1);
			State = 183; Match(WS);
			State = 184; Match(IDENTIFIER);
			State = 185; Match(WS);
			State = 186; Match(IDENTIFIER);
			State = 187; Match(WS);
			State = 188; expr(0);
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 189; Match(WS);
				}
			}

			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 192; property_group();
				}
			}

			State = 195; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_commentContext : ParserRuleContext {
		public ITerminalNode[] ENDL() { return GetTokens(LinearParser.ENDL); }
		public ITerminalNode ENDL(int i) {
			return GetToken(LinearParser.ENDL, i);
		}
		public Struct_statement_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_comment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_comment(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_commentContext struct_statement_comment() {
		Struct_statement_commentContext _localctx = new Struct_statement_commentContext(Context, State);
		EnterRule(_localctx, 16, RULE_struct_statement_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(T__2);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << OPEN) | (1L << CLOSE) | (1L << OPENSQ) | (1L << CLOSESQ) | (1L << IDENTIFIER) | (1L << WS) | (1L << PLUS) | (1L << MINUS) | (1L << STAR) | (1L << DIV) | (1L << PERCENT) | (1L << AMP) | (1L << BITWISE_OR) | (1L << CARET) | (1L << BANG) | (1L << TILDE) | (1L << ASSIGNMENT) | (1L << LT) | (1L << GT) | (1L << INTERR) | (1L << OP_AND) | (1L << OP_OR) | (1L << OP_EQ) | (1L << OP_NE) | (1L << OP_LE) | (1L << OP_GE) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << VERBATIM_STRING))) != 0)) {
				{
				{
				State = 198;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==ENDL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 204; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_endContext : ParserRuleContext {
		public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Range_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterRange_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitRange_end(this);
		}
	}

	[RuleVersion(0)]
	public Range_endContext range_end() {
		Range_endContext _localctx = new Range_endContext(Context, State);
		EnterRule(_localctx, 18, RULE_range_end);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; Match(OPENSQ);
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 207; Match(WS);
				}
			}

			State = 210; expr(0);
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 211; Match(WS);
				}
			}

			State = 214; Match(T__3);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 215; Match(WS);
				}
			}

			State = 218; Match(T__4);
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 219; Match(WS);
				}
			}

			State = 222; expr(0);
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 223; Match(WS);
				}
			}

			State = 226; Match(CLOSESQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_lengthContext : ParserRuleContext {
		public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Range_lengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_length; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterRange_length(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitRange_length(this);
		}
	}

	[RuleVersion(0)]
	public Range_lengthContext range_length() {
		Range_lengthContext _localctx = new Range_lengthContext(Context, State);
		EnterRule(_localctx, 20, RULE_range_length);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; Match(OPENSQ);
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 229; Match(WS);
				}
			}

			State = 232; expr(0);
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 233; Match(WS);
				}
			}

			State = 236; Match(T__3);
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 237; Match(WS);
				}
			}

			State = 240; Match(T__5);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 241; Match(WS);
				}
			}

			State = 244; expr(0);
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 245; Match(WS);
				}
			}

			State = 248; Match(CLOSESQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_groupContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(LinearParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(LinearParser.CLOSE, 0); }
		public Property_statementContext[] property_statement() {
			return GetRuleContexts<Property_statementContext>();
		}
		public Property_statementContext property_statement(int i) {
			return GetRuleContext<Property_statementContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Property_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterProperty_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitProperty_group(this);
		}
	}

	[RuleVersion(0)]
	public Property_groupContext property_group() {
		Property_groupContext _localctx = new Property_groupContext(Context, State);
		EnterRule(_localctx, 22, RULE_property_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; Match(OPEN);
			State = 257;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 252;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 251; Match(WS);
						}
					}

					State = 254; property_statement();
					}
					} 
				}
				State = 259;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 260; Match(WS);
				}
			}

			State = 263; Match(CLOSE);
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 264; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_statementContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(LinearParser.ASSIGNMENT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Property_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterProperty_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitProperty_statement(this);
		}
	}

	[RuleVersion(0)]
	public Property_statementContext property_statement() {
		Property_statementContext _localctx = new Property_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_property_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; Match(IDENTIFIER);
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 268; Match(WS);
				}
			}

			State = 271; Match(ASSIGNMENT);
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 272; Match(WS);
				}
			}

			State = 275; expr(0);
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 276; Match(WS);
				}
			}

			State = 279; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_lengthContext : ParserRuleContext {
		public Term_replacement_lengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_length; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_length(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_length(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_lengthContext term_replacement_length() {
		Term_replacement_lengthContext _localctx = new Term_replacement_lengthContext(Context, State);
		EnterRule(_localctx, 26, RULE_term_replacement_length);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_iContext : ParserRuleContext {
		public Term_replacement_iContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_i; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_i(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_i(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_iContext term_replacement_i() {
		Term_replacement_iContext _localctx = new Term_replacement_iContext(Context, State);
		EnterRule(_localctx, 28, RULE_term_replacement_i);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_pContext : ParserRuleContext {
		public Term_replacement_pContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_p; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_p(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_p(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_pContext term_replacement_p() {
		Term_replacement_pContext _localctx = new Term_replacement_pContext(Context, State);
		EnterRule(_localctx, 30, RULE_term_replacement_p);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_uContext : ParserRuleContext {
		public Term_replacement_uContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_u; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_u(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_u(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_uContext term_replacement_u() {
		Term_replacement_uContext _localctx = new Term_replacement_uContext(Context, State);
		EnterRule(_localctx, 32, RULE_term_replacement_u);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__11) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_memberContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		public Expr_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExpr_member(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExpr_member(this);
		}
	}

	[RuleVersion(0)]
	public Expr_memberContext expr_member() {
		Expr_memberContext _localctx = new Expr_memberContext(Context, State);
		EnterRule(_localctx, 34, RULE_expr_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; Match(IDENTIFIER);
			State = 290; Match(T__12);
			State = 291; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_array_accessContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Expr_array_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_array_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExpr_array_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExpr_array_access(this);
		}
	}

	[RuleVersion(0)]
	public Expr_array_accessContext expr_array_access() {
		Expr_array_accessContext _localctx = new Expr_array_accessContext(Context, State);
		EnterRule(_localctx, 36, RULE_expr_array_access);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(IDENTIFIER);
			State = 294; Match(OPENSQ);
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 295; Match(WS);
				}
			}

			State = 298; expr(0);
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 299; Match(WS);
				}
			}

			State = 302; Match(CLOSESQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_un_opContext : ParserRuleContext {
		public Un_opContext un_op() {
			return GetRuleContext<Un_opContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode WS() { return GetToken(LinearParser.WS, 0); }
		public Expr_un_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_un_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExpr_un_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExpr_un_op(this);
		}
	}

	[RuleVersion(0)]
	public Expr_un_opContext expr_un_op() {
		Expr_un_opContext _localctx = new Expr_un_opContext(Context, State);
		EnterRule(_localctx, 38, RULE_expr_un_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; un_op();
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 305; Match(WS);
				}
			}

			State = 308; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public Expr_memberContext expr_member() {
			return GetRuleContext<Expr_memberContext>(0);
		}
		public Expr_array_accessContext expr_array_access() {
			return GetRuleContext<Expr_array_accessContext>(0);
		}
		public Expr_un_opContext expr_un_op() {
			return GetRuleContext<Expr_un_opContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public OpContext op() {
			return GetRuleContext<OpContext>(0);
		}
		public Bool_opContext bool_op() {
			return GetRuleContext<Bool_opContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 311; term();
				}
				break;
			case 2:
				{
				State = 312; expr_member();
				}
				break;
			case 3:
				{
				State = 313; expr_array_access();
				}
				break;
			case 4:
				{
				State = 314; expr_un_op();
				}
				break;
			case 5:
				{
				State = 315; Match(T__13);
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 316; Match(WS);
					}
				}

				State = 319; expr(0);
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 320; Match(WS);
					}
				}

				State = 323; Match(T__14);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 349;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 347;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 327;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 329;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 328; Match(WS);
							}
						}

						State = 331; op();
						State = 333;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 332; Match(WS);
							}
						}

						State = 335; expr(5);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 337;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 339;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 338; Match(WS);
							}
						}

						State = 341; bool_op();
						State = 343;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 342; Match(WS);
							}
						}

						State = 345; expr(4);
						}
						break;
					}
					} 
				}
				State = 351;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OpContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(LinearParser.MINUS, 0); }
		public ITerminalNode STAR() { return GetToken(LinearParser.STAR, 0); }
		public ITerminalNode DIV() { return GetToken(LinearParser.DIV, 0); }
		public ITerminalNode PERCENT() { return GetToken(LinearParser.PERCENT, 0); }
		public ITerminalNode AMP() { return GetToken(LinearParser.AMP, 0); }
		public ITerminalNode BITWISE_OR() { return GetToken(LinearParser.BITWISE_OR, 0); }
		public ITerminalNode CARET() { return GetToken(LinearParser.CARET, 0); }
		public OpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitOp(this);
		}
	}

	[RuleVersion(0)]
	public OpContext op() {
		OpContext _localctx = new OpContext(Context, State);
		EnterRule(_localctx, 42, RULE_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << STAR) | (1L << DIV) | (1L << PERCENT) | (1L << AMP) | (1L << BITWISE_OR) | (1L << CARET))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Un_opContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(LinearParser.MINUS, 0); }
		public ITerminalNode BANG() { return GetToken(LinearParser.BANG, 0); }
		public ITerminalNode TILDE() { return GetToken(LinearParser.TILDE, 0); }
		public Un_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_un_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterUn_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitUn_op(this);
		}
	}

	[RuleVersion(0)]
	public Un_opContext un_op() {
		Un_opContext _localctx = new Un_opContext(Context, State);
		EnterRule(_localctx, 44, RULE_un_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << BANG) | (1L << TILDE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_opContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(LinearParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(LinearParser.GT, 0); }
		public ITerminalNode OP_AND() { return GetToken(LinearParser.OP_AND, 0); }
		public ITerminalNode OP_OR() { return GetToken(LinearParser.OP_OR, 0); }
		public ITerminalNode OP_EQ() { return GetToken(LinearParser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(LinearParser.OP_NE, 0); }
		public ITerminalNode OP_LE() { return GetToken(LinearParser.OP_LE, 0); }
		public ITerminalNode OP_GE() { return GetToken(LinearParser.OP_GE, 0); }
		public Bool_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterBool_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitBool_op(this);
		}
	}

	[RuleVersion(0)]
	public Bool_opContext bool_op() {
		Bool_opContext _localctx = new Bool_opContext(Context, State);
		EnterRule(_localctx, 46, RULE_bool_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << GT) | (1L << OP_AND) | (1L << OP_OR) | (1L << OP_EQ) | (1L << OP_NE) | (1L << OP_LE) | (1L << OP_GE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public Term_replacement_lengthContext term_replacement_length() {
			return GetRuleContext<Term_replacement_lengthContext>(0);
		}
		public Term_replacement_iContext term_replacement_i() {
			return GetRuleContext<Term_replacement_iContext>(0);
		}
		public Term_replacement_pContext term_replacement_p() {
			return GetRuleContext<Term_replacement_pContext>(0);
		}
		public Term_replacement_uContext term_replacement_u() {
			return GetRuleContext<Term_replacement_uContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ITerminalNode INTEGER_LITERAL() { return GetToken(LinearParser.INTEGER_LITERAL, 0); }
		public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(LinearParser.HEX_INTEGER_LITERAL, 0); }
		public ITerminalNode REAL_LITERAL() { return GetToken(LinearParser.REAL_LITERAL, 0); }
		public ITerminalNode CHARACTER_LITERAL() { return GetToken(LinearParser.CHARACTER_LITERAL, 0); }
		public ITerminalNode REGULAR_STRING() { return GetToken(LinearParser.REGULAR_STRING, 0); }
		public ITerminalNode VERBATIM_STRING() { return GetToken(LinearParser.VERBATIM_STRING, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 48, RULE_term);
		try {
			State = 369;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 358; term_replacement_length();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 359; term_replacement_i();
				}
				break;
			case T__8:
			case T__9:
				EnterOuterAlt(_localctx, 3);
				{
				State = 360; term_replacement_p();
				}
				break;
			case T__10:
			case T__11:
				EnterOuterAlt(_localctx, 4);
				{
				State = 361; term_replacement_u();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 362; Match(IDENTIFIER);
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 363; Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 364; Match(HEX_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 365; Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 9);
				{
				State = 366; Match(CHARACTER_LITERAL);
				}
				break;
			case REGULAR_STRING:
				EnterOuterAlt(_localctx, 10);
				{
				State = 367; Match(REGULAR_STRING);
				}
				break;
			case VERBATIM_STRING:
				EnterOuterAlt(_localctx, 11);
				{
				State = 368; Match(VERBATIM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 20: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x32', '\x176', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x3', 
		'\x2', '\x5', '\x2', '\x36', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x5', '\x2', ':', '\n', '\x2', '\a', '\x2', '<', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '?', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x45', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', 'I', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', 'M', '\n', '\x3', '\a', '\x3', 'O', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', 'R', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\\', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x64', '\n', '\x5', 
		'\x3', '\x5', '\x5', '\x5', 'g', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'o', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 's', '\n', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'v', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '}', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x81', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\x85', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x89', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x8D', '\n', '\a', '\x3', '\a', '\x5', '\a', '\x90', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\x97', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x9B', 
		'\n', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x9F', '\n', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\xA3', '\n', '\b', '\x3', '\b', 
		'\x5', '\b', '\xA6', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\xAC', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\xB2', '\n', '\b', '\x3', '\b', 
		'\x5', '\b', '\xB5', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\xC1', '\n', '\t', '\x3', '\t', '\x5', 
		'\t', '\xC4', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', '\xCA', '\n', '\n', '\f', '\n', '\xE', '\n', '\xCD', 
		'\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', '\xD3', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xD7', 
		'\n', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xDB', '\n', '\v', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\xDF', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\xE3', '\n', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x5', '\f', '\xE9', '\n', '\f', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '\xED', '\n', '\f', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', '\xF1', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\xF5', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xF9', '\n', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\xFF', '\n', '\r', '\x3', '\r', '\a', '\r', '\x102', '\n', '\r', '\f', 
		'\r', '\xE', '\r', '\x105', '\v', '\r', '\x3', '\r', '\x5', '\r', '\x108', 
		'\n', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x10C', '\n', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x110', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x114', '\n', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\x118', '\n', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\x12B', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\x12F', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x135', '\n', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x140', '\n', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x144', '\n', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x148', '\n', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x5', '\x16', '\x14C', '\n', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x5', '\x16', '\x150', '\n', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x156', '\n', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x15A', '\n', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\a', '\x16', '\x15E', '\n', '\x16', '\f', '\x16', 
		'\xE', '\x16', '\x161', '\v', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', 
		'\x1A', '\x174', '\n', '\x1A', '\x3', '\x1A', '\x2', '\x3', '*', '\x1B', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x2', '\b', '\x3', '\x2', '\x16', '\x16', '\x3', 
		'\x2', '\v', '\f', '\x3', '\x2', '\r', '\xE', '\x3', '\x2', '\x19', ' ', 
		'\x4', '\x2', '\x19', '\x1A', '!', '\"', '\x4', '\x2', '$', '%', '\'', 
		',', '\x2', '\x1A8', '\x2', '=', '\x3', '\x2', '\x2', '\x2', '\x4', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '[', '\x3', '\x2', '\x2', '\x2', '\b', 
		']', '\x3', '\x2', '\x2', '\x2', '\n', 'j', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'y', '\x3', '\x2', '\x2', '\x2', '\xE', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\xB8', '\x3', '\x2', '\x2', '\x2', '\x12', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\xD0', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\x18', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x11D', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\"', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x123', '\x3', '\x2', '\x2', '\x2', '&', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '(', '\x132', '\x3', '\x2', '\x2', '\x2', '*', '\x147', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x164', '\x3', '\x2', '\x2', '\x2', '\x30', '\x166', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x173', '\x3', '\x2', '\x2', '\x2', '\x34', '\x36', 
		'\a', '\x18', '\x2', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x39', '\x5', '\x4', '\x3', '\x2', '\x38', ':', 
		'\a', '\x18', '\x2', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '<', '\x3', '\x2', '\x2', 
		'\x2', ';', '\x35', '\x3', '\x2', '\x2', '\x2', '<', '?', '\x3', '\x2', 
		'\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', 
		'\x2', '\x2', '>', '@', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x41', '\a', '\x2', '\x2', '\x3', '\x41', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x44', '\a', '\x17', '\x2', '\x2', '\x43', 
		'\x45', '\a', '\x18', '\x2', '\x2', '\x44', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'H', '\a', '\x12', '\x2', '\x2', 'G', 'I', 
		'\a', '\x18', '\x2', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 'H', 
		'I', '\x3', '\x2', '\x2', '\x2', 'I', 'P', '\x3', '\x2', '\x2', '\x2', 
		'J', 'L', '\x5', '\x6', '\x4', '\x2', 'K', 'M', '\a', '\x18', '\x2', '\x2', 
		'L', 'K', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 
		'M', 'O', '\x3', '\x2', '\x2', '\x2', 'N', 'J', '\x3', '\x2', '\x2', '\x2', 
		'O', 'R', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x3', '\x2', '\x2', '\x2', 
		'R', 'P', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\x13', '\x2', '\x2', 
		'T', '\x5', '\x3', '\x2', '\x2', '\x2', 'U', '\\', '\x5', '\b', '\x5', 
		'\x2', 'V', '\\', '\x5', '\n', '\x6', '\x2', 'W', '\\', '\x5', '\f', '\a', 
		'\x2', 'X', '\\', '\x5', '\xE', '\b', '\x2', 'Y', '\\', '\x5', '\x10', 
		'\t', '\x2', 'Z', '\\', '\x5', '\x12', '\n', '\x2', '[', 'U', '\x3', '\x2', 
		'\x2', '\x2', '[', 'V', '\x3', '\x2', '\x2', '\x2', '[', 'W', '\x3', '\x2', 
		'\x2', '\x2', '[', 'X', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '[', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', '\a', '\x3', 
		'\x2', '\x2', '\x2', ']', '^', '\a', '\x17', '\x2', '\x2', '^', '_', '\a', 
		'\x18', '\x2', '\x2', '_', '`', '\a', '\x17', '\x2', '\x2', '`', '\x61', 
		'\a', '\x18', '\x2', '\x2', '\x61', '\x63', '\x5', '*', '\x16', '\x2', 
		'\x62', '\x64', '\a', '\x18', '\x2', '\x2', '\x63', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x65', 'g', '\x5', '\x18', '\r', '\x2', '\x66', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '\x16', '\x2', 
		'\x2', 'i', '\t', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', '\x17', 
		'\x2', '\x2', 'k', 'l', '\a', '\x18', '\x2', '\x2', 'l', 'n', '\a', '\x17', 
		'\x2', '\x2', 'm', 'o', '\a', '\x18', '\x2', '\x2', 'n', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 'r', '\x3', '\x2', 
		'\x2', '\x2', 'p', 's', '\x5', '\x14', '\v', '\x2', 'q', 's', '\x5', '\x16', 
		'\f', '\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 'q', '\x3', '\x2', 
		'\x2', '\x2', 's', 'u', '\x3', '\x2', '\x2', '\x2', 't', 'v', '\a', '\x18', 
		'\x2', '\x2', 'u', 't', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', '\x16', 
		'\x2', '\x2', 'x', '\v', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\a', '\x17', 
		'\x2', '\x2', 'z', '|', '\a', '\x14', '\x2', '\x2', '{', '}', '\a', '\x18', 
		'\x2', '\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', 
		'\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x80', '\x5', 
		'*', '\x16', '\x2', '\x7F', '\x81', '\a', '\x18', '\x2', '\x2', '\x80', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x84', '\a', 
		'\x15', '\x2', '\x2', '\x83', '\x85', '\a', '\x18', '\x2', '\x2', '\x84', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86', '\x88', '\a', 
		'\x17', '\x2', '\x2', '\x87', '\x89', '\a', '\x18', '\x2', '\x2', '\x88', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8C', '\x5', 
		'*', '\x16', '\x2', '\x8B', '\x8D', '\a', '\x18', '\x2', '\x2', '\x8C', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x90', '\x5', 
		'\x18', '\r', '\x2', '\x8F', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x92', '\a', '\x16', '\x2', '\x2', '\x92', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x94', '\a', '\x17', '\x2', '\x2', '\x94', 
		'\x96', '\a', '\x14', '\x2', '\x2', '\x95', '\x97', '\a', '\x18', '\x2', 
		'\x2', '\x96', '\x95', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x9A', '\x5', '*', '\x16', '\x2', '\x99', '\x9B', '\a', '\x18', '\x2', 
		'\x2', '\x9A', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9E', '\a', '\x15', '\x2', '\x2', '\x9D', '\x9F', '\a', '\x18', '\x2', 
		'\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA2', '\a', '\x3', '\x2', '\x2', '\xA1', '\xA3', '\a', '\x19', '\x2', 
		'\x2', '\xA2', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA6', '\a', '\x18', '\x2', '\x2', '\xA5', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', '\x17', '\x2', '\x2', '\xA8', 
		'\xA9', '\a', '\x14', '\x2', '\x2', '\xA9', '\xAB', '\a', '\x15', '\x2', 
		'\x2', '\xAA', '\xAC', '\a', '\x18', '\x2', '\x2', '\xAB', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x17', '\x2', 
		'\x2', '\xAE', '\xAF', '\a', '\x18', '\x2', '\x2', '\xAF', '\xB1', '\x5', 
		'*', '\x16', '\x2', '\xB0', '\xB2', '\a', '\x18', '\x2', '\x2', '\xB1', 
		'\xB0', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB5', '\x5', 
		'\x18', '\r', '\x2', '\xB4', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB7', '\a', '\x16', '\x2', '\x2', '\xB7', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', '\x4', '\x2', '\x2', '\xB9', 
		'\xBA', '\a', '\x18', '\x2', '\x2', '\xBA', '\xBB', '\a', '\x17', '\x2', 
		'\x2', '\xBB', '\xBC', '\a', '\x18', '\x2', '\x2', '\xBC', '\xBD', '\a', 
		'\x17', '\x2', '\x2', '\xBD', '\xBE', '\a', '\x18', '\x2', '\x2', '\xBE', 
		'\xC0', '\x5', '*', '\x16', '\x2', '\xBF', '\xC1', '\a', '\x18', '\x2', 
		'\x2', '\xC0', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC4', '\x5', '\x18', '\r', '\x2', '\xC3', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', '\x16', '\x2', '\x2', '\xC6', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xCB', '\a', '\x5', '\x2', 
		'\x2', '\xC8', '\xCA', '\n', '\x2', '\x2', '\x2', '\xC9', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCF', '\a', '\x16', '\x2', '\x2', '\xCF', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD2', '\a', '\x14', '\x2', 
		'\x2', '\xD1', '\xD3', '\a', '\x18', '\x2', '\x2', '\xD2', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD6', '\x5', '*', '\x16', 
		'\x2', '\xD5', '\xD7', '\a', '\x18', '\x2', '\x2', '\xD6', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDA', '\a', '\x6', '\x2', 
		'\x2', '\xD9', '\xDB', '\a', '\x18', '\x2', '\x2', '\xDA', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDE', '\a', '\a', '\x2', 
		'\x2', '\xDD', '\xDF', '\a', '\x18', '\x2', '\x2', '\xDE', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE2', '\x5', '*', '\x16', 
		'\x2', '\xE1', '\xE3', '\a', '\x18', '\x2', '\x2', '\xE2', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\a', '\x15', '\x2', 
		'\x2', '\xE5', '\x15', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE8', '\a', 
		'\x14', '\x2', '\x2', '\xE7', '\xE9', '\a', '\x18', '\x2', '\x2', '\xE8', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEC', '\x5', 
		'*', '\x16', '\x2', '\xEB', '\xED', '\a', '\x18', '\x2', '\x2', '\xEC', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF0', '\a', 
		'\x6', '\x2', '\x2', '\xEF', '\xF1', '\a', '\x18', '\x2', '\x2', '\xF0', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF4', '\a', 
		'\b', '\x2', '\x2', '\xF3', '\xF5', '\a', '\x18', '\x2', '\x2', '\xF4', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF8', '\x5', 
		'*', '\x16', '\x2', '\xF7', '\xF9', '\a', '\x18', '\x2', '\x2', '\xF8', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\xF9', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\a', 
		'\x15', '\x2', '\x2', '\xFB', '\x17', '\x3', '\x2', '\x2', '\x2', '\xFC', 
		'\x103', '\a', '\x12', '\x2', '\x2', '\xFD', '\xFF', '\a', '\x18', '\x2', 
		'\x2', '\xFE', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\x100', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\x102', '\x5', '\x1A', '\xE', '\x2', '\x101', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\x105', '\x3', '\x2', '\x2', '\x2', '\x103', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x107', '\x3', '\x2', '\x2', '\x2', '\x105', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x108', '\a', '\x18', '\x2', '\x2', '\x107', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x109', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10B', 
		'\a', '\x13', '\x2', '\x2', '\x10A', '\x10C', '\a', '\x18', '\x2', '\x2', 
		'\x10B', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x19', '\x3', '\x2', '\x2', '\x2', '\x10D', 
		'\x10F', '\a', '\x17', '\x2', '\x2', '\x10E', '\x110', '\a', '\x18', '\x2', 
		'\x2', '\x10F', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x113', '\a', '#', '\x2', '\x2', '\x112', '\x114', '\a', '\x18', 
		'\x2', '\x2', '\x113', '\x112', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x117', '\x5', '*', '\x16', '\x2', '\x116', '\x118', '\a', '\x18', 
		'\x2', '\x2', '\x117', '\x116', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x11A', '\a', '\x16', '\x2', '\x2', '\x11A', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x11C', '\a', '\t', '\x2', '\x2', '\x11C', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\a', '\n', '\x2', 
		'\x2', '\x11E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', 
		'\t', '\x3', '\x2', '\x2', '\x120', '!', '\x3', '\x2', '\x2', '\x2', '\x121', 
		'\x122', '\t', '\x4', '\x2', '\x2', '\x122', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x124', '\a', '\x17', '\x2', '\x2', '\x124', '\x125', 
		'\a', '\xF', '\x2', '\x2', '\x125', '\x126', '\a', '\x17', '\x2', '\x2', 
		'\x126', '%', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\a', '\x17', 
		'\x2', '\x2', '\x128', '\x12A', '\a', '\x14', '\x2', '\x2', '\x129', '\x12B', 
		'\a', '\x18', '\x2', '\x2', '\x12A', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x12A', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\x3', 
		'\x2', '\x2', '\x2', '\x12C', '\x12E', '\x5', '*', '\x16', '\x2', '\x12D', 
		'\x12F', '\a', '\x18', '\x2', '\x2', '\x12E', '\x12D', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\a', '\x15', '\x2', '\x2', 
		'\x131', '\'', '\x3', '\x2', '\x2', '\x2', '\x132', '\x134', '\x5', '.', 
		'\x18', '\x2', '\x133', '\x135', '\a', '\x18', '\x2', '\x2', '\x134', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '\x134', '\x135', '\x3', '\x2', '\x2', 
		'\x2', '\x135', '\x136', '\x3', '\x2', '\x2', '\x2', '\x136', '\x137', 
		'\x5', '*', '\x16', '\x2', '\x137', ')', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\x139', '\b', '\x16', '\x1', '\x2', '\x139', '\x148', '\x5', '\x32', 
		'\x1A', '\x2', '\x13A', '\x148', '\x5', '$', '\x13', '\x2', '\x13B', '\x148', 
		'\x5', '&', '\x14', '\x2', '\x13C', '\x148', '\x5', '(', '\x15', '\x2', 
		'\x13D', '\x13F', '\a', '\x10', '\x2', '\x2', '\x13E', '\x140', '\a', 
		'\x18', '\x2', '\x2', '\x13F', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13F', 
		'\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x143', '\x5', '*', '\x16', '\x2', '\x142', '\x144', 
		'\a', '\x18', '\x2', '\x2', '\x143', '\x142', '\x3', '\x2', '\x2', '\x2', 
		'\x143', '\x144', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\x3', 
		'\x2', '\x2', '\x2', '\x145', '\x146', '\a', '\x11', '\x2', '\x2', '\x146', 
		'\x148', '\x3', '\x2', '\x2', '\x2', '\x147', '\x138', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x147', '\x13B', 
		'\x3', '\x2', '\x2', '\x2', '\x147', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'\x147', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x148', '\x15F', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x14B', '\f', '\x6', '\x2', '\x2', '\x14A', 
		'\x14C', '\a', '\x18', '\x2', '\x2', '\x14B', '\x14A', '\x3', '\x2', '\x2', 
		'\x2', '\x14B', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', 
		'\x3', '\x2', '\x2', '\x2', '\x14D', '\x14F', '\x5', ',', '\x17', '\x2', 
		'\x14E', '\x150', '\a', '\x18', '\x2', '\x2', '\x14F', '\x14E', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x150', '\x3', '\x2', '\x2', '\x2', '\x150', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\x5', '*', '\x16', 
		'\a', '\x152', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x153', '\x155', 
		'\f', '\x5', '\x2', '\x2', '\x154', '\x156', '\a', '\x18', '\x2', '\x2', 
		'\x155', '\x154', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x157', '\x3', '\x2', '\x2', '\x2', '\x157', 
		'\x159', '\x5', '\x30', '\x19', '\x2', '\x158', '\x15A', '\a', '\x18', 
		'\x2', '\x2', '\x159', '\x158', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', 
		'\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'\x15B', '\x15C', '\x5', '*', '\x16', '\x6', '\x15C', '\x15E', '\x3', 
		'\x2', '\x2', '\x2', '\x15D', '\x149', '\x3', '\x2', '\x2', '\x2', '\x15D', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x161', '\x3', '\x2', '\x2', 
		'\x2', '\x15F', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x160', 
		'\x3', '\x2', '\x2', '\x2', '\x160', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x161', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\t', 
		'\x5', '\x2', '\x2', '\x163', '-', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x165', '\t', '\x6', '\x2', '\x2', '\x165', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x166', '\x167', '\t', '\a', '\x2', '\x2', '\x167', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x174', '\x5', '\x1C', '\xF', '\x2', '\x169', 
		'\x174', '\x5', '\x1E', '\x10', '\x2', '\x16A', '\x174', '\x5', ' ', '\x11', 
		'\x2', '\x16B', '\x174', '\x5', '\"', '\x12', '\x2', '\x16C', '\x174', 
		'\a', '\x17', '\x2', '\x2', '\x16D', '\x174', '\a', '-', '\x2', '\x2', 
		'\x16E', '\x174', '\a', '.', '\x2', '\x2', '\x16F', '\x174', '\a', '/', 
		'\x2', '\x2', '\x170', '\x174', '\a', '\x30', '\x2', '\x2', '\x171', '\x174', 
		'\a', '\x31', '\x2', '\x2', '\x172', '\x174', '\a', '\x32', '\x2', '\x2', 
		'\x173', '\x168', '\x3', '\x2', '\x2', '\x2', '\x173', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\x173', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x173', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\x173', '\x16C', '\x3', '\x2', '\x2', 
		'\x2', '\x173', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x173', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', '\x173', '\x16F', '\x3', '\x2', '\x2', '\x2', 
		'\x173', '\x170', '\x3', '\x2', '\x2', '\x2', '\x173', '\x171', '\x3', 
		'\x2', '\x2', '\x2', '\x173', '\x172', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '>', '\x35', '\x39', '=', '\x44', 
		'H', 'L', 'P', '[', '\x63', '\x66', 'n', 'r', 'u', '|', '\x80', '\x84', 
		'\x88', '\x8C', '\x8F', '\x96', '\x9A', '\x9E', '\xA2', '\xA5', '\xAB', 
		'\xB1', '\xB4', '\xC0', '\xC3', '\xCB', '\xD2', '\xD6', '\xDA', '\xDE', 
		'\xE2', '\xE8', '\xEC', '\xF0', '\xF4', '\xF8', '\xFE', '\x103', '\x107', 
		'\x10B', '\x10F', '\x113', '\x117', '\x12A', '\x12E', '\x134', '\x13F', 
		'\x143', '\x147', '\x14B', '\x14F', '\x155', '\x159', '\x15D', '\x15F', 
		'\x173',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
