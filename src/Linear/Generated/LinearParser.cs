//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/Shared/gabura/git/Linear/scripts/../spec/Linear.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class LinearParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, COMMENT=20, COMENT_BLOCK=21, OPEN=22, CLOSE=23, OPENSQ=24, 
		CLOSESQ=25, ENDL=26, IDENTIFIER=27, WS=28, PLUS=29, MINUS=30, STAR=31, 
		DIV=32, PERCENT=33, AMP=34, BITWISE_OR=35, CARET=36, BANG=37, TILDE=38, 
		ASSIGNMENT=39, LT=40, GT=41, INTERR=42, OP_AND=43, OP_OR=44, OP_EQ=45, 
		OP_NE=46, OP_LE=47, OP_GE=48, INTEGER_LITERAL=49, HEX_INTEGER_LITERAL=50, 
		REAL_LITERAL=51, CHARACTER_LITERAL=52, REGULAR_STRING=53, VERBATIM_STRING=54;
	public const int
		RULE_compilation_unit = 0, RULE_body_element = 1, RULE_struct = 2, RULE_struct_statement = 3, 
		RULE_struct_statement_define = 4, RULE_struct_statement_define_lambda = 5, 
		RULE_struct_statement_call = 6, RULE_struct_statement_length = 7, RULE_struct_statement_define_array = 8, 
		RULE_struct_statement_define_array_indirect = 9, RULE_struct_statement_output = 10, 
		RULE_property_group = 11, RULE_property_statement = 12, RULE_term_replacement_length = 13, 
		RULE_term_replacement_a = 14, RULE_term_replacement_i = 15, RULE_term_replacement_p = 16, 
		RULE_term_replacement_u = 17, RULE_expr = 18, RULE_op_mul_div = 19, RULE_op_add_sub = 20, 
		RULE_un_op = 21, RULE_bool_op = 22, RULE_struct_size = 23, RULE_term = 24;
	public static readonly string[] ruleNames = {
		"compilation_unit", "body_element", "struct", "struct_statement", "struct_statement_define", 
		"struct_statement_define_lambda", "struct_statement_call", "struct_statement_length", 
		"struct_statement_define_array", "struct_statement_define_array_indirect", 
		"struct_statement_output", "property_group", "property_statement", "term_replacement_length", 
		"term_replacement_a", "term_replacement_i", "term_replacement_p", "term_replacement_u", 
		"expr", "op_mul_div", "op_add_sub", "un_op", "bool_op", "struct_size", 
		"term"
	};

	private static readonly string[] _LiteralNames = {
		null, "'lambda'", "'$call'", "'$setlength'", "'->'", "','", "'$output'", 
		"'$length'", "'$a'", "'$i'", "'$p'", "'$parent'", "'$u'", "'$unique'", 
		"'('", "')'", "'$$'", "'`'", "'..'", "'.'", null, null, "'{'", "'}'", 
		"'['", "']'", "';'", null, null, "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", 
		"'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'?'", "'&&'", "'||'", 
		"'=='", "'!='", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "COMMENT", "COMENT_BLOCK", 
		"OPEN", "CLOSE", "OPENSQ", "CLOSESQ", "ENDL", "IDENTIFIER", "WS", "PLUS", 
		"MINUS", "STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", 
		"TILDE", "ASSIGNMENT", "LT", "GT", "INTERR", "OP_AND", "OP_OR", "OP_EQ", 
		"OP_NE", "OP_LE", "OP_GE", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", "REAL_LITERAL", 
		"CHARACTER_LITERAL", "REGULAR_STRING", "VERBATIM_STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Linear.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LinearParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LinearParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LinearParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LinearParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Body_elementContext[] body_element() {
			return GetRuleContexts<Body_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Body_elementContext body_element(int i) {
			return GetRuleContext<Body_elementContext>(i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 50;
				Match(WS);
				}
			}

			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 137363456L) != 0) {
				{
				{
				State = 53;
				body_element();
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 54;
					Match(WS);
					}
				}

				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 62;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Body_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct() {
			return GetRuleContext<StructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(LinearParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMENT_BLOCK() { return GetToken(LinearParser.COMENT_BLOCK, 0); }
		public Body_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterBody_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitBody_element(this);
		}
	}

	[RuleVersion(0)]
	public Body_elementContext body_element() {
		Body_elementContext _localctx = new Body_elementContext(Context, State);
		EnterRule(_localctx, 2, RULE_body_element);
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64;
				@struct();
				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65;
				Match(COMMENT);
				}
				break;
			case COMENT_BLOCK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 66;
				Match(COMENT_BLOCK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(LinearParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(LinearParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_sizeContext struct_size() {
			return GetRuleContext<Struct_sizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statementContext[] struct_statement() {
			return GetRuleContexts<Struct_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statementContext struct_statement(int i) {
			return GetRuleContext<Struct_statementContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 4, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(IDENTIFIER);
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 70;
				Match(WS);
				}
				break;
			}
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTEGER_LITERAL || _la==HEX_INTEGER_LITERAL) {
				{
				State = 73;
				struct_size();
				}
			}

			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 76;
				Match(WS);
				}
			}

			State = 79;
			Match(OPEN);
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 80;
				Match(WS);
				}
			}

			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 137363534L) != 0) {
				{
				{
				State = 83;
				struct_statement();
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 84;
					Match(WS);
					}
				}

				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 92;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_defineContext struct_statement_define() {
			return GetRuleContext<Struct_statement_defineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_define_lambdaContext struct_statement_define_lambda() {
			return GetRuleContext<Struct_statement_define_lambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_callContext struct_statement_call() {
			return GetRuleContext<Struct_statement_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_lengthContext struct_statement_length() {
			return GetRuleContext<Struct_statement_lengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_define_arrayContext struct_statement_define_array() {
			return GetRuleContext<Struct_statement_define_arrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_define_array_indirectContext struct_statement_define_array_indirect() {
			return GetRuleContext<Struct_statement_define_array_indirectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_statement_outputContext struct_statement_output() {
			return GetRuleContext<Struct_statement_outputContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(LinearParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMENT_BLOCK() { return GetToken(LinearParser.COMENT_BLOCK, 0); }
		public Struct_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statementContext struct_statement() {
		Struct_statementContext _localctx = new Struct_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_struct_statement);
		try {
			State = 103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				struct_statement_define();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95;
				struct_statement_define_lambda();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 96;
				struct_statement_call();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 97;
				struct_statement_length();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 98;
				struct_statement_define_array();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 99;
				struct_statement_define_array_indirect();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 100;
				struct_statement_output();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 101;
				Match(COMMENT);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 102;
				Match(COMENT_BLOCK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_defineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Struct_statement_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_defineContext struct_statement_define() {
		Struct_statement_defineContext _localctx = new Struct_statement_defineContext(Context, State);
		EnterRule(_localctx, 8, RULE_struct_statement_define);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(IDENTIFIER);
			State = 106;
			Match(WS);
			State = 107;
			Match(IDENTIFIER);
			State = 108;
			Match(WS);
			State = 109;
			expr(0);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 110;
				Match(WS);
				}
			}

			State = 113;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_lambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Struct_statement_define_lambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_lambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_lambda(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_lambdaContext struct_statement_define_lambda() {
		Struct_statement_define_lambdaContext _localctx = new Struct_statement_define_lambdaContext(Context, State);
		EnterRule(_localctx, 10, RULE_struct_statement_define_lambda);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(T__0);
			State = 116;
			Match(WS);
			State = 117;
			Match(IDENTIFIER);
			State = 118;
			Match(WS);
			State = 119;
			expr(0);
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 120;
				Match(WS);
				}
			}

			State = 123;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Struct_statement_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_call(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_callContext struct_statement_call() {
		Struct_statement_callContext _localctx = new Struct_statement_callContext(Context, State);
		EnterRule(_localctx, 12, RULE_struct_statement_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(T__1);
			State = 126;
			Match(WS);
			State = 127;
			expr(0);
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 128;
				Match(WS);
				}
			}

			State = 131;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_lengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Struct_statement_lengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_length; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_length(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_length(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_lengthContext struct_statement_length() {
		Struct_statement_lengthContext _localctx = new Struct_statement_lengthContext(Context, State);
		EnterRule(_localctx, 14, RULE_struct_statement_length);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(T__2);
			State = 134;
			Match(WS);
			State = 135;
			expr(0);
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 136;
				Match(WS);
				}
			}

			State = 139;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_arrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_define_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_array(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_array(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_arrayContext struct_statement_define_array() {
		Struct_statement_define_arrayContext _localctx = new Struct_statement_define_arrayContext(Context, State);
		EnterRule(_localctx, 16, RULE_struct_statement_define_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(IDENTIFIER);
			State = 142;
			Match(OPENSQ);
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 143;
				Match(WS);
				}
			}

			State = 146;
			expr(0);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 147;
				Match(WS);
				}
			}

			State = 150;
			Match(CLOSESQ);
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 151;
				Match(WS);
				}
			}

			State = 154;
			Match(IDENTIFIER);
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 155;
				Match(WS);
				}
			}

			State = 158;
			expr(0);
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 159;
				Match(WS);
				}
			}

			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 162;
				property_group();
				}
			}

			State = 165;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_array_indirectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPENSQ() { return GetTokens(LinearParser.OPENSQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENSQ(int i) {
			return GetToken(LinearParser.OPENSQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSESQ() { return GetTokens(LinearParser.CLOSESQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSESQ(int i) {
			return GetToken(LinearParser.CLOSESQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_define_array_indirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_array_indirect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_array_indirect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_array_indirect(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_array_indirectContext struct_statement_define_array_indirect() {
		Struct_statement_define_array_indirectContext _localctx = new Struct_statement_define_array_indirectContext(Context, State);
		EnterRule(_localctx, 18, RULE_struct_statement_define_array_indirect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(IDENTIFIER);
			State = 168;
			Match(OPENSQ);
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 169;
				Match(WS);
				}
			}

			State = 172;
			expr(0);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 173;
				Match(WS);
				}
			}

			State = 176;
			Match(CLOSESQ);
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 177;
				Match(WS);
				}
			}

			State = 180;
			Match(T__3);
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS) {
				{
				State = 181;
				Match(PLUS);
				}
			}

			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 184;
				Match(WS);
				}
			}

			State = 187;
			Match(IDENTIFIER);
			State = 188;
			Match(OPENSQ);
			State = 189;
			Match(CLOSESQ);
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 190;
				Match(WS);
				}
			}

			State = 193;
			Match(IDENTIFIER);
			State = 194;
			Match(WS);
			State = 195;
			expr(0);
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 196;
				Match(WS);
				}
			}

			State = 199;
			Match(T__4);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 200;
				Match(WS);
				}
			}

			State = 203;
			expr(0);
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 204;
				Match(WS);
				}
			}

			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 207;
				property_group();
				}
			}

			State = 210;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_outputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_outputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_output; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_output(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_output(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_outputContext struct_statement_output() {
		Struct_statement_outputContext _localctx = new Struct_statement_outputContext(Context, State);
		EnterRule(_localctx, 20, RULE_struct_statement_output);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(T__5);
			State = 213;
			Match(WS);
			State = 214;
			Match(IDENTIFIER);
			State = 215;
			Match(WS);
			State = 216;
			expr(0);
			State = 217;
			Match(WS);
			State = 218;
			expr(0);
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 219;
				Match(WS);
				}
			}

			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 222;
				property_group();
				}
			}

			State = 225;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_groupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(LinearParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(LinearParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Property_statementContext[] property_statement() {
			return GetRuleContexts<Property_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_statementContext property_statement(int i) {
			return GetRuleContext<Property_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Property_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterProperty_group(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitProperty_group(this);
		}
	}

	[RuleVersion(0)]
	public Property_groupContext property_group() {
		Property_groupContext _localctx = new Property_groupContext(Context, State);
		EnterRule(_localctx, 22, RULE_property_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			Match(OPEN);
			State = 234;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 229;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 228;
						Match(WS);
						}
					}

					State = 231;
					property_statement();
					}
					} 
				}
				State = 236;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 237;
				Match(WS);
				}
			}

			State = 240;
			Match(CLOSE);
			State = 242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 241;
				Match(WS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGNMENT() { return GetToken(LinearParser.ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Property_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterProperty_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitProperty_statement(this);
		}
	}

	[RuleVersion(0)]
	public Property_statementContext property_statement() {
		Property_statementContext _localctx = new Property_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_property_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(IDENTIFIER);
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 245;
				Match(WS);
				}
			}

			State = 248;
			Match(ASSIGNMENT);
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 249;
				Match(WS);
				}
			}

			State = 252;
			expr(0);
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 253;
				Match(WS);
				}
			}

			State = 256;
			Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_lengthContext : ParserRuleContext {
		public Term_replacement_lengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_length; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_length(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_length(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_lengthContext term_replacement_length() {
		Term_replacement_lengthContext _localctx = new Term_replacement_lengthContext(Context, State);
		EnterRule(_localctx, 26, RULE_term_replacement_length);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_aContext : ParserRuleContext {
		public Term_replacement_aContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_a; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_a(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_a(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_aContext term_replacement_a() {
		Term_replacement_aContext _localctx = new Term_replacement_aContext(Context, State);
		EnterRule(_localctx, 28, RULE_term_replacement_a);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_iContext : ParserRuleContext {
		public Term_replacement_iContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_i; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_i(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_i(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_iContext term_replacement_i() {
		Term_replacement_iContext _localctx = new Term_replacement_iContext(Context, State);
		EnterRule(_localctx, 30, RULE_term_replacement_i);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_pContext : ParserRuleContext {
		public Term_replacement_pContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_p; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_p(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_p(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_pContext term_replacement_p() {
		Term_replacement_pContext _localctx = new Term_replacement_pContext(Context, State);
		EnterRule(_localctx, 32, RULE_term_replacement_p);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			_la = TokenStream.LA(1);
			if ( !(_la==T__9 || _la==T__10) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_uContext : ParserRuleContext {
		public Term_replacement_uContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_u; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_u(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_u(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_uContext term_replacement_u() {
		Term_replacement_uContext _localctx = new Term_replacement_uContext(Context, State);
		EnterRule(_localctx, 34, RULE_term_replacement_u);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			_la = TokenStream.LA(1);
			if ( !(_la==T__11 || _la==T__12) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprMethodCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprMethodCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprMethodCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprMethodCall(this);
		}
	}
	public partial class ExprOpAmpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(LinearParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpAmpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpAmp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpAmp(this);
		}
	}
	public partial class ExprOpBitwiseOrContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(LinearParser.BITWISE_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpBitwiseOrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpBitwiseOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpBitwiseOr(this);
		}
	}
	public partial class ExprLambdaReplacementContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ExprLambdaReplacementContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprLambdaReplacement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprLambdaReplacement(this);
		}
	}
	public partial class ExprUnboundDeserializeContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(LinearParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public ExprUnboundDeserializeContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprUnboundDeserialize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprUnboundDeserialize(this);
		}
	}
	public partial class ExprUnOpContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Un_opContext un_op() {
			return GetRuleContext<Un_opContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(LinearParser.WS, 0); }
		public ExprUnOpContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprUnOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprUnOp(this);
		}
	}
	public partial class ExprTermContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ExprTermContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprTerm(this);
		}
	}
	public partial class ExprRangeLengthContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprRangeLengthContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprRangeLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprRangeLength(this);
		}
	}
	public partial class ExprWrappedContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprWrappedContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprWrapped(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprWrapped(this);
		}
	}
	public partial class ExprOpMulDivContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_mul_divContext op_mul_div() {
			return GetRuleContext<Op_mul_divContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpMulDivContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpMulDiv(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpMulDiv(this);
		}
	}
	public partial class ExprRangeEndContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprRangeEndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprRangeEnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprRangeEnd(this);
		}
	}
	public partial class ExprSourceWithOffsetContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(LinearParser.BANG, 0); }
		public ExprSourceWithOffsetContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprSourceWithOffset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprSourceWithOffset(this);
		}
	}
	public partial class ExprArrayAccessContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprArrayAccessContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprArrayAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprArrayAccess(this);
		}
	}
	public partial class ExprOpAddSubContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_add_subContext op_add_sub() {
			return GetRuleContext<Op_add_subContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpAddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpAddSub(this);
		}
	}
	public partial class ExprDeserializeContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(LinearParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public ExprDeserializeContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprDeserialize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprDeserialize(this);
		}
	}
	public partial class ExprOpCaretContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(LinearParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpCaretContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOpCaret(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOpCaret(this);
		}
	}
	public partial class ExprMemberContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ExprMemberContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprMember(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				_localctx = new ExprMethodCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 269;
				Match(IDENTIFIER);
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 270;
					Match(WS);
					}
				}

				State = 273;
				Match(T__13);
				State = 275;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 274;
					Match(WS);
					}
					break;
				}
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 35466261144240000L) != 0) {
					{
					State = 277;
					expr(0);
					}
				}

				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 280;
					Match(WS);
					}
				}

				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 283;
					Match(T__4);
					State = 285;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 284;
						Match(WS);
						}
					}

					State = 287;
					expr(0);
					State = 289;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 288;
						Match(WS);
						}
					}

					}
					}
					State = 295;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 296;
				Match(T__14);
				}
				break;
			case 2:
				{
				_localctx = new ExprLambdaReplacementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 297;
				Match(T__15);
				State = 298;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				_localctx = new ExprTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 299;
				term();
				}
				break;
			case 4:
				{
				_localctx = new ExprUnboundDeserializeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 300;
				Match(T__16);
				State = 301;
				expr(0);
				State = 303;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 302;
					Match(WS);
					}
					break;
				}
				State = 306;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
				case 1:
					{
					State = 305;
					property_group();
					}
					break;
				}
				}
				break;
			case 5:
				{
				_localctx = new ExprDeserializeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 308;
				Match(IDENTIFIER);
				State = 309;
				Match(T__16);
				State = 310;
				expr(0);
				State = 312;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 311;
					Match(WS);
					}
					break;
				}
				State = 315;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 314;
					property_group();
					}
					break;
				}
				}
				break;
			case 6:
				{
				_localctx = new ExprRangeEndContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 317;
				Match(OPENSQ);
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 318;
					Match(WS);
					}
				}

				State = 321;
				expr(0);
				State = 323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 322;
					Match(WS);
					}
				}

				State = 325;
				Match(T__17);
				State = 327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 326;
					Match(WS);
					}
				}

				State = 329;
				expr(0);
				State = 331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 330;
					Match(WS);
					}
				}

				State = 333;
				Match(CLOSESQ);
				}
				break;
			case 7:
				{
				_localctx = new ExprRangeLengthContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 335;
				Match(OPENSQ);
				State = 337;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 336;
					Match(WS);
					}
				}

				State = 339;
				expr(0);
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 340;
					Match(WS);
					}
				}

				State = 343;
				Match(T__4);
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 344;
					Match(WS);
					}
				}

				State = 347;
				expr(0);
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 348;
					Match(WS);
					}
				}

				State = 351;
				Match(CLOSESQ);
				}
				break;
			case 8:
				{
				_localctx = new ExprWrappedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 353;
				Match(T__13);
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 354;
					Match(WS);
					}
				}

				State = 357;
				expr(0);
				State = 359;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 358;
					Match(WS);
					}
				}

				State = 361;
				Match(T__14);
				}
				break;
			case 9:
				{
				_localctx = new ExprUnOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 363;
				un_op();
				State = 365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 364;
					Match(WS);
					}
				}

				State = 367;
				expr(6);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 437;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 435;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
					case 1:
						{
						_localctx = new ExprSourceWithOffsetContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 371;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 372;
						Match(BANG);
						State = 373;
						expr(10);
						}
						break;
					case 2:
						{
						_localctx = new ExprOpMulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 374;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 376;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 375;
							Match(WS);
							}
						}

						State = 378;
						op_mul_div();
						State = 380;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 379;
							Match(WS);
							}
						}

						State = 382;
						expr(6);
						}
						break;
					case 3:
						{
						_localctx = new ExprOpAddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 384;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 386;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 385;
							Match(WS);
							}
						}

						State = 388;
						op_add_sub();
						State = 390;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 389;
							Match(WS);
							}
						}

						State = 392;
						expr(5);
						}
						break;
					case 4:
						{
						_localctx = new ExprOpAmpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 394;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 396;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 395;
							Match(WS);
							}
						}

						State = 398;
						Match(AMP);
						State = 400;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 399;
							Match(WS);
							}
						}

						State = 402;
						expr(4);
						}
						break;
					case 5:
						{
						_localctx = new ExprOpCaretContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 403;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 405;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 404;
							Match(WS);
							}
						}

						State = 407;
						Match(CARET);
						State = 409;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 408;
							Match(WS);
							}
						}

						State = 411;
						expr(3);
						}
						break;
					case 6:
						{
						_localctx = new ExprOpBitwiseOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 412;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 414;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 413;
							Match(WS);
							}
						}

						State = 416;
						Match(BITWISE_OR);
						State = 418;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 417;
							Match(WS);
							}
						}

						State = 420;
						expr(2);
						}
						break;
					case 7:
						{
						_localctx = new ExprMemberContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 421;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 422;
						Match(T__18);
						State = 423;
						Match(IDENTIFIER);
						}
						break;
					case 8:
						{
						_localctx = new ExprArrayAccessContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 424;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 425;
						Match(OPENSQ);
						State = 427;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 426;
							Match(WS);
							}
						}

						State = 429;
						expr(0);
						State = 431;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 430;
							Match(WS);
							}
						}

						State = 433;
						Match(CLOSESQ);
						}
						break;
					}
					} 
				}
				State = 439;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Op_mul_divContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(LinearParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(LinearParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(LinearParser.PERCENT, 0); }
		public Op_mul_divContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_mul_div; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterOp_mul_div(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitOp_mul_div(this);
		}
	}

	[RuleVersion(0)]
	public Op_mul_divContext op_mul_div() {
		Op_mul_divContext _localctx = new Op_mul_divContext(Context, State);
		EnterRule(_localctx, 38, RULE_op_mul_div);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 15032385536L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_add_subContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LinearParser.MINUS, 0); }
		public Op_add_subContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_add_sub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterOp_add_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitOp_add_sub(this);
		}
	}

	[RuleVersion(0)]
	public Op_add_subContext op_add_sub() {
		Op_add_subContext _localctx = new Op_add_subContext(Context, State);
		EnterRule(_localctx, 40, RULE_op_add_sub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Un_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LinearParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BANG() { return GetToken(LinearParser.BANG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(LinearParser.TILDE, 0); }
		public Un_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_un_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterUn_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitUn_op(this);
		}
	}

	[RuleVersion(0)]
	public Un_opContext un_op() {
		Un_opContext _localctx = new Un_opContext(Context, State);
		EnterRule(_localctx, 42, RULE_un_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 413927473152L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(LinearParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(LinearParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(LinearParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(LinearParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQ() { return GetToken(LinearParser.OP_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NE() { return GetToken(LinearParser.OP_NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LE() { return GetToken(LinearParser.OP_LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GE() { return GetToken(LinearParser.OP_GE, 0); }
		public Bool_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterBool_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitBool_op(this);
		}
	}

	[RuleVersion(0)]
	public Bool_opContext bool_op() {
		Bool_opContext _localctx = new Bool_opContext(Context, State);
		EnterRule(_localctx, 44, RULE_bool_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 557452395282432L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_sizeContext : ParserRuleContext {
		public Struct_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_size; } }
	 
		public Struct_sizeContext() { }
		public virtual void CopyFrom(Struct_sizeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructSizeIntContext : Struct_sizeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(LinearParser.INTEGER_LITERAL, 0); }
		public StructSizeIntContext(Struct_sizeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStructSizeInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStructSizeInt(this);
		}
	}
	public partial class StrictSizeHexContext : Struct_sizeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(LinearParser.HEX_INTEGER_LITERAL, 0); }
		public StrictSizeHexContext(Struct_sizeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStrictSizeHex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStrictSizeHex(this);
		}
	}

	[RuleVersion(0)]
	public Struct_sizeContext struct_size() {
		Struct_sizeContext _localctx = new Struct_sizeContext(Context, State);
		EnterRule(_localctx, 46, RULE_struct_size);
		try {
			State = 450;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				_localctx = new StructSizeIntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 448;
				Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				_localctx = new StrictSizeHexContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 449;
				Match(HEX_INTEGER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermHexContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(LinearParser.HEX_INTEGER_LITERAL, 0); }
		public TermHexContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermHex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermHex(this);
		}
	}
	public partial class TermCharContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(LinearParser.CHARACTER_LITERAL, 0); }
		public TermCharContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermChar(this);
		}
	}
	public partial class TermRepUContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_replacement_uContext term_replacement_u() {
			return GetRuleContext<Term_replacement_uContext>(0);
		}
		public TermRepUContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepU(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepU(this);
		}
	}
	public partial class TermRepLengthContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_replacement_lengthContext term_replacement_length() {
			return GetRuleContext<Term_replacement_lengthContext>(0);
		}
		public TermRepLengthContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepLength(this);
		}
	}
	public partial class TermRepAContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_replacement_aContext term_replacement_a() {
			return GetRuleContext<Term_replacement_aContext>(0);
		}
		public TermRepAContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepA(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepA(this);
		}
	}
	public partial class TermRepPContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_replacement_pContext term_replacement_p() {
			return GetRuleContext<Term_replacement_pContext>(0);
		}
		public TermRepPContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepP(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepP(this);
		}
	}
	public partial class TermIdentifierContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public TermIdentifierContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermIdentifier(this);
		}
	}
	public partial class TermIntContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(LinearParser.INTEGER_LITERAL, 0); }
		public TermIntContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermInt(this);
		}
	}
	public partial class TermRealContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(LinearParser.REAL_LITERAL, 0); }
		public TermRealContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermReal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermReal(this);
		}
	}
	public partial class TermStringContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGULAR_STRING() { return GetToken(LinearParser.REGULAR_STRING, 0); }
		public TermStringContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermString(this);
		}
	}
	public partial class TermStringVerbContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERBATIM_STRING() { return GetToken(LinearParser.VERBATIM_STRING, 0); }
		public TermStringVerbContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermStringVerb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermStringVerb(this);
		}
	}
	public partial class TermRepIContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public Term_replacement_iContext term_replacement_i() {
			return GetRuleContext<Term_replacement_iContext>(0);
		}
		public TermRepIContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepI(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepI(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 48, RULE_term);
		try {
			State = 464;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				_localctx = new TermRepLengthContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 452;
				term_replacement_length();
				}
				break;
			case T__7:
				_localctx = new TermRepAContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 453;
				term_replacement_a();
				}
				break;
			case T__8:
				_localctx = new TermRepIContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 454;
				term_replacement_i();
				}
				break;
			case T__9:
			case T__10:
				_localctx = new TermRepPContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 455;
				term_replacement_p();
				}
				break;
			case T__11:
			case T__12:
				_localctx = new TermRepUContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 456;
				term_replacement_u();
				}
				break;
			case IDENTIFIER:
				_localctx = new TermIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 457;
				Match(IDENTIFIER);
				}
				break;
			case INTEGER_LITERAL:
				_localctx = new TermIntContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 458;
				Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				_localctx = new TermHexContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 459;
				Match(HEX_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				_localctx = new TermRealContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 460;
				Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				_localctx = new TermCharContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 461;
				Match(CHARACTER_LITERAL);
				}
				break;
			case REGULAR_STRING:
				_localctx = new TermStringContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 462;
				Match(REGULAR_STRING);
				}
				break;
			case VERBATIM_STRING:
				_localctx = new TermStringVerbContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 463;
				Match(VERBATIM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		case 6: return Precpred(Context, 10);
		case 7: return Precpred(Context, 8);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,54,467,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,1,0,3,0,52,8,0,1,0,1,0,3,0,56,8,0,5,0,58,
		8,0,10,0,12,0,61,9,0,1,0,1,0,1,1,1,1,1,1,3,1,68,8,1,1,2,1,2,3,2,72,8,2,
		1,2,3,2,75,8,2,1,2,3,2,78,8,2,1,2,1,2,3,2,82,8,2,1,2,1,2,3,2,86,8,2,5,
		2,88,8,2,10,2,12,2,91,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		3,3,104,8,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,112,8,4,1,4,1,4,1,5,1,5,1,5,1,
		5,1,5,1,5,3,5,122,8,5,1,5,1,5,1,6,1,6,1,6,1,6,3,6,130,8,6,1,6,1,6,1,7,
		1,7,1,7,1,7,3,7,138,8,7,1,7,1,7,1,8,1,8,1,8,3,8,145,8,8,1,8,1,8,3,8,149,
		8,8,1,8,1,8,3,8,153,8,8,1,8,1,8,3,8,157,8,8,1,8,1,8,3,8,161,8,8,1,8,3,
		8,164,8,8,1,8,1,8,1,9,1,9,1,9,3,9,171,8,9,1,9,1,9,3,9,175,8,9,1,9,1,9,
		3,9,179,8,9,1,9,1,9,3,9,183,8,9,1,9,3,9,186,8,9,1,9,1,9,1,9,1,9,3,9,192,
		8,9,1,9,1,9,1,9,1,9,3,9,198,8,9,1,9,1,9,3,9,202,8,9,1,9,1,9,3,9,206,8,
		9,1,9,3,9,209,8,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,
		221,8,10,1,10,3,10,224,8,10,1,10,1,10,1,11,1,11,3,11,230,8,11,1,11,5,11,
		233,8,11,10,11,12,11,236,9,11,1,11,3,11,239,8,11,1,11,1,11,3,11,243,8,
		11,1,12,1,12,3,12,247,8,12,1,12,1,12,3,12,251,8,12,1,12,1,12,3,12,255,
		8,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,
		1,18,1,18,3,18,272,8,18,1,18,1,18,3,18,276,8,18,1,18,3,18,279,8,18,1,18,
		3,18,282,8,18,1,18,1,18,3,18,286,8,18,1,18,1,18,3,18,290,8,18,5,18,292,
		8,18,10,18,12,18,295,9,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,304,
		8,18,1,18,3,18,307,8,18,1,18,1,18,1,18,1,18,3,18,313,8,18,1,18,3,18,316,
		8,18,1,18,1,18,3,18,320,8,18,1,18,1,18,3,18,324,8,18,1,18,1,18,3,18,328,
		8,18,1,18,1,18,3,18,332,8,18,1,18,1,18,1,18,1,18,3,18,338,8,18,1,18,1,
		18,3,18,342,8,18,1,18,1,18,3,18,346,8,18,1,18,1,18,3,18,350,8,18,1,18,
		1,18,1,18,1,18,3,18,356,8,18,1,18,1,18,3,18,360,8,18,1,18,1,18,1,18,1,
		18,3,18,366,8,18,1,18,1,18,3,18,370,8,18,1,18,1,18,1,18,1,18,1,18,3,18,
		377,8,18,1,18,1,18,3,18,381,8,18,1,18,1,18,1,18,1,18,3,18,387,8,18,1,18,
		1,18,3,18,391,8,18,1,18,1,18,1,18,1,18,3,18,397,8,18,1,18,1,18,3,18,401,
		8,18,1,18,1,18,1,18,3,18,406,8,18,1,18,1,18,3,18,410,8,18,1,18,1,18,1,
		18,3,18,415,8,18,1,18,1,18,3,18,419,8,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,3,18,428,8,18,1,18,1,18,3,18,432,8,18,1,18,1,18,5,18,436,8,18,10,
		18,12,18,439,9,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,3,
		23,451,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		3,24,465,8,24,1,24,0,1,36,25,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
		32,34,36,38,40,42,44,46,48,0,6,1,0,10,11,1,0,12,13,1,0,31,33,1,0,29,30,
		2,0,29,30,37,38,2,0,40,41,43,48,551,0,51,1,0,0,0,2,67,1,0,0,0,4,69,1,0,
		0,0,6,103,1,0,0,0,8,105,1,0,0,0,10,115,1,0,0,0,12,125,1,0,0,0,14,133,1,
		0,0,0,16,141,1,0,0,0,18,167,1,0,0,0,20,212,1,0,0,0,22,227,1,0,0,0,24,244,
		1,0,0,0,26,258,1,0,0,0,28,260,1,0,0,0,30,262,1,0,0,0,32,264,1,0,0,0,34,
		266,1,0,0,0,36,369,1,0,0,0,38,440,1,0,0,0,40,442,1,0,0,0,42,444,1,0,0,
		0,44,446,1,0,0,0,46,450,1,0,0,0,48,464,1,0,0,0,50,52,5,28,0,0,51,50,1,
		0,0,0,51,52,1,0,0,0,52,59,1,0,0,0,53,55,3,2,1,0,54,56,5,28,0,0,55,54,1,
		0,0,0,55,56,1,0,0,0,56,58,1,0,0,0,57,53,1,0,0,0,58,61,1,0,0,0,59,57,1,
		0,0,0,59,60,1,0,0,0,60,62,1,0,0,0,61,59,1,0,0,0,62,63,5,0,0,1,63,1,1,0,
		0,0,64,68,3,4,2,0,65,68,5,20,0,0,66,68,5,21,0,0,67,64,1,0,0,0,67,65,1,
		0,0,0,67,66,1,0,0,0,68,3,1,0,0,0,69,71,5,27,0,0,70,72,5,28,0,0,71,70,1,
		0,0,0,71,72,1,0,0,0,72,74,1,0,0,0,73,75,3,46,23,0,74,73,1,0,0,0,74,75,
		1,0,0,0,75,77,1,0,0,0,76,78,5,28,0,0,77,76,1,0,0,0,77,78,1,0,0,0,78,79,
		1,0,0,0,79,81,5,22,0,0,80,82,5,28,0,0,81,80,1,0,0,0,81,82,1,0,0,0,82,89,
		1,0,0,0,83,85,3,6,3,0,84,86,5,28,0,0,85,84,1,0,0,0,85,86,1,0,0,0,86,88,
		1,0,0,0,87,83,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,92,
		1,0,0,0,91,89,1,0,0,0,92,93,5,23,0,0,93,5,1,0,0,0,94,104,3,8,4,0,95,104,
		3,10,5,0,96,104,3,12,6,0,97,104,3,14,7,0,98,104,3,16,8,0,99,104,3,18,9,
		0,100,104,3,20,10,0,101,104,5,20,0,0,102,104,5,21,0,0,103,94,1,0,0,0,103,
		95,1,0,0,0,103,96,1,0,0,0,103,97,1,0,0,0,103,98,1,0,0,0,103,99,1,0,0,0,
		103,100,1,0,0,0,103,101,1,0,0,0,103,102,1,0,0,0,104,7,1,0,0,0,105,106,
		5,27,0,0,106,107,5,28,0,0,107,108,5,27,0,0,108,109,5,28,0,0,109,111,3,
		36,18,0,110,112,5,28,0,0,111,110,1,0,0,0,111,112,1,0,0,0,112,113,1,0,0,
		0,113,114,5,26,0,0,114,9,1,0,0,0,115,116,5,1,0,0,116,117,5,28,0,0,117,
		118,5,27,0,0,118,119,5,28,0,0,119,121,3,36,18,0,120,122,5,28,0,0,121,120,
		1,0,0,0,121,122,1,0,0,0,122,123,1,0,0,0,123,124,5,26,0,0,124,11,1,0,0,
		0,125,126,5,2,0,0,126,127,5,28,0,0,127,129,3,36,18,0,128,130,5,28,0,0,
		129,128,1,0,0,0,129,130,1,0,0,0,130,131,1,0,0,0,131,132,5,26,0,0,132,13,
		1,0,0,0,133,134,5,3,0,0,134,135,5,28,0,0,135,137,3,36,18,0,136,138,5,28,
		0,0,137,136,1,0,0,0,137,138,1,0,0,0,138,139,1,0,0,0,139,140,5,26,0,0,140,
		15,1,0,0,0,141,142,5,27,0,0,142,144,5,24,0,0,143,145,5,28,0,0,144,143,
		1,0,0,0,144,145,1,0,0,0,145,146,1,0,0,0,146,148,3,36,18,0,147,149,5,28,
		0,0,148,147,1,0,0,0,148,149,1,0,0,0,149,150,1,0,0,0,150,152,5,25,0,0,151,
		153,5,28,0,0,152,151,1,0,0,0,152,153,1,0,0,0,153,154,1,0,0,0,154,156,5,
		27,0,0,155,157,5,28,0,0,156,155,1,0,0,0,156,157,1,0,0,0,157,158,1,0,0,
		0,158,160,3,36,18,0,159,161,5,28,0,0,160,159,1,0,0,0,160,161,1,0,0,0,161,
		163,1,0,0,0,162,164,3,22,11,0,163,162,1,0,0,0,163,164,1,0,0,0,164,165,
		1,0,0,0,165,166,5,26,0,0,166,17,1,0,0,0,167,168,5,27,0,0,168,170,5,24,
		0,0,169,171,5,28,0,0,170,169,1,0,0,0,170,171,1,0,0,0,171,172,1,0,0,0,172,
		174,3,36,18,0,173,175,5,28,0,0,174,173,1,0,0,0,174,175,1,0,0,0,175,176,
		1,0,0,0,176,178,5,25,0,0,177,179,5,28,0,0,178,177,1,0,0,0,178,179,1,0,
		0,0,179,180,1,0,0,0,180,182,5,4,0,0,181,183,5,29,0,0,182,181,1,0,0,0,182,
		183,1,0,0,0,183,185,1,0,0,0,184,186,5,28,0,0,185,184,1,0,0,0,185,186,1,
		0,0,0,186,187,1,0,0,0,187,188,5,27,0,0,188,189,5,24,0,0,189,191,5,25,0,
		0,190,192,5,28,0,0,191,190,1,0,0,0,191,192,1,0,0,0,192,193,1,0,0,0,193,
		194,5,27,0,0,194,195,5,28,0,0,195,197,3,36,18,0,196,198,5,28,0,0,197,196,
		1,0,0,0,197,198,1,0,0,0,198,199,1,0,0,0,199,201,5,5,0,0,200,202,5,28,0,
		0,201,200,1,0,0,0,201,202,1,0,0,0,202,203,1,0,0,0,203,205,3,36,18,0,204,
		206,5,28,0,0,205,204,1,0,0,0,205,206,1,0,0,0,206,208,1,0,0,0,207,209,3,
		22,11,0,208,207,1,0,0,0,208,209,1,0,0,0,209,210,1,0,0,0,210,211,5,26,0,
		0,211,19,1,0,0,0,212,213,5,6,0,0,213,214,5,28,0,0,214,215,5,27,0,0,215,
		216,5,28,0,0,216,217,3,36,18,0,217,218,5,28,0,0,218,220,3,36,18,0,219,
		221,5,28,0,0,220,219,1,0,0,0,220,221,1,0,0,0,221,223,1,0,0,0,222,224,3,
		22,11,0,223,222,1,0,0,0,223,224,1,0,0,0,224,225,1,0,0,0,225,226,5,26,0,
		0,226,21,1,0,0,0,227,234,5,22,0,0,228,230,5,28,0,0,229,228,1,0,0,0,229,
		230,1,0,0,0,230,231,1,0,0,0,231,233,3,24,12,0,232,229,1,0,0,0,233,236,
		1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,
		0,237,239,5,28,0,0,238,237,1,0,0,0,238,239,1,0,0,0,239,240,1,0,0,0,240,
		242,5,23,0,0,241,243,5,28,0,0,242,241,1,0,0,0,242,243,1,0,0,0,243,23,1,
		0,0,0,244,246,5,27,0,0,245,247,5,28,0,0,246,245,1,0,0,0,246,247,1,0,0,
		0,247,248,1,0,0,0,248,250,5,39,0,0,249,251,5,28,0,0,250,249,1,0,0,0,250,
		251,1,0,0,0,251,252,1,0,0,0,252,254,3,36,18,0,253,255,5,28,0,0,254,253,
		1,0,0,0,254,255,1,0,0,0,255,256,1,0,0,0,256,257,5,26,0,0,257,25,1,0,0,
		0,258,259,5,7,0,0,259,27,1,0,0,0,260,261,5,8,0,0,261,29,1,0,0,0,262,263,
		5,9,0,0,263,31,1,0,0,0,264,265,7,0,0,0,265,33,1,0,0,0,266,267,7,1,0,0,
		267,35,1,0,0,0,268,269,6,18,-1,0,269,271,5,27,0,0,270,272,5,28,0,0,271,
		270,1,0,0,0,271,272,1,0,0,0,272,273,1,0,0,0,273,275,5,14,0,0,274,276,5,
		28,0,0,275,274,1,0,0,0,275,276,1,0,0,0,276,278,1,0,0,0,277,279,3,36,18,
		0,278,277,1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,280,282,5,28,0,0,281,
		280,1,0,0,0,281,282,1,0,0,0,282,293,1,0,0,0,283,285,5,5,0,0,284,286,5,
		28,0,0,285,284,1,0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,287,289,3,36,18,
		0,288,290,5,28,0,0,289,288,1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,291,
		283,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,296,1,
		0,0,0,295,293,1,0,0,0,296,370,5,15,0,0,297,298,5,16,0,0,298,370,5,27,0,
		0,299,370,3,48,24,0,300,301,5,17,0,0,301,303,3,36,18,0,302,304,5,28,0,
		0,303,302,1,0,0,0,303,304,1,0,0,0,304,306,1,0,0,0,305,307,3,22,11,0,306,
		305,1,0,0,0,306,307,1,0,0,0,307,370,1,0,0,0,308,309,5,27,0,0,309,310,5,
		17,0,0,310,312,3,36,18,0,311,313,5,28,0,0,312,311,1,0,0,0,312,313,1,0,
		0,0,313,315,1,0,0,0,314,316,3,22,11,0,315,314,1,0,0,0,315,316,1,0,0,0,
		316,370,1,0,0,0,317,319,5,24,0,0,318,320,5,28,0,0,319,318,1,0,0,0,319,
		320,1,0,0,0,320,321,1,0,0,0,321,323,3,36,18,0,322,324,5,28,0,0,323,322,
		1,0,0,0,323,324,1,0,0,0,324,325,1,0,0,0,325,327,5,18,0,0,326,328,5,28,
		0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,0,329,331,3,36,18,0,
		330,332,5,28,0,0,331,330,1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,334,
		5,25,0,0,334,370,1,0,0,0,335,337,5,24,0,0,336,338,5,28,0,0,337,336,1,0,
		0,0,337,338,1,0,0,0,338,339,1,0,0,0,339,341,3,36,18,0,340,342,5,28,0,0,
		341,340,1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,0,343,345,5,5,0,0,344,346,
		5,28,0,0,345,344,1,0,0,0,345,346,1,0,0,0,346,347,1,0,0,0,347,349,3,36,
		18,0,348,350,5,28,0,0,349,348,1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,
		351,352,5,25,0,0,352,370,1,0,0,0,353,355,5,14,0,0,354,356,5,28,0,0,355,
		354,1,0,0,0,355,356,1,0,0,0,356,357,1,0,0,0,357,359,3,36,18,0,358,360,
		5,28,0,0,359,358,1,0,0,0,359,360,1,0,0,0,360,361,1,0,0,0,361,362,5,15,
		0,0,362,370,1,0,0,0,363,365,3,42,21,0,364,366,5,28,0,0,365,364,1,0,0,0,
		365,366,1,0,0,0,366,367,1,0,0,0,367,368,3,36,18,6,368,370,1,0,0,0,369,
		268,1,0,0,0,369,297,1,0,0,0,369,299,1,0,0,0,369,300,1,0,0,0,369,308,1,
		0,0,0,369,317,1,0,0,0,369,335,1,0,0,0,369,353,1,0,0,0,369,363,1,0,0,0,
		370,437,1,0,0,0,371,372,10,9,0,0,372,373,5,37,0,0,373,436,3,36,18,10,374,
		376,10,5,0,0,375,377,5,28,0,0,376,375,1,0,0,0,376,377,1,0,0,0,377,378,
		1,0,0,0,378,380,3,38,19,0,379,381,5,28,0,0,380,379,1,0,0,0,380,381,1,0,
		0,0,381,382,1,0,0,0,382,383,3,36,18,6,383,436,1,0,0,0,384,386,10,4,0,0,
		385,387,5,28,0,0,386,385,1,0,0,0,386,387,1,0,0,0,387,388,1,0,0,0,388,390,
		3,40,20,0,389,391,5,28,0,0,390,389,1,0,0,0,390,391,1,0,0,0,391,392,1,0,
		0,0,392,393,3,36,18,5,393,436,1,0,0,0,394,396,10,3,0,0,395,397,5,28,0,
		0,396,395,1,0,0,0,396,397,1,0,0,0,397,398,1,0,0,0,398,400,5,34,0,0,399,
		401,5,28,0,0,400,399,1,0,0,0,400,401,1,0,0,0,401,402,1,0,0,0,402,436,3,
		36,18,4,403,405,10,2,0,0,404,406,5,28,0,0,405,404,1,0,0,0,405,406,1,0,
		0,0,406,407,1,0,0,0,407,409,5,36,0,0,408,410,5,28,0,0,409,408,1,0,0,0,
		409,410,1,0,0,0,410,411,1,0,0,0,411,436,3,36,18,3,412,414,10,1,0,0,413,
		415,5,28,0,0,414,413,1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,0,416,418,5,
		35,0,0,417,419,5,28,0,0,418,417,1,0,0,0,418,419,1,0,0,0,419,420,1,0,0,
		0,420,436,3,36,18,2,421,422,10,10,0,0,422,423,5,19,0,0,423,436,5,27,0,
		0,424,425,10,8,0,0,425,427,5,24,0,0,426,428,5,28,0,0,427,426,1,0,0,0,427,
		428,1,0,0,0,428,429,1,0,0,0,429,431,3,36,18,0,430,432,5,28,0,0,431,430,
		1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,434,5,25,0,0,434,436,1,0,0,
		0,435,371,1,0,0,0,435,374,1,0,0,0,435,384,1,0,0,0,435,394,1,0,0,0,435,
		403,1,0,0,0,435,412,1,0,0,0,435,421,1,0,0,0,435,424,1,0,0,0,436,439,1,
		0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,37,1,0,0,0,439,437,1,0,0,0,440,
		441,7,2,0,0,441,39,1,0,0,0,442,443,7,3,0,0,443,41,1,0,0,0,444,445,7,4,
		0,0,445,43,1,0,0,0,446,447,7,5,0,0,447,45,1,0,0,0,448,451,5,49,0,0,449,
		451,5,50,0,0,450,448,1,0,0,0,450,449,1,0,0,0,451,47,1,0,0,0,452,465,3,
		26,13,0,453,465,3,28,14,0,454,465,3,30,15,0,455,465,3,32,16,0,456,465,
		3,34,17,0,457,465,5,27,0,0,458,465,5,49,0,0,459,465,5,50,0,0,460,465,5,
		51,0,0,461,465,5,52,0,0,462,465,5,53,0,0,463,465,5,54,0,0,464,452,1,0,
		0,0,464,453,1,0,0,0,464,454,1,0,0,0,464,455,1,0,0,0,464,456,1,0,0,0,464,
		457,1,0,0,0,464,458,1,0,0,0,464,459,1,0,0,0,464,460,1,0,0,0,464,461,1,
		0,0,0,464,462,1,0,0,0,464,463,1,0,0,0,465,49,1,0,0,0,79,51,55,59,67,71,
		74,77,81,85,89,103,111,121,129,137,144,148,152,156,160,163,170,174,178,
		182,185,191,197,201,205,208,220,223,229,234,238,242,246,250,254,271,275,
		278,281,285,289,293,303,306,312,315,319,323,327,331,337,341,345,349,355,
		359,365,369,376,380,386,390,396,400,405,409,414,418,427,431,435,437,450,
		464
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
