//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/jake/Projects/GitHub/Linear/scripts/../Linear.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class LinearParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, OPEN=16, CLOSE=17, 
		OPENSQ=18, CLOSESQ=19, ENDL=20, IDENTIFIER=21, WS=22, PLUS=23, MINUS=24, 
		STAR=25, DIV=26, PERCENT=27, AMP=28, BITWISE_OR=29, CARET=30, BANG=31, 
		TILDE=32, ASSIGNMENT=33, LT=34, GT=35, INTERR=36, OP_AND=37, OP_OR=38, 
		OP_EQ=39, OP_NE=40, OP_LE=41, OP_GE=42, INTEGER_LITERAL=43, HEX_INTEGER_LITERAL=44, 
		REAL_LITERAL=45, CHARACTER_LITERAL=46, REGULAR_STRING=47, VERBATIM_STRING=48;
	public const int
		RULE_compilation_unit = 0, RULE_struct = 1, RULE_struct_statement = 2, 
		RULE_struct_statement_define = 3, RULE_struct_statement_define_ranged = 4, 
		RULE_struct_statement_define_array = 5, RULE_struct_statement_define_array_indirect = 6, 
		RULE_struct_statement_output = 7, RULE_struct_statement_comment = 8, RULE_range_end = 9, 
		RULE_range_length = 10, RULE_property_group = 11, RULE_property_statement = 12, 
		RULE_term_replacement_length = 13, RULE_term_replacement_i = 14, RULE_term_replacement_p = 15, 
		RULE_term_replacement_u = 16, RULE_expr = 17, RULE_op = 18, RULE_un_op = 19, 
		RULE_bool_op = 20, RULE_term = 21;
	public static readonly string[] ruleNames = {
		"compilation_unit", "struct", "struct_statement", "struct_statement_define", 
		"struct_statement_define_ranged", "struct_statement_define_array", "struct_statement_define_array_indirect", 
		"struct_statement_output", "struct_statement_comment", "range_end", "range_length", 
		"property_group", "property_statement", "term_replacement_length", "term_replacement_i", 
		"term_replacement_p", "term_replacement_u", "expr", "op", "un_op", "bool_op", 
		"term"
	};

	private static readonly string[] _LiteralNames = {
		null, "'->'", "'output'", "'//'", "','", "'end:'", "'length:'", "'$length'", 
		"'$i'", "'$p'", "'$parent'", "'$u'", "'$unique'", "'.'", "'('", "')'", 
		"'{'", "'}'", "'['", "']'", "';'", null, null, "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'?'", 
		"'&&'", "'||'", "'=='", "'!='", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "OPEN", "CLOSE", "OPENSQ", "CLOSESQ", "ENDL", 
		"IDENTIFIER", "WS", "PLUS", "MINUS", "STAR", "DIV", "PERCENT", "AMP", 
		"BITWISE_OR", "CARET", "BANG", "TILDE", "ASSIGNMENT", "LT", "GT", "INTERR", 
		"OP_AND", "OP_OR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", "INTEGER_LITERAL", 
		"HEX_INTEGER_LITERAL", "REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", 
		"VERBATIM_STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Linear.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LinearParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LinearParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LinearParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(LinearParser.Eof, 0); }
		public StructContext[] @struct() {
			return GetRuleContexts<StructContext>();
		}
		public StructContext @struct(int i) {
			return GetRuleContext<StructContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER || _la==WS) {
				{
				{
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 44; Match(WS);
					}
				}

				State = 47; @struct();
				State = 49;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 48; Match(WS);
					}
					break;
				}
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 56; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ITerminalNode OPEN() { return GetToken(LinearParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(LinearParser.CLOSE, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Struct_statementContext[] struct_statement() {
			return GetRuleContexts<Struct_statementContext>();
		}
		public Struct_statementContext struct_statement(int i) {
			return GetRuleContext<Struct_statementContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 2, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; Match(IDENTIFIER);
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 59; Match(WS);
				}
			}

			State = 62; Match(OPEN);
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 63; Match(WS);
				}
			}

			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 66; struct_statement();
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 67; Match(WS);
					}
				}

				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 75; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statementContext : ParserRuleContext {
		public Struct_statement_defineContext struct_statement_define() {
			return GetRuleContext<Struct_statement_defineContext>(0);
		}
		public Struct_statement_define_rangedContext struct_statement_define_ranged() {
			return GetRuleContext<Struct_statement_define_rangedContext>(0);
		}
		public Struct_statement_define_arrayContext struct_statement_define_array() {
			return GetRuleContext<Struct_statement_define_arrayContext>(0);
		}
		public Struct_statement_define_array_indirectContext struct_statement_define_array_indirect() {
			return GetRuleContext<Struct_statement_define_array_indirectContext>(0);
		}
		public Struct_statement_outputContext struct_statement_output() {
			return GetRuleContext<Struct_statement_outputContext>(0);
		}
		public Struct_statement_commentContext struct_statement_comment() {
			return GetRuleContext<Struct_statement_commentContext>(0);
		}
		public Struct_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statementContext struct_statement() {
		Struct_statementContext _localctx = new Struct_statementContext(Context, State);
		EnterRule(_localctx, 4, RULE_struct_statement);
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77; struct_statement_define();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78; struct_statement_define_ranged();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 79; struct_statement_define_array();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 80; struct_statement_define_array_indirect();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 81; struct_statement_output();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 82; struct_statement_comment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_defineContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_defineContext struct_statement_define() {
		Struct_statement_defineContext _localctx = new Struct_statement_defineContext(Context, State);
		EnterRule(_localctx, 6, RULE_struct_statement_define);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(IDENTIFIER);
			State = 86; Match(WS);
			State = 87; Match(IDENTIFIER);
			State = 88; Match(WS);
			State = 89; expr(0);
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 90; Match(WS);
				}
			}

			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 93; property_group();
				}
			}

			State = 96; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_rangedContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Range_endContext range_end() {
			return GetRuleContext<Range_endContext>(0);
		}
		public Range_lengthContext range_length() {
			return GetRuleContext<Range_lengthContext>(0);
		}
		public Struct_statement_define_rangedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_ranged; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_ranged(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_ranged(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_rangedContext struct_statement_define_ranged() {
		Struct_statement_define_rangedContext _localctx = new Struct_statement_define_rangedContext(Context, State);
		EnterRule(_localctx, 8, RULE_struct_statement_define_ranged);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(IDENTIFIER);
			State = 99; Match(WS);
			State = 100; Match(IDENTIFIER);
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 101; Match(WS);
				}
			}

			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 104; range_end();
				}
				break;
			case 2:
				{
				State = 105; range_length();
				}
				break;
			}
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 108; Match(WS);
				}
			}

			State = 111; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_arrayContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_define_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_array(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_array(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_arrayContext struct_statement_define_array() {
		Struct_statement_define_arrayContext _localctx = new Struct_statement_define_arrayContext(Context, State);
		EnterRule(_localctx, 10, RULE_struct_statement_define_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(IDENTIFIER);
			State = 114; Match(OPENSQ);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 115; Match(WS);
				}
			}

			State = 118; expr(0);
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 119; Match(WS);
				}
			}

			State = 122; Match(CLOSESQ);
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 123; Match(WS);
				}
			}

			State = 126; Match(IDENTIFIER);
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 127; Match(WS);
				}
			}

			State = 130; expr(0);
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 131; Match(WS);
				}
			}

			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 134; property_group();
				}
			}

			State = 137; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_array_indirectContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		public ITerminalNode[] OPENSQ() { return GetTokens(LinearParser.OPENSQ); }
		public ITerminalNode OPENSQ(int i) {
			return GetToken(LinearParser.OPENSQ, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] CLOSESQ() { return GetTokens(LinearParser.CLOSESQ); }
		public ITerminalNode CLOSESQ(int i) {
			return GetToken(LinearParser.CLOSESQ, i);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_define_array_indirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_array_indirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_array_indirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_array_indirect(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_array_indirectContext struct_statement_define_array_indirect() {
		Struct_statement_define_array_indirectContext _localctx = new Struct_statement_define_array_indirectContext(Context, State);
		EnterRule(_localctx, 12, RULE_struct_statement_define_array_indirect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(IDENTIFIER);
			State = 140; Match(OPENSQ);
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 141; Match(WS);
				}
			}

			State = 144; expr(0);
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 145; Match(WS);
				}
			}

			State = 148; Match(CLOSESQ);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 149; Match(WS);
				}
			}

			State = 152; Match(T__0);
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS) {
				{
				State = 153; Match(PLUS);
				}
			}

			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 156; Match(WS);
				}
			}

			State = 159; Match(IDENTIFIER);
			State = 160; Match(OPENSQ);
			State = 161; Match(CLOSESQ);
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 162; Match(WS);
				}
			}

			State = 165; Match(IDENTIFIER);
			State = 166; Match(WS);
			State = 167; expr(0);
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 168; Match(WS);
				}
			}

			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 171; property_group();
				}
			}

			State = 174; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_outputContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_outputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_output; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_output(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_output(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_outputContext struct_statement_output() {
		Struct_statement_outputContext _localctx = new Struct_statement_outputContext(Context, State);
		EnterRule(_localctx, 14, RULE_struct_statement_output);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; Match(T__1);
			State = 177; Match(WS);
			State = 178; Match(IDENTIFIER);
			State = 179; Match(WS);
			State = 180; Match(IDENTIFIER);
			State = 181; Match(WS);
			State = 182; expr(0);
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 183; Match(WS);
				}
			}

			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 186; property_group();
				}
			}

			State = 189; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_commentContext : ParserRuleContext {
		public ITerminalNode[] ENDL() { return GetTokens(LinearParser.ENDL); }
		public ITerminalNode ENDL(int i) {
			return GetToken(LinearParser.ENDL, i);
		}
		public Struct_statement_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_comment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_comment(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_commentContext struct_statement_comment() {
		Struct_statement_commentContext _localctx = new Struct_statement_commentContext(Context, State);
		EnterRule(_localctx, 16, RULE_struct_statement_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(T__2);
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << OPEN) | (1L << CLOSE) | (1L << OPENSQ) | (1L << CLOSESQ) | (1L << IDENTIFIER) | (1L << WS) | (1L << PLUS) | (1L << MINUS) | (1L << STAR) | (1L << DIV) | (1L << PERCENT) | (1L << AMP) | (1L << BITWISE_OR) | (1L << CARET) | (1L << BANG) | (1L << TILDE) | (1L << ASSIGNMENT) | (1L << LT) | (1L << GT) | (1L << INTERR) | (1L << OP_AND) | (1L << OP_OR) | (1L << OP_EQ) | (1L << OP_NE) | (1L << OP_LE) | (1L << OP_GE) | (1L << INTEGER_LITERAL) | (1L << HEX_INTEGER_LITERAL) | (1L << REAL_LITERAL) | (1L << CHARACTER_LITERAL) | (1L << REGULAR_STRING) | (1L << VERBATIM_STRING))) != 0)) {
				{
				{
				State = 192;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==ENDL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 198; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_endContext : ParserRuleContext {
		public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Range_endContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterRange_end(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitRange_end(this);
		}
	}

	[RuleVersion(0)]
	public Range_endContext range_end() {
		Range_endContext _localctx = new Range_endContext(Context, State);
		EnterRule(_localctx, 18, RULE_range_end);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(OPENSQ);
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 201; Match(WS);
				}
			}

			State = 204; expr(0);
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 205; Match(WS);
				}
			}

			State = 208; Match(T__3);
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 209; Match(WS);
				}
			}

			State = 212; Match(T__4);
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 213; Match(WS);
				}
			}

			State = 216; expr(0);
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 217; Match(WS);
				}
			}

			State = 220; Match(CLOSESQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_lengthContext : ParserRuleContext {
		public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Range_lengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_length; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterRange_length(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitRange_length(this);
		}
	}

	[RuleVersion(0)]
	public Range_lengthContext range_length() {
		Range_lengthContext _localctx = new Range_lengthContext(Context, State);
		EnterRule(_localctx, 20, RULE_range_length);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(OPENSQ);
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 223; Match(WS);
				}
			}

			State = 226; expr(0);
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 227; Match(WS);
				}
			}

			State = 230; Match(T__3);
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 231; Match(WS);
				}
			}

			State = 234; Match(T__5);
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 235; Match(WS);
				}
			}

			State = 238; expr(0);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 239; Match(WS);
				}
			}

			State = 242; Match(CLOSESQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_groupContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(LinearParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(LinearParser.CLOSE, 0); }
		public Property_statementContext[] property_statement() {
			return GetRuleContexts<Property_statementContext>();
		}
		public Property_statementContext property_statement(int i) {
			return GetRuleContext<Property_statementContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Property_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterProperty_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitProperty_group(this);
		}
	}

	[RuleVersion(0)]
	public Property_groupContext property_group() {
		Property_groupContext _localctx = new Property_groupContext(Context, State);
		EnterRule(_localctx, 22, RULE_property_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; Match(OPEN);
			State = 251;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 246;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 245; Match(WS);
						}
					}

					State = 248; property_statement();
					}
					} 
				}
				State = 253;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 254; Match(WS);
				}
			}

			State = 257; Match(CLOSE);
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 258; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_statementContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(LinearParser.ASSIGNMENT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Property_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterProperty_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitProperty_statement(this);
		}
	}

	[RuleVersion(0)]
	public Property_statementContext property_statement() {
		Property_statementContext _localctx = new Property_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_property_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; Match(IDENTIFIER);
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 262; Match(WS);
				}
			}

			State = 265; Match(ASSIGNMENT);
			State = 267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 266; Match(WS);
				}
			}

			State = 269; expr(0);
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 270; Match(WS);
				}
			}

			State = 273; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_lengthContext : ParserRuleContext {
		public Term_replacement_lengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_length; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_length(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_length(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_lengthContext term_replacement_length() {
		Term_replacement_lengthContext _localctx = new Term_replacement_lengthContext(Context, State);
		EnterRule(_localctx, 26, RULE_term_replacement_length);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_iContext : ParserRuleContext {
		public Term_replacement_iContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_i; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_i(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_i(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_iContext term_replacement_i() {
		Term_replacement_iContext _localctx = new Term_replacement_iContext(Context, State);
		EnterRule(_localctx, 28, RULE_term_replacement_i);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_pContext : ParserRuleContext {
		public Term_replacement_pContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_p; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_p(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_p(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_pContext term_replacement_p() {
		Term_replacement_pContext _localctx = new Term_replacement_pContext(Context, State);
		EnterRule(_localctx, 30, RULE_term_replacement_p);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_uContext : ParserRuleContext {
		public Term_replacement_uContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_u; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_u(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_u(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_uContext term_replacement_u() {
		Term_replacement_uContext _localctx = new Term_replacement_uContext(Context, State);
		EnterRule(_localctx, 32, RULE_term_replacement_u);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__11) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprArrayAccessContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprArrayAccessContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprArrayAccess(this);
		}
	}
	public partial class ExprUnOpContext : ExprContext {
		public Un_opContext un_op() {
			return GetRuleContext<Un_opContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode WS() { return GetToken(LinearParser.WS, 0); }
		public ExprUnOpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprUnOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprUnOp(this);
		}
	}
	public partial class ExprTermContext : ExprContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ExprTermContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprTerm(this);
		}
	}
	public partial class ExprOpContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OpContext op() {
			return GetRuleContext<OpContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOp(this);
		}
	}
	public partial class ExprWrappedContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprWrappedContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprWrapped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprWrapped(this);
		}
	}
	public partial class ExprBoolOpContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Bool_opContext bool_op() {
			return GetRuleContext<Bool_opContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprBoolOpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprBoolOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprBoolOp(this);
		}
	}
	public partial class ExprMemberContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ExprMemberContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprMember(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				_localctx = new ExprTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 284; term();
				}
				break;
			case 2:
				{
				_localctx = new ExprArrayAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 285; Match(IDENTIFIER);
				State = 286; Match(OPENSQ);
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 287; Match(WS);
					}
				}

				State = 290; expr(0);
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 291; Match(WS);
					}
				}

				State = 294; Match(CLOSESQ);
				}
				break;
			case 3:
				{
				_localctx = new ExprUnOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 296; un_op();
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 297; Match(WS);
					}
				}

				State = 300; expr(2);
				}
				break;
			case 4:
				{
				_localctx = new ExprWrappedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 302; Match(T__13);
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 303; Match(WS);
					}
				}

				State = 306; expr(0);
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 307; Match(WS);
					}
				}

				State = 310; Match(T__14);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 339;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 337;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
					case 1:
						{
						_localctx = new ExprOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 314;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 316;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 315; Match(WS);
							}
						}

						State = 318; op();
						State = 320;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 319; Match(WS);
							}
						}

						State = 322; expr(5);
						}
						break;
					case 2:
						{
						_localctx = new ExprBoolOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 324;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 326;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 325; Match(WS);
							}
						}

						State = 328; bool_op();
						State = 330;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 329; Match(WS);
							}
						}

						State = 332; expr(4);
						}
						break;
					case 3:
						{
						_localctx = new ExprMemberContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 334;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 335; Match(T__12);
						State = 336; Match(IDENTIFIER);
						}
						break;
					}
					} 
				}
				State = 341;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OpContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(LinearParser.MINUS, 0); }
		public ITerminalNode STAR() { return GetToken(LinearParser.STAR, 0); }
		public ITerminalNode DIV() { return GetToken(LinearParser.DIV, 0); }
		public ITerminalNode PERCENT() { return GetToken(LinearParser.PERCENT, 0); }
		public ITerminalNode AMP() { return GetToken(LinearParser.AMP, 0); }
		public ITerminalNode BITWISE_OR() { return GetToken(LinearParser.BITWISE_OR, 0); }
		public ITerminalNode CARET() { return GetToken(LinearParser.CARET, 0); }
		public OpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitOp(this);
		}
	}

	[RuleVersion(0)]
	public OpContext op() {
		OpContext _localctx = new OpContext(Context, State);
		EnterRule(_localctx, 36, RULE_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << STAR) | (1L << DIV) | (1L << PERCENT) | (1L << AMP) | (1L << BITWISE_OR) | (1L << CARET))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Un_opContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(LinearParser.MINUS, 0); }
		public ITerminalNode BANG() { return GetToken(LinearParser.BANG, 0); }
		public ITerminalNode TILDE() { return GetToken(LinearParser.TILDE, 0); }
		public Un_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_un_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterUn_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitUn_op(this);
		}
	}

	[RuleVersion(0)]
	public Un_opContext un_op() {
		Un_opContext _localctx = new Un_opContext(Context, State);
		EnterRule(_localctx, 38, RULE_un_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << BANG) | (1L << TILDE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_opContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(LinearParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(LinearParser.GT, 0); }
		public ITerminalNode OP_AND() { return GetToken(LinearParser.OP_AND, 0); }
		public ITerminalNode OP_OR() { return GetToken(LinearParser.OP_OR, 0); }
		public ITerminalNode OP_EQ() { return GetToken(LinearParser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(LinearParser.OP_NE, 0); }
		public ITerminalNode OP_LE() { return GetToken(LinearParser.OP_LE, 0); }
		public ITerminalNode OP_GE() { return GetToken(LinearParser.OP_GE, 0); }
		public Bool_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterBool_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitBool_op(this);
		}
	}

	[RuleVersion(0)]
	public Bool_opContext bool_op() {
		Bool_opContext _localctx = new Bool_opContext(Context, State);
		EnterRule(_localctx, 40, RULE_bool_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << GT) | (1L << OP_AND) | (1L << OP_OR) | (1L << OP_EQ) | (1L << OP_NE) | (1L << OP_LE) | (1L << OP_GE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermHexContext : TermContext {
		public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(LinearParser.HEX_INTEGER_LITERAL, 0); }
		public TermHexContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermHex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermHex(this);
		}
	}
	public partial class TermCharContext : TermContext {
		public ITerminalNode CHARACTER_LITERAL() { return GetToken(LinearParser.CHARACTER_LITERAL, 0); }
		public TermCharContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermChar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermChar(this);
		}
	}
	public partial class TermRepUContext : TermContext {
		public Term_replacement_uContext term_replacement_u() {
			return GetRuleContext<Term_replacement_uContext>(0);
		}
		public TermRepUContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepU(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepU(this);
		}
	}
	public partial class TermRepLengthContext : TermContext {
		public Term_replacement_lengthContext term_replacement_length() {
			return GetRuleContext<Term_replacement_lengthContext>(0);
		}
		public TermRepLengthContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepLength(this);
		}
	}
	public partial class TermRepPContext : TermContext {
		public Term_replacement_pContext term_replacement_p() {
			return GetRuleContext<Term_replacement_pContext>(0);
		}
		public TermRepPContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepP(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepP(this);
		}
	}
	public partial class TermIdentifierContext : TermContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public TermIdentifierContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermIdentifier(this);
		}
	}
	public partial class TermIntContext : TermContext {
		public ITerminalNode INTEGER_LITERAL() { return GetToken(LinearParser.INTEGER_LITERAL, 0); }
		public TermIntContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermInt(this);
		}
	}
	public partial class TermRealContext : TermContext {
		public ITerminalNode REAL_LITERAL() { return GetToken(LinearParser.REAL_LITERAL, 0); }
		public TermRealContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermReal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermReal(this);
		}
	}
	public partial class TermStringContext : TermContext {
		public ITerminalNode REGULAR_STRING() { return GetToken(LinearParser.REGULAR_STRING, 0); }
		public TermStringContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermString(this);
		}
	}
	public partial class TermStringVerbContext : TermContext {
		public ITerminalNode VERBATIM_STRING() { return GetToken(LinearParser.VERBATIM_STRING, 0); }
		public TermStringVerbContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermStringVerb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermStringVerb(this);
		}
	}
	public partial class TermRepIContext : TermContext {
		public Term_replacement_iContext term_replacement_i() {
			return GetRuleContext<Term_replacement_iContext>(0);
		}
		public TermRepIContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepI(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepI(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 42, RULE_term);
		try {
			State = 359;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				_localctx = new TermRepLengthContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 348; term_replacement_length();
				}
				break;
			case T__7:
				_localctx = new TermRepIContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 349; term_replacement_i();
				}
				break;
			case T__8:
			case T__9:
				_localctx = new TermRepPContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 350; term_replacement_p();
				}
				break;
			case T__10:
			case T__11:
				_localctx = new TermRepUContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 351; term_replacement_u();
				}
				break;
			case IDENTIFIER:
				_localctx = new TermIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 352; Match(IDENTIFIER);
				}
				break;
			case INTEGER_LITERAL:
				_localctx = new TermIntContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 353; Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				_localctx = new TermHexContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 354; Match(HEX_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				_localctx = new TermRealContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 355; Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				_localctx = new TermCharContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 356; Match(CHARACTER_LITERAL);
				}
				break;
			case REGULAR_STRING:
				_localctx = new TermStringContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 357; Match(REGULAR_STRING);
				}
				break;
			case VERBATIM_STRING:
				_localctx = new TermStringVerbContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 358; Match(VERBATIM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 6);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x32', '\x16C', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x5', 
		'\x2', '\x30', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'\x34', '\n', '\x2', '\a', '\x2', '\x36', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x39', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '?', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x43', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', 'G', '\n', '\x3', '\a', '\x3', 'I', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', 'L', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', 'V', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '^', '\n', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x61', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'i', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'm', '\n', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'p', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'w', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '{', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\x7F', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\x83', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x87', '\n', '\a', '\x3', '\a', '\x5', '\a', '\x8A', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x91', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x95', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x99', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', '\x9D', '\n', '\b', '\x3', '\b', '\x5', 
		'\b', '\xA0', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\xA6', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', '\xAC', '\n', '\b', '\x3', '\b', '\x5', 
		'\b', '\xAF', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\xBB', '\n', '\t', '\x3', '\t', '\x5', '\t', 
		'\xBE', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\a', '\n', '\xC4', '\n', '\n', '\f', '\n', '\xE', '\n', '\xC7', '\v', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\xCD', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xD1', '\n', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xD5', '\n', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\xD9', '\n', '\v', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\xDD', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\xE3', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\xE7', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', '\xEB', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xEF', 
		'\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xF3', '\n', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xF9', 
		'\n', '\r', '\x3', '\r', '\a', '\r', '\xFC', '\n', '\r', '\f', '\r', '\xE', 
		'\r', '\xFF', '\v', '\r', '\x3', '\r', '\x5', '\r', '\x102', '\n', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\x106', '\n', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\x10A', '\n', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\x10E', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x112', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x123', '\n', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x127', '\n', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x12D', 
		'\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x133', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x137', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x13B', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x13F', 
		'\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x143', '\n', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x149', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x14D', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\a', '\x13', '\x154', '\n', '\x13', '\f', '\x13', 
		'\xE', '\x13', '\x157', '\v', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x16A', '\n', '\x17', '\x3', '\x17', '\x2', '\x3', '$', '\x18', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '\x2', '\b', '\x3', '\x2', '\x16', '\x16', '\x3', '\x2', '\v', '\f', 
		'\x3', '\x2', '\r', '\xE', '\x3', '\x2', '\x19', ' ', '\x4', '\x2', '\x19', 
		'\x1A', '!', '\"', '\x4', '\x2', '$', '%', '\'', ',', '\x2', '\x1A1', 
		'\x2', '\x37', '\x3', '\x2', '\x2', '\x2', '\x4', '<', '\x3', '\x2', '\x2', 
		'\x2', '\x6', 'U', '\x3', '\x2', '\x2', '\x2', '\b', 'W', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x64', '\x3', '\x2', '\x2', '\x2', '\f', 's', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\x12', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\xCA', '\x3', '\x2', '\x2', '\x2', '\x16', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\xF6', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x117', '\x3', '\x2', '\x2', '\x2', ' ', '\x119', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x11B', '\x3', '\x2', '\x2', '\x2', '$', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x158', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x15A', '\x3', '\x2', '\x2', '\x2', '*', '\x15C', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x169', '\x3', '\x2', '\x2', '\x2', '.', '\x30', '\a', 
		'\x18', '\x2', '\x2', '/', '.', '\x3', '\x2', '\x2', '\x2', '/', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '\x33', '\x5', '\x4', '\x3', '\x2', '\x32', '\x34', '\a', '\x18', 
		'\x2', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '/', '\x3', '\x2', '\x2', '\x2', '\x36', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\x38', ':', '\x3', '\x2', '\x2', '\x2', '\x39', 
		'\x37', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '\x2', '\x2', '\x3', 
		';', '\x3', '\x3', '\x2', '\x2', '\x2', '<', '>', '\a', '\x17', '\x2', 
		'\x2', '=', '?', '\a', '\x18', '\x2', '\x2', '>', '=', '\x3', '\x2', '\x2', 
		'\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x42', '\a', '\x12', '\x2', '\x2', '\x41', '\x43', '\a', 
		'\x18', '\x2', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x43', 'J', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x46', '\x5', '\x6', '\x4', '\x2', '\x45', 'G', '\a', 
		'\x18', '\x2', '\x2', '\x46', '\x45', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'G', '\x3', '\x2', '\x2', '\x2', 'G', 'I', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x44', '\x3', '\x2', '\x2', '\x2', 'I', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'M', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'N', '\a', '\x13', '\x2', '\x2', 'N', '\x5', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'V', '\x5', '\b', '\x5', '\x2', 'P', 'V', '\x5', '\n', 
		'\x6', '\x2', 'Q', 'V', '\x5', '\f', '\a', '\x2', 'R', 'V', '\x5', '\xE', 
		'\b', '\x2', 'S', 'V', '\x5', '\x10', '\t', '\x2', 'T', 'V', '\x5', '\x12', 
		'\n', '\x2', 'U', 'O', '\x3', '\x2', '\x2', '\x2', 'U', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'Q', '\x3', '\x2', '\x2', '\x2', 'U', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\a', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\x17', 
		'\x2', '\x2', 'X', 'Y', '\a', '\x18', '\x2', '\x2', 'Y', 'Z', '\a', '\x17', 
		'\x2', '\x2', 'Z', '[', '\a', '\x18', '\x2', '\x2', '[', ']', '\x5', '$', 
		'\x13', '\x2', '\\', '^', '\a', '\x18', '\x2', '\x2', ']', '\\', '\x3', 
		'\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', '`', '\x3', 
		'\x2', '\x2', '\x2', '_', '\x61', '\x5', '\x18', '\r', '\x2', '`', '_', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\a', '\x16', '\x2', 
		'\x2', '\x63', '\t', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', 
		'\x17', '\x2', '\x2', '\x65', '\x66', '\a', '\x18', '\x2', '\x2', '\x66', 
		'h', '\a', '\x17', '\x2', '\x2', 'g', 'i', '\a', '\x18', '\x2', '\x2', 
		'h', 'g', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 
		'i', 'l', '\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x5', '\x14', '\v', '\x2', 
		'k', 'm', '\x5', '\x16', '\f', '\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 
		'l', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'o', '\x3', '\x2', '\x2', '\x2', 
		'n', 'p', '\a', '\x18', '\x2', '\x2', 'o', 'n', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 
		'q', 'r', '\a', '\x16', '\x2', '\x2', 'r', '\v', '\x3', '\x2', '\x2', 
		'\x2', 's', 't', '\a', '\x17', '\x2', '\x2', 't', 'v', '\a', '\x14', '\x2', 
		'\x2', 'u', 'w', '\a', '\x18', '\x2', '\x2', 'v', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'z', '\x5', '$', '\x13', '\x2', 'y', '{', '\a', '\x18', '\x2', 
		'\x2', 'z', 'y', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', 
		'\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '~', '\a', '\x15', '\x2', 
		'\x2', '}', '\x7F', '\a', '\x18', '\x2', '\x2', '~', '}', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x82', '\a', '\x17', '\x2', '\x2', 
		'\x81', '\x83', '\a', '\x18', '\x2', '\x2', '\x82', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x86', '\x5', '$', '\x13', '\x2', 
		'\x85', '\x87', '\a', '\x18', '\x2', '\x2', '\x86', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x8A', '\x5', '\x18', '\r', '\x2', 
		'\x89', '\x88', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', 
		'\a', '\x16', '\x2', '\x2', '\x8C', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x8E', '\a', '\x17', '\x2', '\x2', '\x8E', '\x90', '\a', '\x14', 
		'\x2', '\x2', '\x8F', '\x91', '\a', '\x18', '\x2', '\x2', '\x90', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92', '\x94', '\x5', '$', 
		'\x13', '\x2', '\x93', '\x95', '\a', '\x18', '\x2', '\x2', '\x94', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x98', '\a', '\x15', 
		'\x2', '\x2', '\x97', '\x99', '\a', '\x18', '\x2', '\x2', '\x98', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9C', '\a', '\x3', 
		'\x2', '\x2', '\x9B', '\x9D', '\a', '\x19', '\x2', '\x2', '\x9C', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA0', '\a', '\x18', 
		'\x2', '\x2', '\x9F', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\xA2', '\a', '\x17', '\x2', '\x2', '\xA2', '\xA3', '\a', '\x14', 
		'\x2', '\x2', '\xA3', '\xA5', '\a', '\x15', '\x2', '\x2', '\xA4', '\xA6', 
		'\a', '\x18', '\x2', '\x2', '\xA5', '\xA4', '\x3', '\x2', '\x2', '\x2', 
		'\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\xA8', '\a', '\x17', '\x2', '\x2', '\xA8', '\xA9', 
		'\a', '\x18', '\x2', '\x2', '\xA9', '\xAB', '\x5', '$', '\x13', '\x2', 
		'\xAA', '\xAC', '\a', '\x18', '\x2', '\x2', '\xAB', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAE', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\xAF', '\x5', '\x18', '\r', '\x2', 
		'\xAE', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', 
		'\a', '\x16', '\x2', '\x2', '\xB1', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xB3', '\a', '\x4', '\x2', '\x2', '\xB3', '\xB4', '\a', '\x18', 
		'\x2', '\x2', '\xB4', '\xB5', '\a', '\x17', '\x2', '\x2', '\xB5', '\xB6', 
		'\a', '\x18', '\x2', '\x2', '\xB6', '\xB7', '\a', '\x17', '\x2', '\x2', 
		'\xB7', '\xB8', '\a', '\x18', '\x2', '\x2', '\xB8', '\xBA', '\x5', '$', 
		'\x13', '\x2', '\xB9', '\xBB', '\a', '\x18', '\x2', '\x2', '\xBA', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', '\x2', 
		'\xBB', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBE', '\x5', '\x18', 
		'\r', '\x2', '\xBD', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xBF', '\xC0', '\a', '\x16', '\x2', '\x2', '\xC0', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\xC1', '\xC5', '\a', '\x5', '\x2', '\x2', '\xC2', '\xC4', 
		'\n', '\x2', '\x2', '\x2', '\xC3', '\xC2', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC8', 
		'\x3', '\x2', '\x2', '\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\xC9', '\a', '\x16', '\x2', '\x2', '\xC9', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\xCC', '\a', '\x14', '\x2', '\x2', '\xCB', '\xCD', 
		'\a', '\x18', '\x2', '\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xD0', '\x5', '$', '\x13', '\x2', '\xCF', '\xD1', 
		'\a', '\x18', '\x2', '\x2', '\xD0', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xD4', '\a', '\x6', '\x2', '\x2', '\xD3', '\xD5', 
		'\a', '\x18', '\x2', '\x2', '\xD4', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\xD8', '\a', '\a', '\x2', '\x2', '\xD7', '\xD9', 
		'\a', '\x18', '\x2', '\x2', '\xD8', '\xD7', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xDC', '\x5', '$', '\x13', '\x2', '\xDB', '\xDD', 
		'\a', '\x18', '\x2', '\x2', '\xDC', '\xDB', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\xDF', '\a', '\x15', '\x2', '\x2', '\xDF', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xE2', '\a', '\x14', '\x2', '\x2', 
		'\xE1', '\xE3', '\a', '\x18', '\x2', '\x2', '\xE2', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\xE6', '\x5', '$', '\x13', '\x2', 
		'\xE5', '\xE7', '\a', '\x18', '\x2', '\x2', '\xE6', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xEA', '\a', '\x6', '\x2', '\x2', 
		'\xE9', '\xEB', '\a', '\x18', '\x2', '\x2', '\xEA', '\xE9', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\xEE', '\a', '\b', '\x2', '\x2', 
		'\xED', '\xEF', '\a', '\x18', '\x2', '\x2', '\xEE', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\xF2', '\x5', '$', '\x13', '\x2', 
		'\xF1', '\xF3', '\a', '\x18', '\x2', '\x2', '\xF2', '\xF1', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\a', '\x15', '\x2', '\x2', 
		'\xF5', '\x17', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xFD', '\a', '\x12', 
		'\x2', '\x2', '\xF7', '\xF9', '\a', '\x18', '\x2', '\x2', '\xF8', '\xF7', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFC', '\x5', '\x1A', 
		'\xE', '\x2', '\xFB', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\xFD', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x101', '\x3', '\x2', 
		'\x2', '\x2', '\xFF', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x100', '\x102', 
		'\a', '\x18', '\x2', '\x2', '\x101', '\x100', '\x3', '\x2', '\x2', '\x2', 
		'\x101', '\x102', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\x105', '\a', '\x13', '\x2', '\x2', '\x104', 
		'\x106', '\a', '\x18', '\x2', '\x2', '\x105', '\x104', '\x3', '\x2', '\x2', 
		'\x2', '\x105', '\x106', '\x3', '\x2', '\x2', '\x2', '\x106', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x109', '\a', '\x17', '\x2', '\x2', 
		'\x108', '\x10A', '\a', '\x18', '\x2', '\x2', '\x109', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x10B', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10D', '\a', '#', '\x2', 
		'\x2', '\x10C', '\x10E', '\a', '\x18', '\x2', '\x2', '\x10D', '\x10C', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x111', '\x5', 
		'$', '\x13', '\x2', '\x110', '\x112', '\a', '\x18', '\x2', '\x2', '\x111', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x112', '\x113', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', 
		'\a', '\x16', '\x2', '\x2', '\x114', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x116', '\a', '\t', '\x2', '\x2', '\x116', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x117', '\x118', '\a', '\n', '\x2', '\x2', '\x118', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\t', '\x3', '\x2', '\x2', 
		'\x11A', '!', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\t', '\x4', 
		'\x2', '\x2', '\x11C', '#', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', 
		'\b', '\x13', '\x1', '\x2', '\x11E', '\x13B', '\x5', ',', '\x17', '\x2', 
		'\x11F', '\x120', '\a', '\x17', '\x2', '\x2', '\x120', '\x122', '\a', 
		'\x14', '\x2', '\x2', '\x121', '\x123', '\a', '\x18', '\x2', '\x2', '\x122', 
		'\x121', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x124', '\x3', '\x2', '\x2', '\x2', '\x124', '\x126', 
		'\x5', '$', '\x13', '\x2', '\x125', '\x127', '\a', '\x18', '\x2', '\x2', 
		'\x126', '\x125', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x128', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x129', '\a', '\x15', '\x2', '\x2', '\x129', '\x13B', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x12C', '\x5', '(', '\x15', '\x2', '\x12B', '\x12D', 
		'\a', '\x18', '\x2', '\x2', '\x12C', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', 
		'\x2', '\x2', '\x2', '\x12E', '\x12F', '\x5', '$', '\x13', '\x4', '\x12F', 
		'\x13B', '\x3', '\x2', '\x2', '\x2', '\x130', '\x132', '\a', '\x10', '\x2', 
		'\x2', '\x131', '\x133', '\a', '\x18', '\x2', '\x2', '\x132', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x134', '\x3', '\x2', '\x2', '\x2', '\x134', '\x136', '\x5', 
		'$', '\x13', '\x2', '\x135', '\x137', '\a', '\x18', '\x2', '\x2', '\x136', 
		'\x135', '\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x138', '\x3', '\x2', '\x2', '\x2', '\x138', '\x139', 
		'\a', '\x11', '\x2', '\x2', '\x139', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x13A', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x130', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\x13E', '\f', '\x6', '\x2', '\x2', '\x13D', '\x13F', 
		'\a', '\x18', '\x2', '\x2', '\x13E', '\x13D', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\x3', 
		'\x2', '\x2', '\x2', '\x140', '\x142', '\x5', '&', '\x14', '\x2', '\x141', 
		'\x143', '\a', '\x18', '\x2', '\x2', '\x142', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x142', '\x143', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\x5', '$', '\x13', '\a', 
		'\x145', '\x154', '\x3', '\x2', '\x2', '\x2', '\x146', '\x148', '\f', 
		'\x5', '\x2', '\x2', '\x147', '\x149', '\a', '\x18', '\x2', '\x2', '\x148', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\x3', '\x2', '\x2', 
		'\x2', '\x149', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14C', 
		'\x5', '*', '\x16', '\x2', '\x14B', '\x14D', '\a', '\x18', '\x2', '\x2', 
		'\x14C', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\x3', 
		'\x2', '\x2', '\x2', '\x14D', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x14E', 
		'\x14F', '\x5', '$', '\x13', '\x6', '\x14F', '\x154', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x151', '\f', '\b', '\x2', '\x2', '\x151', '\x152', '\a', 
		'\xF', '\x2', '\x2', '\x152', '\x154', '\a', '\x17', '\x2', '\x2', '\x153', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x153', '\x146', '\x3', '\x2', '\x2', 
		'\x2', '\x153', '\x150', '\x3', '\x2', '\x2', '\x2', '\x154', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x155', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x156', '\x3', '\x2', '\x2', '\x2', '\x156', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x157', '\x155', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', 
		'\t', '\x5', '\x2', '\x2', '\x159', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x15A', '\x15B', '\t', '\x6', '\x2', '\x2', '\x15B', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x15C', '\x15D', '\t', '\a', '\x2', '\x2', '\x15D', '+', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x16A', '\x5', '\x1C', '\xF', '\x2', 
		'\x15F', '\x16A', '\x5', '\x1E', '\x10', '\x2', '\x160', '\x16A', '\x5', 
		' ', '\x11', '\x2', '\x161', '\x16A', '\x5', '\"', '\x12', '\x2', '\x162', 
		'\x16A', '\a', '\x17', '\x2', '\x2', '\x163', '\x16A', '\a', '-', '\x2', 
		'\x2', '\x164', '\x16A', '\a', '.', '\x2', '\x2', '\x165', '\x16A', '\a', 
		'/', '\x2', '\x2', '\x166', '\x16A', '\a', '\x30', '\x2', '\x2', '\x167', 
		'\x16A', '\a', '\x31', '\x2', '\x2', '\x168', '\x16A', '\a', '\x32', '\x2', 
		'\x2', '\x169', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x169', '\x15F', 
		'\x3', '\x2', '\x2', '\x2', '\x169', '\x160', '\x3', '\x2', '\x2', '\x2', 
		'\x169', '\x161', '\x3', '\x2', '\x2', '\x2', '\x169', '\x162', '\x3', 
		'\x2', '\x2', '\x2', '\x169', '\x163', '\x3', '\x2', '\x2', '\x2', '\x169', 
		'\x164', '\x3', '\x2', '\x2', '\x2', '\x169', '\x165', '\x3', '\x2', '\x2', 
		'\x2', '\x169', '\x166', '\x3', '\x2', '\x2', '\x2', '\x169', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x169', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'\x16A', '-', '\x3', '\x2', '\x2', '\x2', '>', '/', '\x33', '\x37', '>', 
		'\x42', '\x46', 'J', 'U', ']', '`', 'h', 'l', 'o', 'v', 'z', '~', '\x82', 
		'\x86', '\x89', '\x90', '\x94', '\x98', '\x9C', '\x9F', '\xA5', '\xAB', 
		'\xAE', '\xBA', '\xBD', '\xC5', '\xCC', '\xD0', '\xD4', '\xD8', '\xDC', 
		'\xE2', '\xE6', '\xEA', '\xEE', '\xF2', '\xF8', '\xFD', '\x101', '\x105', 
		'\x109', '\x10D', '\x111', '\x122', '\x126', '\x12C', '\x132', '\x136', 
		'\x13A', '\x13E', '\x142', '\x148', '\x14C', '\x153', '\x155', '\x169',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
