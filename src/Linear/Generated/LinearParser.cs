//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\black\Documents\GitHub\Linear\scripts\\..\Linear.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class LinearParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, COMMENT=16, 
		COMENT_BLOCK=17, OPEN=18, CLOSE=19, OPENSQ=20, CLOSESQ=21, ENDL=22, IDENTIFIER=23, 
		WS=24, PLUS=25, MINUS=26, STAR=27, DIV=28, PERCENT=29, AMP=30, BITWISE_OR=31, 
		CARET=32, BANG=33, TILDE=34, ASSIGNMENT=35, LT=36, GT=37, INTERR=38, OP_AND=39, 
		OP_OR=40, OP_EQ=41, OP_NE=42, OP_LE=43, OP_GE=44, INTEGER_LITERAL=45, 
		HEX_INTEGER_LITERAL=46, REAL_LITERAL=47, CHARACTER_LITERAL=48, REGULAR_STRING=49, 
		VERBATIM_STRING=50;
	public const int
		RULE_compilation_unit = 0, RULE_body_element = 1, RULE_struct = 2, RULE_struct_statement = 3, 
		RULE_struct_statement_define = 4, RULE_struct_statement_define_value = 5, 
		RULE_struct_statement_define_array = 6, RULE_struct_statement_define_array_indirect = 7, 
		RULE_struct_statement_output = 8, RULE_property_group = 9, RULE_property_statement = 10, 
		RULE_term_replacement_length = 11, RULE_term_replacement_i = 12, RULE_term_replacement_p = 13, 
		RULE_term_replacement_u = 14, RULE_expr = 15, RULE_op = 16, RULE_un_op = 17, 
		RULE_bool_op = 18, RULE_struct_size = 19, RULE_term = 20;
	public static readonly string[] ruleNames = {
		"compilation_unit", "body_element", "struct", "struct_statement", "struct_statement_define", 
		"struct_statement_define_value", "struct_statement_define_array", "struct_statement_define_array_indirect", 
		"struct_statement_output", "property_group", "property_statement", "term_replacement_length", 
		"term_replacement_i", "term_replacement_p", "term_replacement_u", "expr", 
		"op", "un_op", "bool_op", "struct_size", "term"
	};

	private static readonly string[] _LiteralNames = {
		null, "'value'", "'->'", "','", "'output'", "'$length'", "'$i'", "'$p'", 
		"'$parent'", "'$u'", "'$unique'", "'end:'", "'length:'", "'.'", "'('", 
		"')'", null, null, "'{'", "'}'", "'['", "']'", "';'", null, null, "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", 
		"'<'", "'>'", "'?'", "'&&'", "'||'", "'=='", "'!='", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "COMMENT", "COMENT_BLOCK", "OPEN", "CLOSE", "OPENSQ", 
		"CLOSESQ", "ENDL", "IDENTIFIER", "WS", "PLUS", "MINUS", "STAR", "DIV", 
		"PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", "ASSIGNMENT", 
		"LT", "GT", "INTERR", "OP_AND", "OP_OR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", 
		"INTEGER_LITERAL", "HEX_INTEGER_LITERAL", "REAL_LITERAL", "CHARACTER_LITERAL", 
		"REGULAR_STRING", "VERBATIM_STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Linear.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LinearParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LinearParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LinearParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(LinearParser.Eof, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Body_elementContext[] body_element() {
			return GetRuleContexts<Body_elementContext>();
		}
		public Body_elementContext body_element(int i) {
			return GetRuleContext<Body_elementContext>(i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 42; Match(WS);
				}
			}

			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMENT) | (1L << COMENT_BLOCK) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 45; body_element();
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 46; Match(WS);
					}
				}

				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 54; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Body_elementContext : ParserRuleContext {
		public StructContext @struct() {
			return GetRuleContext<StructContext>(0);
		}
		public ITerminalNode COMMENT() { return GetToken(LinearParser.COMMENT, 0); }
		public ITerminalNode COMENT_BLOCK() { return GetToken(LinearParser.COMENT_BLOCK, 0); }
		public Body_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterBody_element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitBody_element(this);
		}
	}

	[RuleVersion(0)]
	public Body_elementContext body_element() {
		Body_elementContext _localctx = new Body_elementContext(Context, State);
		EnterRule(_localctx, 2, RULE_body_element);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56; @struct();
				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57; Match(COMMENT);
				}
				break;
			case COMENT_BLOCK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 58; Match(COMENT_BLOCK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ITerminalNode OPEN() { return GetToken(LinearParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(LinearParser.CLOSE, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Struct_sizeContext struct_size() {
			return GetRuleContext<Struct_sizeContext>(0);
		}
		public Struct_statementContext[] struct_statement() {
			return GetRuleContexts<Struct_statementContext>();
		}
		public Struct_statementContext struct_statement(int i) {
			return GetRuleContext<Struct_statementContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 4, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(IDENTIFIER);
			State = 63;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 62; Match(WS);
				}
				break;
			}
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTEGER_LITERAL || _la==HEX_INTEGER_LITERAL) {
				{
				State = 65; struct_size();
				}
			}

			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 68; Match(WS);
				}
			}

			State = 71; Match(OPEN);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 72; Match(WS);
				}
			}

			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << COMMENT) | (1L << COMENT_BLOCK) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 75; struct_statement();
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 76; Match(WS);
					}
				}

				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 84; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statementContext : ParserRuleContext {
		public Struct_statement_defineContext struct_statement_define() {
			return GetRuleContext<Struct_statement_defineContext>(0);
		}
		public Struct_statement_define_valueContext struct_statement_define_value() {
			return GetRuleContext<Struct_statement_define_valueContext>(0);
		}
		public Struct_statement_define_arrayContext struct_statement_define_array() {
			return GetRuleContext<Struct_statement_define_arrayContext>(0);
		}
		public Struct_statement_define_array_indirectContext struct_statement_define_array_indirect() {
			return GetRuleContext<Struct_statement_define_array_indirectContext>(0);
		}
		public Struct_statement_outputContext struct_statement_output() {
			return GetRuleContext<Struct_statement_outputContext>(0);
		}
		public ITerminalNode COMMENT() { return GetToken(LinearParser.COMMENT, 0); }
		public ITerminalNode COMENT_BLOCK() { return GetToken(LinearParser.COMENT_BLOCK, 0); }
		public Struct_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statementContext struct_statement() {
		Struct_statementContext _localctx = new Struct_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_struct_statement);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; struct_statement_define();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; struct_statement_define_value();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 88; struct_statement_define_array();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 89; struct_statement_define_array_indirect();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 90; struct_statement_output();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 91; Match(COMMENT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 92; Match(COMENT_BLOCK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_defineContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_defineContext struct_statement_define() {
		Struct_statement_defineContext _localctx = new Struct_statement_defineContext(Context, State);
		EnterRule(_localctx, 8, RULE_struct_statement_define);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(IDENTIFIER);
			State = 96; Match(WS);
			State = 97; Match(IDENTIFIER);
			State = 98; Match(WS);
			State = 99; expr(0);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 100; Match(WS);
				}
			}

			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 103; property_group();
				}
			}

			State = 106; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_valueContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Struct_statement_define_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_value(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_valueContext struct_statement_define_value() {
		Struct_statement_define_valueContext _localctx = new Struct_statement_define_valueContext(Context, State);
		EnterRule(_localctx, 10, RULE_struct_statement_define_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(T__0);
			State = 109; Match(WS);
			State = 110; Match(IDENTIFIER);
			State = 111; Match(WS);
			State = 112; expr(0);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 113; Match(WS);
				}
			}

			State = 116; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_arrayContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_define_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_array(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_array(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_arrayContext struct_statement_define_array() {
		Struct_statement_define_arrayContext _localctx = new Struct_statement_define_arrayContext(Context, State);
		EnterRule(_localctx, 12, RULE_struct_statement_define_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(IDENTIFIER);
			State = 119; Match(OPENSQ);
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 120; Match(WS);
				}
			}

			State = 123; expr(0);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 124; Match(WS);
				}
			}

			State = 127; Match(CLOSESQ);
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 128; Match(WS);
				}
			}

			State = 131; Match(IDENTIFIER);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 132; Match(WS);
				}
			}

			State = 135; expr(0);
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 136; Match(WS);
				}
			}

			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 139; property_group();
				}
			}

			State = 142; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_define_array_indirectContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(LinearParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LinearParser.IDENTIFIER, i);
		}
		public ITerminalNode[] OPENSQ() { return GetTokens(LinearParser.OPENSQ); }
		public ITerminalNode OPENSQ(int i) {
			return GetToken(LinearParser.OPENSQ, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] CLOSESQ() { return GetTokens(LinearParser.CLOSESQ); }
		public ITerminalNode CLOSESQ(int i) {
			return GetToken(LinearParser.CLOSESQ, i);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_define_array_indirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_define_array_indirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_define_array_indirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_define_array_indirect(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_define_array_indirectContext struct_statement_define_array_indirect() {
		Struct_statement_define_array_indirectContext _localctx = new Struct_statement_define_array_indirectContext(Context, State);
		EnterRule(_localctx, 14, RULE_struct_statement_define_array_indirect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(IDENTIFIER);
			State = 145; Match(OPENSQ);
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 146; Match(WS);
				}
			}

			State = 149; expr(0);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 150; Match(WS);
				}
			}

			State = 153; Match(CLOSESQ);
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 154; Match(WS);
				}
			}

			State = 157; Match(T__1);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS) {
				{
				State = 158; Match(PLUS);
				}
			}

			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 161; Match(WS);
				}
			}

			State = 164; Match(IDENTIFIER);
			State = 165; Match(OPENSQ);
			State = 166; Match(CLOSESQ);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 167; Match(WS);
				}
			}

			State = 170; Match(IDENTIFIER);
			State = 171; Match(WS);
			State = 172; expr(0);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 173; Match(WS);
				}
			}

			State = 176; Match(T__2);
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 177; Match(WS);
				}
			}

			State = 180; expr(0);
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 181; Match(WS);
				}
			}

			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 184; property_group();
				}
			}

			State = 187; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_statement_outputContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public Property_groupContext property_group() {
			return GetRuleContext<Property_groupContext>(0);
		}
		public Struct_statement_outputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_statement_output; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStruct_statement_output(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStruct_statement_output(this);
		}
	}

	[RuleVersion(0)]
	public Struct_statement_outputContext struct_statement_output() {
		Struct_statement_outputContext _localctx = new Struct_statement_outputContext(Context, State);
		EnterRule(_localctx, 16, RULE_struct_statement_output);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; Match(T__3);
			State = 190; Match(WS);
			State = 191; Match(IDENTIFIER);
			State = 192; Match(WS);
			State = 193; expr(0);
			State = 194; Match(WS);
			State = 195; expr(0);
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 196; Match(WS);
				}
			}

			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 199; property_group();
				}
			}

			State = 202; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_groupContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(LinearParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(LinearParser.CLOSE, 0); }
		public Property_statementContext[] property_statement() {
			return GetRuleContexts<Property_statementContext>();
		}
		public Property_statementContext property_statement(int i) {
			return GetRuleContext<Property_statementContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Property_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterProperty_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitProperty_group(this);
		}
	}

	[RuleVersion(0)]
	public Property_groupContext property_group() {
		Property_groupContext _localctx = new Property_groupContext(Context, State);
		EnterRule(_localctx, 18, RULE_property_group);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; Match(OPEN);
			State = 211;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 206;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WS) {
						{
						State = 205; Match(WS);
						}
					}

					State = 208; property_statement();
					}
					} 
				}
				State = 213;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 214; Match(WS);
				}
			}

			State = 217; Match(CLOSE);
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 218; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_statementContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(LinearParser.ASSIGNMENT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDL() { return GetToken(LinearParser.ENDL, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public Property_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterProperty_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitProperty_statement(this);
		}
	}

	[RuleVersion(0)]
	public Property_statementContext property_statement() {
		Property_statementContext _localctx = new Property_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_property_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(IDENTIFIER);
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 222; Match(WS);
				}
			}

			State = 225; Match(ASSIGNMENT);
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 226; Match(WS);
				}
			}

			State = 229; expr(0);
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 230; Match(WS);
				}
			}

			State = 233; Match(ENDL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_lengthContext : ParserRuleContext {
		public Term_replacement_lengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_length; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_length(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_length(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_lengthContext term_replacement_length() {
		Term_replacement_lengthContext _localctx = new Term_replacement_lengthContext(Context, State);
		EnterRule(_localctx, 22, RULE_term_replacement_length);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_iContext : ParserRuleContext {
		public Term_replacement_iContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_i; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_i(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_i(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_iContext term_replacement_i() {
		Term_replacement_iContext _localctx = new Term_replacement_iContext(Context, State);
		EnterRule(_localctx, 24, RULE_term_replacement_i);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_pContext : ParserRuleContext {
		public Term_replacement_pContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_p; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_p(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_p(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_pContext term_replacement_p() {
		Term_replacement_pContext _localctx = new Term_replacement_pContext(Context, State);
		EnterRule(_localctx, 26, RULE_term_replacement_p);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			_la = TokenStream.LA(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Term_replacement_uContext : ParserRuleContext {
		public Term_replacement_uContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term_replacement_u; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTerm_replacement_u(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTerm_replacement_u(this);
		}
	}

	[RuleVersion(0)]
	public Term_replacement_uContext term_replacement_u() {
		Term_replacement_uContext _localctx = new Term_replacement_uContext(Context, State);
		EnterRule(_localctx, 28, RULE_term_replacement_u);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprArrayAccessContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprArrayAccessContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprArrayAccess(this);
		}
	}
	public partial class ExprUnOpContext : ExprContext {
		public Un_opContext un_op() {
			return GetRuleContext<Un_opContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode WS() { return GetToken(LinearParser.WS, 0); }
		public ExprUnOpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprUnOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprUnOp(this);
		}
	}
	public partial class ExprTermContext : ExprContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ExprTermContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprTerm(this);
		}
	}
	public partial class ExprOpContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OpContext op() {
			return GetRuleContext<OpContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprOpContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprOp(this);
		}
	}
	public partial class ExprRangeLengthContext : ExprContext {
		public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprRangeLengthContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprRangeLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprRangeLength(this);
		}
	}
	public partial class ExprWrappedContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprWrappedContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprWrapped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprWrapped(this);
		}
	}
	public partial class ExprMemberContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public ExprMemberContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprMember(this);
		}
	}
	public partial class ExprRangeEndContext : ExprContext {
		public ITerminalNode OPENSQ() { return GetToken(LinearParser.OPENSQ, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CLOSESQ() { return GetToken(LinearParser.CLOSESQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(LinearParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(LinearParser.WS, i);
		}
		public ExprRangeEndContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterExprRangeEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitExprRangeEnd(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				_localctx = new ExprTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 244; term();
				}
				break;
			case 2:
				{
				_localctx = new ExprRangeEndContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 245; Match(OPENSQ);
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 246; Match(WS);
					}
				}

				State = 249; expr(0);
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 250; Match(WS);
					}
				}

				State = 253; Match(T__2);
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 254; Match(WS);
					}
				}

				State = 257; Match(T__10);
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 258; Match(WS);
					}
				}

				State = 261; expr(0);
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 262; Match(WS);
					}
				}

				State = 265; Match(CLOSESQ);
				}
				break;
			case 3:
				{
				_localctx = new ExprRangeLengthContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 267; Match(OPENSQ);
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 268; Match(WS);
					}
				}

				State = 271; expr(0);
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 272; Match(WS);
					}
				}

				State = 275; Match(T__2);
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 276; Match(WS);
					}
				}

				State = 279; Match(T__11);
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 280; Match(WS);
					}
				}

				State = 283; expr(0);
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 284; Match(WS);
					}
				}

				State = 287; Match(CLOSESQ);
				}
				break;
			case 4:
				{
				_localctx = new ExprUnOpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 289; un_op();
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 290; Match(WS);
					}
				}

				State = 293; expr(2);
				}
				break;
			case 5:
				{
				_localctx = new ExprWrappedContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 295; Match(T__13);
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 296; Match(WS);
					}
				}

				State = 299; expr(0);
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 300; Match(WS);
					}
				}

				State = 303; Match(T__14);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 333;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 331;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
					case 1:
						{
						_localctx = new ExprOpContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 307;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 309;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 308; Match(WS);
							}
						}

						State = 311; op();
						State = 313;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 312; Match(WS);
							}
						}

						State = 315; expr(4);
						}
						break;
					case 2:
						{
						_localctx = new ExprMemberContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 317;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 318; Match(T__12);
						State = 319; Match(IDENTIFIER);
						}
						break;
					case 3:
						{
						_localctx = new ExprArrayAccessContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 320;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 321; Match(OPENSQ);
						State = 323;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 322; Match(WS);
							}
						}

						State = 325; expr(0);
						State = 327;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==WS) {
							{
							State = 326; Match(WS);
							}
						}

						State = 329; Match(CLOSESQ);
						}
						break;
					}
					} 
				}
				State = 335;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OpContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(LinearParser.MINUS, 0); }
		public ITerminalNode STAR() { return GetToken(LinearParser.STAR, 0); }
		public ITerminalNode DIV() { return GetToken(LinearParser.DIV, 0); }
		public ITerminalNode PERCENT() { return GetToken(LinearParser.PERCENT, 0); }
		public ITerminalNode AMP() { return GetToken(LinearParser.AMP, 0); }
		public ITerminalNode BITWISE_OR() { return GetToken(LinearParser.BITWISE_OR, 0); }
		public ITerminalNode CARET() { return GetToken(LinearParser.CARET, 0); }
		public OpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitOp(this);
		}
	}

	[RuleVersion(0)]
	public OpContext op() {
		OpContext _localctx = new OpContext(Context, State);
		EnterRule(_localctx, 32, RULE_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << STAR) | (1L << DIV) | (1L << PERCENT) | (1L << AMP) | (1L << BITWISE_OR) | (1L << CARET))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Un_opContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(LinearParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(LinearParser.MINUS, 0); }
		public ITerminalNode BANG() { return GetToken(LinearParser.BANG, 0); }
		public ITerminalNode TILDE() { return GetToken(LinearParser.TILDE, 0); }
		public Un_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_un_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterUn_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitUn_op(this);
		}
	}

	[RuleVersion(0)]
	public Un_opContext un_op() {
		Un_opContext _localctx = new Un_opContext(Context, State);
		EnterRule(_localctx, 34, RULE_un_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << BANG) | (1L << TILDE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_opContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(LinearParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(LinearParser.GT, 0); }
		public ITerminalNode OP_AND() { return GetToken(LinearParser.OP_AND, 0); }
		public ITerminalNode OP_OR() { return GetToken(LinearParser.OP_OR, 0); }
		public ITerminalNode OP_EQ() { return GetToken(LinearParser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(LinearParser.OP_NE, 0); }
		public ITerminalNode OP_LE() { return GetToken(LinearParser.OP_LE, 0); }
		public ITerminalNode OP_GE() { return GetToken(LinearParser.OP_GE, 0); }
		public Bool_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterBool_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitBool_op(this);
		}
	}

	[RuleVersion(0)]
	public Bool_opContext bool_op() {
		Bool_opContext _localctx = new Bool_opContext(Context, State);
		EnterRule(_localctx, 36, RULE_bool_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << GT) | (1L << OP_AND) | (1L << OP_OR) | (1L << OP_EQ) | (1L << OP_NE) | (1L << OP_LE) | (1L << OP_GE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_sizeContext : ParserRuleContext {
		public Struct_sizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_size; } }
	 
		public Struct_sizeContext() { }
		public virtual void CopyFrom(Struct_sizeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructSizeIntContext : Struct_sizeContext {
		public ITerminalNode INTEGER_LITERAL() { return GetToken(LinearParser.INTEGER_LITERAL, 0); }
		public StructSizeIntContext(Struct_sizeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStructSizeInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStructSizeInt(this);
		}
	}
	public partial class StrictSizeHexContext : Struct_sizeContext {
		public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(LinearParser.HEX_INTEGER_LITERAL, 0); }
		public StrictSizeHexContext(Struct_sizeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterStrictSizeHex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitStrictSizeHex(this);
		}
	}

	[RuleVersion(0)]
	public Struct_sizeContext struct_size() {
		Struct_sizeContext _localctx = new Struct_sizeContext(Context, State);
		EnterRule(_localctx, 38, RULE_struct_size);
		try {
			State = 344;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				_localctx = new StructSizeIntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 342; Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				_localctx = new StrictSizeHexContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 343; Match(HEX_INTEGER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermHexContext : TermContext {
		public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(LinearParser.HEX_INTEGER_LITERAL, 0); }
		public TermHexContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermHex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermHex(this);
		}
	}
	public partial class TermCharContext : TermContext {
		public ITerminalNode CHARACTER_LITERAL() { return GetToken(LinearParser.CHARACTER_LITERAL, 0); }
		public TermCharContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermChar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermChar(this);
		}
	}
	public partial class TermRepUContext : TermContext {
		public Term_replacement_uContext term_replacement_u() {
			return GetRuleContext<Term_replacement_uContext>(0);
		}
		public TermRepUContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepU(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepU(this);
		}
	}
	public partial class TermRepLengthContext : TermContext {
		public Term_replacement_lengthContext term_replacement_length() {
			return GetRuleContext<Term_replacement_lengthContext>(0);
		}
		public TermRepLengthContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepLength(this);
		}
	}
	public partial class TermRepPContext : TermContext {
		public Term_replacement_pContext term_replacement_p() {
			return GetRuleContext<Term_replacement_pContext>(0);
		}
		public TermRepPContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepP(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepP(this);
		}
	}
	public partial class TermIdentifierContext : TermContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LinearParser.IDENTIFIER, 0); }
		public TermIdentifierContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermIdentifier(this);
		}
	}
	public partial class TermIntContext : TermContext {
		public ITerminalNode INTEGER_LITERAL() { return GetToken(LinearParser.INTEGER_LITERAL, 0); }
		public TermIntContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermInt(this);
		}
	}
	public partial class TermRealContext : TermContext {
		public ITerminalNode REAL_LITERAL() { return GetToken(LinearParser.REAL_LITERAL, 0); }
		public TermRealContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermReal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermReal(this);
		}
	}
	public partial class TermStringContext : TermContext {
		public ITerminalNode REGULAR_STRING() { return GetToken(LinearParser.REGULAR_STRING, 0); }
		public TermStringContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermString(this);
		}
	}
	public partial class TermStringVerbContext : TermContext {
		public ITerminalNode VERBATIM_STRING() { return GetToken(LinearParser.VERBATIM_STRING, 0); }
		public TermStringVerbContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermStringVerb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermStringVerb(this);
		}
	}
	public partial class TermRepIContext : TermContext {
		public Term_replacement_iContext term_replacement_i() {
			return GetRuleContext<Term_replacement_iContext>(0);
		}
		public TermRepIContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.EnterTermRepI(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILinearListener typedListener = listener as ILinearListener;
			if (typedListener != null) typedListener.ExitTermRepI(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 40, RULE_term);
		try {
			State = 357;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				_localctx = new TermRepLengthContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 346; term_replacement_length();
				}
				break;
			case T__5:
				_localctx = new TermRepIContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 347; term_replacement_i();
				}
				break;
			case T__6:
			case T__7:
				_localctx = new TermRepPContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 348; term_replacement_p();
				}
				break;
			case T__8:
			case T__9:
				_localctx = new TermRepUContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 349; term_replacement_u();
				}
				break;
			case IDENTIFIER:
				_localctx = new TermIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 350; Match(IDENTIFIER);
				}
				break;
			case INTEGER_LITERAL:
				_localctx = new TermIntContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 351; Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				_localctx = new TermHexContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 352; Match(HEX_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				_localctx = new TermRealContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 353; Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				_localctx = new TermCharContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 354; Match(CHARACTER_LITERAL);
				}
				break;
			case REGULAR_STRING:
				_localctx = new TermStringContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 355; Match(REGULAR_STRING);
				}
				break;
			case VERBATIM_STRING:
				_localctx = new TermStringVerbContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 356; Match(VERBATIM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x34', '\x16A', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\x5', '\x2', '.', '\n', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\x32', '\n', '\x2', '\a', '\x2', '\x34', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x37', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'>', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x42', '\n', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x45', '\n', '\x4', '\x3', '\x4', 
		'\x5', '\x4', 'H', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'L', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'P', '\n', 
		'\x4', '\a', '\x4', 'R', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'U', 
		'\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '`', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'h', '\n', '\x6', '\x3', 
		'\x6', '\x5', '\x6', 'k', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', 'u', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', '|', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '\x80', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x84', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x88', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x8C', '\n', '\b', '\x3', 
		'\b', '\x5', '\b', '\x8F', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x96', '\n', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\x9A', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x9E', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\xA2', '\n', '\t', '\x3', '\t', '\x5', '\t', '\xA5', '\n', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xAB', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\xB1', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xB5', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xB9', '\n', '\t', 
		'\x3', '\t', '\x5', '\t', '\xBC', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xC8', '\n', '\n', '\x3', 
		'\n', '\x5', '\n', '\xCB', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\xD1', '\n', '\v', '\x3', '\v', '\a', 
		'\v', '\xD4', '\n', '\v', '\f', '\v', '\xE', '\v', '\xD7', '\v', '\v', 
		'\x3', '\v', '\x5', '\v', '\xDA', '\n', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\xDE', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\xE2', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xE6', '\n', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xEA', '\n', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xFA', '\n', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xFE', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x102', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x106', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x10A', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x110', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x114', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x118', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x11C', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x120', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x126', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x12C', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x130', '\n', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x134', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x138', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x13C', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x146', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x14A', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\a', '\x11', '\x14E', '\n', '\x11', '\f', '\x11', '\xE', 
		'\x11', '\x151', '\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x15B', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x168', 
		'\n', '\x16', '\x3', '\x16', '\x2', '\x3', ' ', '\x17', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', '\x2', '\a', '\x3', 
		'\x2', '\t', '\n', '\x3', '\x2', '\v', '\f', '\x3', '\x2', '\x1B', '\"', 
		'\x4', '\x2', '\x1B', '\x1C', '#', '$', '\x4', '\x2', '&', '\'', ')', 
		'.', '\x2', '\x1A4', '\x2', '-', '\x3', '\x2', '\x2', '\x2', '\x4', '=', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '?', '\x3', '\x2', '\x2', '\x2', '\b', 
		'_', '\x3', '\x2', '\x2', '\x2', '\n', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'n', '\x3', '\x2', '\x2', '\x2', '\xE', 'x', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x92', '\x3', '\x2', '\x2', '\x2', '\x12', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\xCE', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\x18', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\xEF', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xF3', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '\"', '\x152', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x154', '\x3', '\x2', '\x2', '\x2', '&', '\x156', '\x3', 
		'\x2', '\x2', '\x2', '(', '\x15A', '\x3', '\x2', '\x2', '\x2', '*', '\x167', 
		'\x3', '\x2', '\x2', '\x2', ',', '.', '\a', '\x1A', '\x2', '\x2', '-', 
		',', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x35', '\x3', '\x2', '\x2', '\x2', '/', '\x31', '\x5', '\x4', '\x3', 
		'\x2', '\x30', '\x32', '\a', '\x1A', '\x2', '\x2', '\x31', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x33', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x37', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\a', '\x2', '\x2', '\x3', '\x39', '\x3', '\x3', 
		'\x2', '\x2', '\x2', ':', '>', '\x5', '\x6', '\x4', '\x2', ';', '>', '\a', 
		'\x12', '\x2', '\x2', '<', '>', '\a', '\x13', '\x2', '\x2', '=', ':', 
		'\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '=', 
		'<', '\x3', '\x2', '\x2', '\x2', '>', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x41', '\a', '\x19', '\x2', '\x2', '@', '\x42', '\a', '\x1A', '\x2', 
		'\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x45', '\x5', '(', '\x15', '\x2', '\x44', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'H', '\a', '\x1A', '\x2', '\x2', 'G', '\x46', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', 
		'I', '\x3', '\x2', '\x2', '\x2', 'I', 'K', '\a', '\x14', '\x2', '\x2', 
		'J', 'L', '\a', '\x1A', '\x2', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'S', '\x3', '\x2', '\x2', '\x2', 
		'M', 'O', '\x5', '\b', '\x5', '\x2', 'N', 'P', '\a', '\x1A', '\x2', '\x2', 
		'O', 'N', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 
		'P', 'R', '\x3', '\x2', '\x2', '\x2', 'Q', 'M', '\x3', '\x2', '\x2', '\x2', 
		'R', 'U', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x3', '\x2', '\x2', '\x2', 
		'U', 'S', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\x15', '\x2', '\x2', 
		'W', '\a', '\x3', '\x2', '\x2', '\x2', 'X', '`', '\x5', '\n', '\x6', '\x2', 
		'Y', '`', '\x5', '\f', '\a', '\x2', 'Z', '`', '\x5', '\xE', '\b', '\x2', 
		'[', '`', '\x5', '\x10', '\t', '\x2', '\\', '`', '\x5', '\x12', '\n', 
		'\x2', ']', '`', '\a', '\x12', '\x2', '\x2', '^', '`', '\a', '\x13', '\x2', 
		'\x2', '_', 'X', '\x3', '\x2', '\x2', '\x2', '_', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '_', 'Z', '\x3', '\x2', '\x2', '\x2', '_', '[', '\x3', '\x2', '\x2', 
		'\x2', '_', '\\', '\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', 
		'\x2', '\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', '`', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x62', '\a', '\x19', '\x2', '\x2', '\x62', 
		'\x63', '\a', '\x1A', '\x2', '\x2', '\x63', '\x64', '\a', '\x19', '\x2', 
		'\x2', '\x64', '\x65', '\a', '\x1A', '\x2', '\x2', '\x65', 'g', '\x5', 
		' ', '\x11', '\x2', '\x66', 'h', '\a', '\x1A', '\x2', '\x2', 'g', '\x66', 
		'\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 
		'j', '\x3', '\x2', '\x2', '\x2', 'i', 'k', '\x5', '\x14', '\v', '\x2', 
		'j', 'i', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\a', '\x18', '\x2', '\x2', 
		'm', '\v', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '\x3', '\x2', '\x2', 
		'o', 'p', '\a', '\x1A', '\x2', '\x2', 'p', 'q', '\a', '\x19', '\x2', '\x2', 
		'q', 'r', '\a', '\x1A', '\x2', '\x2', 'r', 't', '\x5', ' ', '\x11', '\x2', 
		's', 'u', '\a', '\x1A', '\x2', '\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\a', '\x18', '\x2', '\x2', 'w', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\a', '\x19', '\x2', '\x2', 'y', '{', '\a', '\x16', '\x2', 
		'\x2', 'z', '|', '\a', '\x1A', '\x2', '\x2', '{', 'z', '\x3', '\x2', '\x2', 
		'\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', 
		'\x2', '}', '\x7F', '\x5', ' ', '\x11', '\x2', '~', '\x80', '\a', '\x1A', 
		'\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x83', '\a', '\x17', '\x2', '\x2', '\x82', '\x84', '\a', '\x1A', 
		'\x2', '\x2', '\x83', '\x82', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x87', '\a', '\x19', '\x2', '\x2', '\x86', '\x88', '\a', '\x1A', 
		'\x2', '\x2', '\x87', '\x86', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x89', '\x8B', '\x5', ' ', '\x11', '\x2', '\x8A', '\x8C', '\a', '\x1A', 
		'\x2', '\x2', '\x8B', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x8F', '\x5', '\x14', '\v', '\x2', '\x8E', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', '\x18', '\x2', '\x2', 
		'\x91', '\xF', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', '\x19', 
		'\x2', '\x2', '\x93', '\x95', '\a', '\x16', '\x2', '\x2', '\x94', '\x96', 
		'\a', '\x1A', '\x2', '\x2', '\x95', '\x94', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x99', '\x5', ' ', '\x11', '\x2', '\x98', '\x9A', 
		'\a', '\x1A', '\x2', '\x2', '\x99', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x9D', '\a', '\x17', '\x2', '\x2', '\x9C', '\x9E', 
		'\a', '\x1A', '\x2', '\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\xA1', '\a', '\x4', '\x2', '\x2', '\xA0', '\xA2', 
		'\a', '\x1B', '\x2', '\x2', '\xA1', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\xA5', '\a', '\x1A', '\x2', '\x2', '\xA4', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\a', '\x19', 
		'\x2', '\x2', '\xA7', '\xA8', '\a', '\x16', '\x2', '\x2', '\xA8', '\xAA', 
		'\a', '\x17', '\x2', '\x2', '\xA9', '\xAB', '\a', '\x1A', '\x2', '\x2', 
		'\xAA', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', 
		'\a', '\x19', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x1A', '\x2', '\x2', 
		'\xAE', '\xB0', '\x5', ' ', '\x11', '\x2', '\xAF', '\xB1', '\a', '\x1A', 
		'\x2', '\x2', '\xB0', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xB4', '\a', '\x5', '\x2', '\x2', '\xB3', '\xB5', '\a', '\x1A', 
		'\x2', '\x2', '\xB4', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\xB8', '\x5', ' ', '\x11', '\x2', '\xB7', '\xB9', '\a', '\x1A', 
		'\x2', '\x2', '\xB8', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\xBB', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\xBC', '\x5', '\x14', '\v', '\x2', '\xBB', '\xBA', '\x3', '\x2', 
		'\x2', '\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\a', '\x18', '\x2', '\x2', 
		'\xBE', '\x11', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\a', '\x6', 
		'\x2', '\x2', '\xC0', '\xC1', '\a', '\x1A', '\x2', '\x2', '\xC1', '\xC2', 
		'\a', '\x19', '\x2', '\x2', '\xC2', '\xC3', '\a', '\x1A', '\x2', '\x2', 
		'\xC3', '\xC4', '\x5', ' ', '\x11', '\x2', '\xC4', '\xC5', '\a', '\x1A', 
		'\x2', '\x2', '\xC5', '\xC7', '\x5', ' ', '\x11', '\x2', '\xC6', '\xC8', 
		'\a', '\x1A', '\x2', '\x2', '\xC7', '\xC6', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCA', '\x3', '\x2', 
		'\x2', '\x2', '\xC9', '\xCB', '\x5', '\x14', '\v', '\x2', '\xCA', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\a', '\x18', 
		'\x2', '\x2', '\xCD', '\x13', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xD5', 
		'\a', '\x14', '\x2', '\x2', '\xCF', '\xD1', '\a', '\x1A', '\x2', '\x2', 
		'\xD0', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD4', 
		'\x5', '\x16', '\f', '\x2', '\xD3', '\xD0', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xD7', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xDA', '\a', '\x1A', '\x2', '\x2', '\xD9', '\xD8', '\x3', '\x2', 
		'\x2', '\x2', '\xD9', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\xDD', '\a', '\x15', '\x2', '\x2', 
		'\xDC', '\xDE', '\a', '\x1A', '\x2', '\x2', '\xDD', '\xDC', '\x3', '\x2', 
		'\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\xDF', '\xE1', '\a', '\x19', '\x2', '\x2', 
		'\xE0', '\xE2', '\a', '\x1A', '\x2', '\x2', '\xE1', '\xE0', '\x3', '\x2', 
		'\x2', '\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\xE5', '\a', '%', '\x2', '\x2', '\xE4', 
		'\xE6', '\a', '\x1A', '\x2', '\x2', '\xE5', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE9', '\x5', ' ', '\x11', '\x2', '\xE8', 
		'\xEA', '\a', '\x1A', '\x2', '\x2', '\xE9', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\xEC', '\a', '\x18', '\x2', '\x2', '\xEC', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\a', '\a', '\x2', 
		'\x2', '\xEE', '\x19', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\a', 
		'\b', '\x2', '\x2', '\xF0', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xF2', '\t', '\x2', '\x2', '\x2', '\xF2', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xF4', '\t', '\x3', '\x2', '\x2', '\xF4', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF6', '\b', '\x11', '\x1', '\x2', '\xF6', 
		'\x134', '\x5', '*', '\x16', '\x2', '\xF7', '\xF9', '\a', '\x16', '\x2', 
		'\x2', '\xF8', '\xFA', '\a', '\x1A', '\x2', '\x2', '\xF9', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFD', '\x5', ' ', '\x11', 
		'\x2', '\xFC', '\xFE', '\a', '\x1A', '\x2', '\x2', '\xFD', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x101', '\a', '\x5', '\x2', 
		'\x2', '\x100', '\x102', '\a', '\x1A', '\x2', '\x2', '\x101', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x103', '\x3', '\x2', '\x2', '\x2', '\x103', '\x105', '\a', 
		'\r', '\x2', '\x2', '\x104', '\x106', '\a', '\x1A', '\x2', '\x2', '\x105', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', '\x107', '\x109', 
		'\x5', ' ', '\x11', '\x2', '\x108', '\x10A', '\a', '\x1A', '\x2', '\x2', 
		'\x109', '\x108', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x10C', '\a', '\x17', '\x2', '\x2', '\x10C', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x10F', '\a', '\x16', '\x2', '\x2', '\x10E', '\x110', 
		'\a', '\x1A', '\x2', '\x2', '\x10F', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x10F', '\x110', '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x113', '\x5', ' ', '\x11', '\x2', '\x112', 
		'\x114', '\a', '\x1A', '\x2', '\x2', '\x113', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x117', '\a', '\x5', '\x2', '\x2', 
		'\x116', '\x118', '\a', '\x1A', '\x2', '\x2', '\x117', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11B', '\a', '\xE', '\x2', 
		'\x2', '\x11A', '\x11C', '\a', '\x1A', '\x2', '\x2', '\x11B', '\x11A', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11F', '\x5', 
		' ', '\x11', '\x2', '\x11E', '\x120', '\a', '\x1A', '\x2', '\x2', '\x11F', 
		'\x11E', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\x121', '\x3', '\x2', '\x2', '\x2', '\x121', '\x122', 
		'\a', '\x17', '\x2', '\x2', '\x122', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x125', '\x5', '$', '\x13', '\x2', '\x124', '\x126', '\a', '\x1A', 
		'\x2', '\x2', '\x125', '\x124', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x127', '\x128', '\x5', ' ', '\x11', '\x4', '\x128', '\x134', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x12B', '\a', '\x10', '\x2', '\x2', '\x12A', 
		'\x12C', '\a', '\x1A', '\x2', '\x2', '\x12B', '\x12A', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x12F', '\x5', ' ', '\x11', '\x2', 
		'\x12E', '\x130', '\a', '\x1A', '\x2', '\x2', '\x12F', '\x12E', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x130', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x131', '\x3', '\x2', '\x2', '\x2', '\x131', '\x132', '\a', '\x11', '\x2', 
		'\x2', '\x132', '\x134', '\x3', '\x2', '\x2', '\x2', '\x133', '\xF5', 
		'\x3', '\x2', '\x2', '\x2', '\x133', '\xF7', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x133', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x133', '\x129', '\x3', '\x2', '\x2', '\x2', '\x134', 
		'\x14F', '\x3', '\x2', '\x2', '\x2', '\x135', '\x137', '\f', '\x5', '\x2', 
		'\x2', '\x136', '\x138', '\a', '\x1A', '\x2', '\x2', '\x137', '\x136', 
		'\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x139', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13B', '\x5', 
		'\"', '\x12', '\x2', '\x13A', '\x13C', '\a', '\x1A', '\x2', '\x2', '\x13B', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', 
		'\x5', ' ', '\x11', '\x6', '\x13E', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		'\x13F', '\x140', '\f', '\a', '\x2', '\x2', '\x140', '\x141', '\a', '\xF', 
		'\x2', '\x2', '\x141', '\x14E', '\a', '\x19', '\x2', '\x2', '\x142', '\x143', 
		'\f', '\x6', '\x2', '\x2', '\x143', '\x145', '\a', '\x16', '\x2', '\x2', 
		'\x144', '\x146', '\a', '\x1A', '\x2', '\x2', '\x145', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '\x145', '\x146', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x147', '\x149', '\x5', ' ', '\x11', 
		'\x2', '\x148', '\x14A', '\a', '\x1A', '\x2', '\x2', '\x149', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\x3', '\x2', '\x2', '\x2', 
		'\x14A', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14C', '\a', 
		'\x17', '\x2', '\x2', '\x14C', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'\x135', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x13F', '\x3', '\x2', '\x2', 
		'\x2', '\x14D', '\x142', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x14F', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x150', '\x3', '\x2', '\x2', '\x2', '\x150', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x151', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', 
		'\t', '\x4', '\x2', '\x2', '\x153', '#', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\x155', '\t', '\x5', '\x2', '\x2', '\x155', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x157', '\t', '\x6', '\x2', '\x2', '\x157', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x15B', '\a', '/', '\x2', '\x2', '\x159', 
		'\x15B', '\a', '\x30', '\x2', '\x2', '\x15A', '\x158', '\x3', '\x2', '\x2', 
		'\x2', '\x15A', '\x159', '\x3', '\x2', '\x2', '\x2', '\x15B', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x15C', '\x168', '\x5', '\x18', '\r', '\x2', '\x15D', 
		'\x168', '\x5', '\x1A', '\xE', '\x2', '\x15E', '\x168', '\x5', '\x1C', 
		'\xF', '\x2', '\x15F', '\x168', '\x5', '\x1E', '\x10', '\x2', '\x160', 
		'\x168', '\a', '\x19', '\x2', '\x2', '\x161', '\x168', '\a', '/', '\x2', 
		'\x2', '\x162', '\x168', '\a', '\x30', '\x2', '\x2', '\x163', '\x168', 
		'\a', '\x31', '\x2', '\x2', '\x164', '\x168', '\a', '\x32', '\x2', '\x2', 
		'\x165', '\x168', '\a', '\x33', '\x2', '\x2', '\x166', '\x168', '\a', 
		'\x34', '\x2', '\x2', '\x167', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x167', 
		'\x15D', '\x3', '\x2', '\x2', '\x2', '\x167', '\x15E', '\x3', '\x2', '\x2', 
		'\x2', '\x167', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x167', '\x160', 
		'\x3', '\x2', '\x2', '\x2', '\x167', '\x161', '\x3', '\x2', '\x2', '\x2', 
		'\x167', '\x162', '\x3', '\x2', '\x2', '\x2', '\x167', '\x163', '\x3', 
		'\x2', '\x2', '\x2', '\x167', '\x164', '\x3', '\x2', '\x2', '\x2', '\x167', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x167', '\x166', '\x3', '\x2', '\x2', 
		'\x2', '\x168', '+', '\x3', '\x2', '\x2', '\x2', '?', '-', '\x31', '\x35', 
		'=', '\x41', '\x44', 'G', 'K', 'O', 'S', '_', 'g', 'j', 't', '{', '\x7F', 
		'\x83', '\x87', '\x8B', '\x8E', '\x95', '\x99', '\x9D', '\xA1', '\xA4', 
		'\xAA', '\xB0', '\xB4', '\xB8', '\xBB', '\xC7', '\xCA', '\xD0', '\xD5', 
		'\xD9', '\xDD', '\xE1', '\xE5', '\xE9', '\xF9', '\xFD', '\x101', '\x105', 
		'\x109', '\x10F', '\x113', '\x117', '\x11B', '\x11F', '\x125', '\x12B', 
		'\x12F', '\x133', '\x137', '\x13B', '\x145', '\x149', '\x14D', '\x14F', 
		'\x15A', '\x167',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
